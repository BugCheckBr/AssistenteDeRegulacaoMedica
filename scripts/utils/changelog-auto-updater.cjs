#!/usr/bin/env node

/**
 * üîÑ Auto Changelog Updater
 *
 * Script para automatizar a atualiza√ß√£o do CHANGELOG.md na se√ß√£o [Unreleased]
 * seguindo as instru√ß√µes do agents.md
 *
 * Uso:
 * - node scripts/utils/changelog-auto-updater.js --type feat --scope api --description "adiciona endpoint de pacientes"
 * - npm run changelog:update -- --type fix --scope ui --description "corrige layout da sidebar"
 */

const fs = require('fs').promises;
const path = require('path');
const yargs = require('yargs/yargs');
const { hideBin } = require('yargs/helpers');

class ChangelogAutoUpdater {
  constructor(rootDir = process.cwd()) {
    this.rootDir = rootDir;
    this.changelogPath = path.join(rootDir, 'CHANGELOG.md');
  }

  /**
   * Atualiza o CHANGELOG.md na se√ß√£o [Unreleased]
   * @param {Object} options - Op√ß√µes da mudan√ßa
   * @param {string} options.type - Tipo: feat, fix, docs, style, refactor, test, chore
   * @param {string} options.scope - Escopo: api, ui, timeline, store, etc.
   * @param {string} options.description - Descri√ß√£o da mudan√ßa
   * @param {string} [options.details] - Detalhes adicionais (opcional)
   */
  async updateUnreleased({ type, scope, description, details }) {
    try {
      const changelog = await this.readChangelog();
      const section = this.getChangelogSection(type);
      const entry = this.formatChangelogEntry({ type, scope, description, details });

      const updatedChangelog = this.insertUnreleasedEntry(changelog, section, entry);

      await fs.writeFile(this.changelogPath, updatedChangelog, 'utf8');

      console.log(`‚úÖ CHANGELOG.md atualizado:`);
      console.log(`   üìù ${section}: ${entry}`);
      console.log(`   üìç Se√ß√£o: [Unreleased] > ${section}`);

      return true;
    } catch (error) {
      console.error('‚ùå Erro ao atualizar CHANGELOG.md:', error.message);
      return false;
    }
  }

  async readChangelog() {
    try {
      return await fs.readFile(this.changelogPath, 'utf8');
    } catch (error) {
      throw new Error(`N√£o foi poss√≠vel ler CHANGELOG.md: ${error.message}`);
    }
  }

  /**
   * Mapeia tipos de commit para se√ß√µes do changelog
   */
  getChangelogSection(type) {
    const sectionMap = {
      feat: '‚ú® Added',
      fix: 'üêû Fixed',
      docs: 'üìö Documentation',
      style: 'üé® Style',
      refactor: 'üõ†Ô∏è Changed',
      test: 'üß™ Testing',
      chore: 'üîß Maintenance',
      perf: '‚ö° Performance',
      build: 'üèóÔ∏è Build',
      ci: 'ü§ñ CI/CD',
    };

    return sectionMap[type] || 'üõ†Ô∏è Changed';
  }

  /**
   * Formata entrada do changelog seguindo padr√µes m√©dicos
   */
  formatChangelogEntry({ scope, description, details }) {
    const scopeEmoji = this.getScopeEmoji(scope);
    const formattedScope = scope ? `**${scopeEmoji} ${scope}**` : '';

    let entry = formattedScope ? `${formattedScope}: ${description}` : description;

    // Capitaliza primeira letra
    entry = entry.charAt(0).toUpperCase() + entry.slice(1);

    if (details) {
      entry += `\n  - ${details}`;
    }

    return entry;
  }

  /**
   * Mapeia escopos para emojis seguindo padr√µes m√©dicos
   */
  getScopeEmoji(scope) {
    const emojiMap = {
      api: 'üîó',
      ui: 'üé®',
      timeline: 'üìÖ',
      store: 'üíæ',
      sidebar: 'üìã',
      search: 'üîç',
      patient: 'üè•',
      regulation: 'üìù',
      sigss: 'üîê',
      cadsus: 'üèõÔ∏è',
      manifest: 'üì¶',
      security: 'üîí',
      performance: '‚ö°',
      medical: 'üè•',
      compliance: 'üìã',
    };

    return emojiMap[scope] || 'üîß';
  }

  /**
   * Insere entrada na se√ß√£o [Unreleased] do changelog
   */
  insertUnreleasedEntry(changelog, section, entry) {
    const lines = changelog.split('\n');

    // Encontra a se√ß√£o [Unreleased]
    const unreleasedIndex = lines.findIndex((line) => line.trim() === '## [Unreleased]');

    if (unreleasedIndex === -1) {
      throw new Error('Se√ß√£o [Unreleased] n√£o encontrada no CHANGELOG.md');
    }

    // Encontra ou cria a se√ß√£o espec√≠fica (Added, Fixed, etc.)
    let sectionIndex = -1;
    let insertIndex = unreleasedIndex + 1;

    // Procura pela se√ß√£o espec√≠fica ap√≥s [Unreleased]
    for (let i = unreleasedIndex + 1; i < lines.length; i++) {
      const line = lines[i].trim();

      // Para na pr√≥xima vers√£o
      if (line.startsWith('## [') && !line.includes('Unreleased')) {
        break;
      }

      // Encontrou a se√ß√£o
      if (line === `### ${section}`) {
        sectionIndex = i;
        break;
      }

      // Atualiza √≠ndice de inser√ß√£o
      if (line.startsWith('### ') || line === '') {
        insertIndex = i;
      }
    }

    if (sectionIndex === -1) {
      // Cria nova se√ß√£o
      const newSectionLines = ['', `### ${section}`, '', `- ${entry}`, ''];

      lines.splice(insertIndex + 1, 0, ...newSectionLines);
    } else {
      // Adiciona √† se√ß√£o existente
      const nextLineIndex = sectionIndex + 1;

      // Pula linhas vazias
      let insertAt = nextLineIndex;
      while (insertAt < lines.length && lines[insertAt].trim() === '') {
        insertAt++;
      }

      lines.splice(insertAt, 0, `- ${entry}`);
    }

    return lines.join('\n');
  }

  /**
   * Detecta mudan√ßas n√£o commitadas e sugere entradas autom√°ticas
   */
  async suggestAutoEntries() {
    // TODO: Implementar detec√ß√£o git diff e sugest√µes autom√°ticas
    console.log('ü§ñ Auto-detec√ß√£o de mudan√ßas (em desenvolvimento)');
  }
}

// CLI Interface
if (require.main === module) {
  const argv = yargs(hideBin(process.argv))
    .option('type', {
      alias: 't',
      describe: 'Tipo da mudan√ßa',
      choices: ['feat', 'fix', 'docs', 'style', 'refactor', 'test', 'chore', 'perf', 'build', 'ci'],
      demandOption: true,
    })
    .option('scope', {
      alias: 's',
      describe: 'Escopo da mudan√ßa (api, ui, timeline, etc.)',
      type: 'string',
    })
    .option('description', {
      alias: 'd',
      describe: 'Descri√ß√£o da mudan√ßa',
      type: 'string',
      demandOption: true,
    })
    .option('details', {
      describe: 'Detalhes adicionais (opcional)',
      type: 'string',
    })
    .help().argv;

  const updater = new ChangelogAutoUpdater();
  updater.updateUnreleased(argv).then((success) => {
    process.exit(success ? 0 : 1);
  });
}

module.exports = { ChangelogAutoUpdater };
