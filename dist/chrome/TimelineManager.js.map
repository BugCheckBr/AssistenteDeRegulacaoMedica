{"version":3,"file":"TimelineManager.js","mappings":";;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AAIA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AAAA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AAAA;AAAA;AAAA;AAEA;AAEA;AAEA;AAEA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AAEA;AACA;AAEA;AAAA;AACA;AACA;AAGA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;AChRA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;AC1BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;AC3BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;ACPA;;;;;ACAA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;ACNA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;AEhDA;AACA;AACA;AACA;AACA","sources":["webpack://assistente-de-regulacao-medica/./TimelineManager.js","webpack://assistente-de-regulacao-medica/webpack/bootstrap","webpack://assistente-de-regulacao-medica/webpack/runtime/chunk loaded","webpack://assistente-de-regulacao-medica/webpack/runtime/define property getters","webpack://assistente-de-regulacao-medica/webpack/runtime/hasOwnProperty shorthand","webpack://assistente-de-regulacao-medica/webpack/runtime/make namespace object","webpack://assistente-de-regulacao-medica/webpack/runtime/jsonp chunk loading","webpack://assistente-de-regulacao-medica/webpack/before-startup","webpack://assistente-de-regulacao-medica/webpack/startup","webpack://assistente-de-regulacao-medica/webpack/after-startup"],"sourcesContent":["/**\r\n * @file Módulo TimelineManager, responsável por gerir a secção da Linha do Tempo.\r\n */\r\nimport * as API from './api.js';\r\nimport * as Renderers from './renderers.js';\r\nimport { store } from './store.js';\r\nimport * as Utils from './utils.js';\r\n\r\nexport class TimelineManager {\r\n  constructor(sectionKey, config, globalSettings) {\r\n    this.sectionKey = sectionKey;\r\n    this.config = config;\r\n    this.globalSettings = globalSettings;\r\n\r\n    this.allData = [];\r\n    this.currentPatient = null;\r\n    this.isLoading = false;\r\n\r\n    // State for automation filters\r\n    this.activeRuleFilters = null;\r\n    this.activeRuleName = null;\r\n    this.isFilteredView = false;\r\n\r\n    this.elements = {};\r\n    this.init();\r\n  }\r\n\r\n  init() {\r\n    this.cacheDomElements();\r\n    this.addEventListeners();\r\n    store.subscribe(() => this.onStateChange());\r\n  }\r\n\r\n  cacheDomElements() {\r\n    this.elements = {\r\n      section: document.getElementById('timeline-section'),\r\n      wrapper: document.getElementById('timeline-wrapper'),\r\n      content: document.getElementById('timeline-content'),\r\n      fetchBtn: document.getElementById('fetch-timeline-btn'),\r\n      toggleBtn: document.getElementById('toggle-timeline-list-btn'),\r\n      automationFeedback: document.getElementById('timeline-automation-feedback'),\r\n      dateInitial: document.getElementById('timeline-date-initial'),\r\n      dateFinal: document.getElementById('timeline-date-final'),\r\n      searchKeyword: document.getElementById('timeline-search-keyword'),\r\n    };\r\n  }\r\n\r\n  addEventListeners() {\r\n    // Remove listeners antes de adicionar\r\n    if (!this._listeners) this._listeners = {};\r\n    const el = this.elements;\r\n    // Remove\r\n    el.fetchBtn?.removeEventListener('click', this._listeners.onFetchBtnClick);\r\n    el.toggleBtn?.removeEventListener('click', this._listeners.onToggleBtnClick);\r\n    el.searchKeyword?.removeEventListener('input', this._listeners.onSearchKeywordInput);\r\n    el.dateInitial?.removeEventListener('change', this._listeners.onDateInitialChange);\r\n    el.dateFinal?.removeEventListener('change', this._listeners.onDateFinalChange);\r\n    el.section?.removeEventListener('click', this._listeners.onSectionClick);\r\n\r\n    // Funções nomeadas\r\n    this._listeners.onFetchBtnClick = this.onFetchBtnClick.bind(this);\r\n    this._listeners.onToggleBtnClick = this.onToggleBtnClick.bind(this);\r\n    this._listeners.onSearchKeywordInput = Utils.debounce(\r\n      this.onSearchKeywordInput.bind(this),\r\n      300\r\n    );\r\n    this._listeners.onDateInitialChange = this.onDateInitialChange.bind(this);\r\n    this._listeners.onDateFinalChange = this.onDateFinalChange.bind(this);\r\n    this._listeners.onSectionClick = this.onSectionClick.bind(this);\r\n\r\n    // Adiciona\r\n    el.fetchBtn?.addEventListener('click', this._listeners.onFetchBtnClick);\r\n    el.toggleBtn?.addEventListener('click', this._listeners.onToggleBtnClick);\r\n    el.searchKeyword?.addEventListener('input', this._listeners.onSearchKeywordInput);\r\n    el.dateInitial?.addEventListener('change', this._listeners.onDateInitialChange);\r\n    el.dateFinal?.addEventListener('change', this._listeners.onDateFinalChange);\r\n    el.section?.addEventListener('click', this._listeners.onSectionClick);\r\n  }\r\n\r\n  onFetchBtnClick() {\r\n    this.fetchData();\r\n  }\r\n  onToggleBtnClick() {\r\n    this.toggleSection();\r\n  }\r\n  onSearchKeywordInput() {\r\n    this.render();\r\n  }\r\n  onDateInitialChange() {\r\n    this.render();\r\n  }\r\n  onDateFinalChange() {\r\n    this.render();\r\n  }\r\n  onSectionClick(event) {\r\n    const header = event.target.closest('.timeline-header');\r\n    if (header) {\r\n      const details = header.nextElementSibling;\r\n      if (details && details.classList.contains('timeline-details-body')) {\r\n        details.classList.toggle('show');\r\n      }\r\n      return;\r\n    }\r\n\r\n    const toggleDetailsBtn = event.target.closest('.timeline-toggle-details-btn');\r\n    if (toggleDetailsBtn) {\r\n      const timelineItem = toggleDetailsBtn.closest('.timeline-item');\r\n      const details = timelineItem?.querySelector('.timeline-details-body');\r\n      if (details) {\r\n        details.classList.toggle('show');\r\n      }\r\n      return;\r\n    }\r\n\r\n    const toggleFilterBtn = event.target.closest('#timeline-toggle-filter-btn');\r\n    if (toggleFilterBtn) {\r\n      this.toggleFilteredView();\r\n    }\r\n  }\r\n\r\n  onStateChange() {\r\n    const patientState = store.getPatient();\r\n    const newPatient = patientState ? patientState.ficha : null;\r\n\r\n    if (this.currentPatient?.isenPK?.idp !== newPatient?.isenPK?.idp) {\r\n      this.setPatient(newPatient);\r\n    }\r\n  }\r\n\r\n  setPatient(patient) {\r\n    this.currentPatient = patient;\r\n    this.allData = [];\r\n    this.clearAutomation();\r\n    this.elements.content.innerHTML = '';\r\n    if (this.elements.searchKeyword) {\r\n      this.elements.searchKeyword.value = '';\r\n    }\r\n    this.applyDefaultDateRange();\r\n\r\n    if (this.elements.section) {\r\n      this.elements.section.style.display = patient ? 'block' : 'none';\r\n    }\r\n  }\r\n\r\n  applyDefaultDateRange() {\r\n    const dateRangeDefaults = this.globalSettings.userPreferences.dateRangeDefaults;\r\n    const range = dateRangeDefaults.timeline || { start: -12, end: 0 };\r\n\r\n    if (this.elements.dateInitial)\r\n      this.elements.dateInitial.valueAsDate = Utils.calculateRelativeDate(range.start);\r\n    if (this.elements.dateFinal)\r\n      this.elements.dateFinal.valueAsDate = Utils.calculateRelativeDate(range.end);\r\n  }\r\n\r\n  async fetchData() {\r\n    if (!this.currentPatient || this.isLoading) {\r\n      return;\r\n    }\r\n\r\n    this.isLoading = true;\r\n    Renderers.renderTimeline([], 'loading');\r\n\r\n    try {\r\n      const params = {\r\n        isenPK: `${this.currentPatient.isenPK.idp}-${this.currentPatient.isenPK.ids}`,\r\n        isenFullPKCrypto: this.currentPatient.isenFullPKCrypto,\r\n        dataInicial: '01/01/1900', // Busca sempre o histórico completo\r\n        dataFinal: new Date().toLocaleDateString('pt-BR'),\r\n      };\r\n\r\n      const apiData = await API.fetchAllTimelineData(params);\r\n      const normalizedData = Utils.normalizeTimelineData(apiData);\r\n\r\n      this.allData = normalizedData;\r\n      this.render();\r\n    } catch (error) {\r\n      console.error('Erro ao buscar dados para a Linha do Tempo:', error);\r\n      Renderers.renderTimeline([], 'error');\r\n    } finally {\r\n      this.isLoading = false;\r\n    }\r\n  }\r\n\r\n  getFilterValues() {\r\n    return {\r\n      startDate: this.elements.dateInitial?.value,\r\n      endDate: this.elements.dateFinal?.value,\r\n      keyword: Utils.normalizeString(this.elements.searchKeyword?.value || ''),\r\n    };\r\n  }\r\n\r\n  render() {\r\n    if (this.allData.length === 0 && !this.isLoading) {\r\n      Renderers.renderTimeline([], 'empty');\r\n      return;\r\n    }\r\n\r\n    let dataToRender = this.allData;\r\n    const filters = this.getFilterValues();\r\n\r\n    // Client-side filtering\r\n    if (filters.startDate) {\r\n      const startDate = new Date(filters.startDate);\r\n      dataToRender = dataToRender.filter((event) => event.sortableDate >= startDate);\r\n    }\r\n    if (filters.endDate) {\r\n      const endDate = new Date(filters.endDate);\r\n      endDate.setHours(23, 59, 59, 999); // Garante que o dia final seja incluído\r\n      dataToRender = dataToRender.filter((event) => event.sortableDate <= endDate);\r\n    }\r\n    if (filters.keyword) {\r\n      dataToRender = dataToRender.filter((event) => event.searchText.includes(filters.keyword));\r\n    }\r\n\r\n    // Automation rule filtering\r\n    if (this.isFilteredView && this.activeRuleFilters) {\r\n      dataToRender = Utils.filterTimelineEvents(dataToRender, this.activeRuleFilters);\r\n    }\r\n\r\n    Renderers.renderTimeline(dataToRender, 'success');\r\n  }\r\n\r\n  toggleSection() {\r\n    this.elements.wrapper?.classList.toggle('show');\r\n    this.elements.toggleBtn.textContent = this.elements.wrapper.classList.contains('show')\r\n      ? 'Recolher'\r\n      : 'Expandir';\r\n  }\r\n\r\n  applyAutomationFilters(filters, ruleName) {\r\n    this.activeRuleFilters = filters;\r\n    this.activeRuleName = ruleName;\r\n    this.isFilteredView = false;\r\n\r\n    if (this.elements.automationFeedback) {\r\n      this.elements.automationFeedback.innerHTML = `\r\n            <div class=\"flex justify-between items-center text-sm\">\r\n                <span>Regra '<strong>${ruleName}</strong>' ativa.</span>\r\n                <button id=\"timeline-toggle-filter-btn\" class=\"font-semibold text-blue-600 hover:underline\">\r\n                    Ver timeline focada\r\n                </button>\r\n            </div>\r\n        `;\r\n      this.elements.automationFeedback.classList.remove('hidden');\r\n    }\r\n\r\n    if (this.allData.length > 0) {\r\n      this.render();\r\n    }\r\n  }\r\n\r\n  clearAutomation() {\r\n    this.activeRuleFilters = null;\r\n    this.activeRuleName = null;\r\n    this.isFilteredView = false;\r\n    if (this.elements.automationFeedback) {\r\n      this.elements.automationFeedback.classList.add('hidden');\r\n      this.elements.automationFeedback.innerHTML = '';\r\n    }\r\n    if (this.allData.length > 0) {\r\n      this.render();\r\n    }\r\n  }\r\n\r\n  toggleFilteredView() {\r\n    this.isFilteredView = !this.isFilteredView;\r\n    const button = document.getElementById('timeline-toggle-filter-btn');\r\n    if (button) {\r\n      button.textContent = this.isFilteredView ? 'Ver timeline completa' : 'Ver timeline focada';\r\n    }\r\n    this.render();\r\n  }\r\n}\r\n","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n// expose the modules object (__webpack_modules__)\n__webpack_require__.m = __webpack_modules__;\n\n","var deferred = [];\n__webpack_require__.O = (result, chunkIds, fn, priority) => {\n\tif(chunkIds) {\n\t\tpriority = priority || 0;\n\t\tfor(var i = deferred.length; i > 0 && deferred[i - 1][2] > priority; i--) deferred[i] = deferred[i - 1];\n\t\tdeferred[i] = [chunkIds, fn, priority];\n\t\treturn;\n\t}\n\tvar notFulfilled = Infinity;\n\tfor (var i = 0; i < deferred.length; i++) {\n\t\tvar [chunkIds, fn, priority] = deferred[i];\n\t\tvar fulfilled = true;\n\t\tfor (var j = 0; j < chunkIds.length; j++) {\n\t\t\tif ((priority & 1 === 0 || notFulfilled >= priority) && Object.keys(__webpack_require__.O).every((key) => (__webpack_require__.O[key](chunkIds[j])))) {\n\t\t\t\tchunkIds.splice(j--, 1);\n\t\t\t} else {\n\t\t\t\tfulfilled = false;\n\t\t\t\tif(priority < notFulfilled) notFulfilled = priority;\n\t\t\t}\n\t\t}\n\t\tif(fulfilled) {\n\t\t\tdeferred.splice(i--, 1)\n\t\t\tvar r = fn();\n\t\t\tif (r !== undefined) result = r;\n\t\t}\n\t}\n\treturn result;\n};","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","// no baseURI\n\n// object to store loaded and loading chunks\n// undefined = chunk not loaded, null = chunk preloaded/prefetched\n// [resolve, reject, Promise] = chunk loading, 0 = chunk loaded\nvar installedChunks = {\n\t\"TimelineManager\": 0\n};\n\n// no chunk on demand loading\n\n// no prefetching\n\n// no preloaded\n\n// no HMR\n\n// no HMR manifest\n\n__webpack_require__.O.j = (chunkId) => (installedChunks[chunkId] === 0);\n\n// install a JSONP callback for chunk loading\nvar webpackJsonpCallback = (parentChunkLoadingFunction, data) => {\n\tvar [chunkIds, moreModules, runtime] = data;\n\t// add \"moreModules\" to the modules object,\n\t// then flag all \"chunkIds\" as loaded and fire callback\n\tvar moduleId, chunkId, i = 0;\n\tif(chunkIds.some((id) => (installedChunks[id] !== 0))) {\n\t\tfor(moduleId in moreModules) {\n\t\t\tif(__webpack_require__.o(moreModules, moduleId)) {\n\t\t\t\t__webpack_require__.m[moduleId] = moreModules[moduleId];\n\t\t\t}\n\t\t}\n\t\tif(runtime) var result = runtime(__webpack_require__);\n\t}\n\tif(parentChunkLoadingFunction) parentChunkLoadingFunction(data);\n\tfor(;i < chunkIds.length; i++) {\n\t\tchunkId = chunkIds[i];\n\t\tif(__webpack_require__.o(installedChunks, chunkId) && installedChunks[chunkId]) {\n\t\t\tinstalledChunks[chunkId][0]();\n\t\t}\n\t\tinstalledChunks[chunkId] = 0;\n\t}\n\treturn __webpack_require__.O(result);\n}\n\nvar chunkLoadingGlobal = self[\"webpackChunkassistente_de_regulacao_medica\"] = self[\"webpackChunkassistente_de_regulacao_medica\"] || [];\nchunkLoadingGlobal.forEach(webpackJsonpCallback.bind(null, 0));\nchunkLoadingGlobal.push = webpackJsonpCallback.bind(null, chunkLoadingGlobal.push.bind(chunkLoadingGlobal));","","// startup\n// Load entry module and return exports\n// This entry module depends on other loaded chunks and execution need to be delayed\nvar __webpack_exports__ = __webpack_require__.O(undefined, [\"common\"], () => (__webpack_require__(\"./TimelineManager.js\")))\n__webpack_exports__ = __webpack_require__.O(__webpack_exports__);\n",""],"names":[],"sourceRoot":""}