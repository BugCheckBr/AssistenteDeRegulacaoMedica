{"version":3,"file":"common.js","mappings":";;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;ACtGA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAAA;AAAA;AACA;AAEA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AAAA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AAEA;AACA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AAGA;AACA;AAEA;AAAA;AACA;AACA;AAGA;AAGA;AAIA;AAGA;AAEA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AAEA;AAEA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AAQA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AAGA;AAAA;AACA;AAGA;AACA;AACA;AAEA;AAGA;AAIA;AACA;AACA;AACA;AAGA;AAGA;AACA;AAEA;AACA;AAEA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAKA;AACA;AACA;AACA;AACA;AAEA;AACA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAAA;AACA;AACA;AAIA;AAEA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AAEA;;AAEA;AACA;AACA;AAEA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AACA;AAEA;AAIA;AAIA;;AAEA;AACA;AAEA;AACA;AACA;AACA;AAEA;AAIA;AACA;AAAA;AACA;AAGA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AAAA;AACA;AAGA;AACA;AACA;AACA;AAEA;AACA;AAUA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAGA;AACA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AAEA;AACA;AAGA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAGA;AACA;AACA;AACA;AACA;AAEA;AAGA;AAEA;AACA;AAGA;AAAA;AAAA;AACA;AACA;AACA;AAEA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AAEA;AAAA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AAAA;AACA;AAEA;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AAGA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AAEA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;;AAEA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;AC/qBA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AAEA;AAAA;AACA;AACA;AAIA;AAIA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAGA;AACA;AACA;AACA;AACA;AAEA;AAAA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AAEA;AAAA;AAAA;AAAA;AAEA;AAIA;AAIA;AAEA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;;AAEA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AAGA;;AAEA;AACA;AACA;AAIA;AAEA;AACA;AAEA;AAAA;AACA;AACA;AAIA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACpQA;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAKA;AACA;AACA;AACA;AAKA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAIA;AACA;AACA;AACA;AAMA;AACA;AACA;AAGA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AAIA;AAIA;AACA;AAKA;AACA;AACA;AAEA;AACA;AACA;AACA;AAGA;AAEA;AACA;AACA;AACA;AAEA;AAGA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AAAA;AAAA;AAAA;AACA;AAEA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAGA;AAGA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAEA;AAIA;AACA;AAAA;AAAA;AAAA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAAA;AAAA;AAAA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AAEA;AACA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAGA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AAEA;AACA;AAEA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AAEA;AACA;AAGA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAIA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AAEA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AACA;AAIA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AAGA;AACA;AACA;AACA;AACA;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AAEA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;ACvlCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;;;;;;;;;;;;;;;ACpBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAKA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAAA;AAAA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAAA;AAAA;AAMA;AACA;AAIA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAGA;;;;;;;;;;;;;;;ACvXA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;;;;;;;;;;;;;;;;;;;;;AC9SA;AACA;AACA;;AAEA;AACA;AAEA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AAIA;AAIA;AACA;AACA;AAKA;AAEA;AACA;AACA;AAGA;AAGA;AACA;AAKA;AACA;AACA;AAIA;AACA;AACA;AAaA;AACA;AACA;AACA;AAIA;AAEA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AAIA;AAIA;AACA;AACA;AAIA;AACA;AACA;AACA;AACA;AAQA;AACA;AACA;AAIA;AACA;AAGA;AAEA;AACA;AAIA;AACA;AAEA;AAEA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AAIA;AAIA;AAIA;AACA;AACA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAGA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AAIA;AAIA;AAIA;AACA;AACA;AAIA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AAGA;AAGA;AAGA;AACA;AACA;AACA;AAGA;AAGA;AACA;AACA;AAKA;AACA;AAEA;AAIA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAIA;AAKA;AACA;AAGA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AACA;AACA;AAIA;AAIA;AACA;AAEA;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AAGA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAGA;AAEA;AACA;AACA;AACA;AACA;AACA;AAKA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AACA;AACA;AAGA;AAGA;AACA;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAGA;AAEA;AAMA;AAIA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AAGA;AAGA;AACA;AACA;AAKA;AACA;AAEA;AACA;AAIA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;ACvoBA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAAA;AAAA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;;;;;;;;;;;;;;;;AC/FA;AACA;AACA;AACA;AACA;AAEA;AAOA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAIA;AAGA;AAMA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAGA;AAEA;AAKA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAKA;AAEA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAGA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AACA;;;;;;;;;;;;;;;;;AC5KA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAQA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAKA;AACA;AACA;AACA;AACA;AAEA;;AAEA;AAGA;AAEA;AAEA;AAAA;AACA;AAIA;AACA;AACA;AAGA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;ACpKA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AAGA;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AAEA;;AAEA;AACA;AAKA;AACA;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAKA;;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AAQA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AAMA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAKA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAKA;AACA;AAWA;AAEA;AAAA;AACA;AACA;AAcA;AAEA;AAAA;AACA;AACA;AACA;AACA;AAEA;AAAA;AACA;AACA;AAkBA;AAEA;AACA;AACA;AACA;AACA;AAKA;AACA;AACA;AACA","sources":["webpack://assistente-de-regulacao-medica/./KeepAliveManager.js","webpack://assistente-de-regulacao-medica/./SectionManager.js","webpack://assistente-de-regulacao-medica/./TimelineManager.js","webpack://assistente-de-regulacao-medica/./api.js","webpack://assistente-de-regulacao-medica/./browser-polyfill.js","webpack://assistente-de-regulacao-medica/./field-config.js","webpack://assistente-de-regulacao-medica/./filter-config.js","webpack://assistente-de-regulacao-medica/./renderers.js","webpack://assistente-de-regulacao-medica/./store.js","webpack://assistente-de-regulacao-medica/./ui/patient-card.js","webpack://assistente-de-regulacao-medica/./ui/search.js","webpack://assistente-de-regulacao-medica/./utils.js"],"sourcesContent":["/**\r\n * @file Gerenciador de Keep-Alive para manter a sessão ativa\r\n */\r\nimport * as API from './api.js';\r\n\r\nexport class KeepAliveManager {\r\n  constructor() {\r\n    this.intervalId = null;\r\n    this.isActive = false;\r\n    this.intervalMinutes = 10; // Padrão: 10 minutos\r\n    \r\n    this.init();\r\n  }\r\n\r\n  async init() {\r\n    // Carrega as configurações salvas\r\n    await this.loadSettings();\r\n    \r\n    // Escuta mudanças nas configurações\r\n    if (typeof browser !== 'undefined') {\r\n      browser.storage.onChanged.addListener((changes, areaName) => {\r\n        if (areaName === 'sync' && changes.keepSessionAliveInterval) {\r\n          this.updateInterval(changes.keepSessionAliveInterval.newValue);\r\n        }\r\n      });\r\n    }\r\n  }\r\n\r\n  async loadSettings() {\r\n    try {\r\n      const api = typeof browser !== 'undefined' ? browser : chrome;\r\n      const result = await api.storage.sync.get({\r\n        keepSessionAliveInterval: 10\r\n      });\r\n      \r\n      this.updateInterval(result.keepSessionAliveInterval);\r\n    } catch (error) {\r\n      console.error('Erro ao carregar configurações do keep-alive:', error);\r\n    }\r\n  }\r\n\r\n  updateInterval(minutes) {\r\n    const newMinutes = parseInt(minutes, 10) || 0;\r\n    \r\n    this.intervalMinutes = newMinutes;\r\n    \r\n    // Para o timer atual\r\n    this.stop();\r\n    \r\n    // Inicia novo timer se o valor for maior que 0\r\n    if (this.intervalMinutes > 0) {\r\n      this.start();\r\n    }\r\n  }\r\n\r\n  start() {\r\n    if (this.intervalMinutes <= 0) {\r\n      console.log('Keep-alive desativado (intervalo = 0)');\r\n      return;\r\n    }\r\n\r\n    if (this.isActive) {\r\n      console.log('Keep-alive já está ativo');\r\n      return;\r\n    }\r\n\r\n    const intervalMs = this.intervalMinutes * 60 * 1000; // Converte minutos para milissegundos\r\n    \r\n    this.intervalId = setInterval(async () => {\r\n      try {\r\n        const success = await API.keepSessionAlive();\r\n        if (success) {\r\n          console.log(`Keep-alive executado com sucesso (${new Date().toLocaleTimeString()})`);\r\n        } else {\r\n          console.warn(`Keep-alive falhou (${new Date().toLocaleTimeString()})`);\r\n        }\r\n      } catch (error) {\r\n        console.error('Erro no keep-alive:', error);\r\n      }\r\n    }, intervalMs);\r\n\r\n    this.isActive = true;\r\n    console.log(`Keep-alive iniciado: ${this.intervalMinutes} minutos (${intervalMs}ms)`);\r\n  }\r\n\r\n  stop() {\r\n    if (this.intervalId) {\r\n      clearInterval(this.intervalId);\r\n      this.intervalId = null;\r\n    }\r\n    \r\n    this.isActive = false;\r\n    console.log('Keep-alive parado');\r\n  }\r\n\r\n  getStatus() {\r\n    return {\r\n      isActive: this.isActive,\r\n      intervalMinutes: this.intervalMinutes,\r\n      nextExecution: this.isActive ? new Date(Date.now() + (this.intervalMinutes * 60 * 1000)) : null\r\n    };\r\n  }\r\n}","/**\r\n * @file Módulo SectionManager, responsável por gerir uma secção inteira da sidebar.\r\n */\r\n\r\nimport { filterConfig } from './filter-config.js';\r\nimport * as Utils from './utils.js';\r\nimport * as API from './api.js';\r\nimport { store } from './store.js';\r\n\r\n/**\r\n * Gera o HTML para o indicador de ordenação (seta para cima/baixo).\r\n * @param {string} key - A chave da coluna atual.\r\n * @param {object} state - O objeto de estado de ordenação da secção.\r\n * @returns {string} O caractere da seta ou uma string vazia.\r\n */\r\nexport function getSortIndicator(key, state) {\r\n  if (state.key !== key) return '';\r\n  return state.order === 'asc' ? '▲' : '▼';\r\n}\r\n\r\nexport class SectionManager {\r\n  /**\r\n   * @param {string} sectionKey - A chave da secção (ex: \"consultations\").\r\n   * @param {object} config - Configurações específicas da secção.\r\n   * @param {Function} config.fetchFunction - A função da API para buscar dados.\r\n   * @param {Function} config.renderFunction - A função para renderizar os dados.\r\n   * @param {object} config.initialSortState - O estado inicial de ordenação.\r\n   * @param {object} globalSettings - Configurações globais da aplicação.\r\n   */\r\n  constructor(sectionKey, config, globalSettings) {\r\n    this.sectionKey = sectionKey;\r\n    this.prefix = this.getPrefix(sectionKey);\r\n    this.config = config;\r\n    this.globalSettings = globalSettings;\r\n\r\n    this.allData = [];\r\n    this.currentPatient = null;\r\n    this.isLoading = false;\r\n    this.sortState = { ...config.initialSortState };\r\n    this.fetchType = 'all';\r\n\r\n    this.elements = {};\r\n\r\n    this.init();\r\n  }\r\n\r\n  getPrefix(sectionKey) {\r\n    const map = {\r\n      consultations: 'consultation',\r\n      exams: 'exam',\r\n      appointments: 'appointment',\r\n      regulations: 'regulation',\r\n      documents: 'document',\r\n    };\r\n    return map[sectionKey] || sectionKey;\r\n  }\r\n\r\n  init() {\r\n    this.cacheDomElements();\r\n    this.renderFilterControls();\r\n    this.addEventListeners();\r\n    store.subscribe(() => this.onStateChange());\r\n  }\r\n\r\n  onStateChange() {\r\n    const patientState = store.getPatient();\r\n    const newPatient = patientState ? patientState.ficha : null;\r\n\r\n    if (this.currentPatient?.isenPK?.idp !== newPatient?.isenPK?.idp) {\r\n      this.setPatient(newPatient);\r\n    }\r\n\r\n    this.populateSavedFilterDropdown();\r\n  }\r\n\r\n  cacheDomElements() {\r\n    const { sectionKey, prefix } = this;\r\n    this.elements = {\r\n      section: document.getElementById(`${sectionKey}-section`),\r\n      wrapper: document.getElementById(`${sectionKey}-wrapper`),\r\n      content: document.getElementById(`${sectionKey}-content`),\r\n      fetchBtn: document.getElementById(`fetch-${sectionKey}-btn`),\r\n      toggleBtn: document.getElementById(`toggle-${sectionKey}-list-btn`),\r\n      toggleMoreBtn: document.getElementById(\r\n        `toggle-more-${prefix}-filters-btn`\r\n      ),\r\n      clearBtn: document.getElementById(`clear-${prefix}-filters-btn`),\r\n      mainFilters: document.getElementById(`${prefix}-main-filters`),\r\n      moreFilters: document.getElementById(`${prefix}-more-filters`),\r\n      automationFeedback: document.getElementById(\r\n        `${sectionKey}-automation-feedback`\r\n      ),\r\n    };\r\n  }\r\n\r\n  addEventListeners() {\r\n    this.elements.fetchBtn?.addEventListener('click', () => this.fetchData());\r\n    this.elements.toggleBtn?.addEventListener('click', () =>\r\n      this.toggleSection()\r\n    );\r\n    this.elements.toggleMoreBtn?.addEventListener('click', () =>\r\n      this.toggleMoreFilters()\r\n    );\r\n    this.elements.clearBtn?.addEventListener('click', () =>\r\n      this.clearFilters()\r\n    );\r\n\r\n    this.elements.section?.addEventListener(\r\n      'input',\r\n      Utils.debounce((e) => {\r\n        if (e.target.matches(\"input[type='text'], input[type='date']\"))\r\n          this.applyFiltersAndRender();\r\n      }, 300)\r\n    );\r\n\r\n    this.elements.section?.addEventListener('change', (e) => {\r\n      if (e.target.matches(\"select, input[type='checkbox']\")) {\r\n        if (e.target.closest('.filter-select-group')) {\r\n          this.handleFetchTypeChange(e.target);\r\n        } else {\r\n          this.applyFiltersAndRender();\r\n        }\r\n      }\r\n      if (e.target.id === `${this.prefix}-saved-filters-select`)\r\n        this.loadFilterSet();\r\n    });\r\n\r\n    this.elements.section?.addEventListener('click', (e) => {\r\n      const target = e.target;\r\n      const sortHeader = target.closest('.sort-header');\r\n      if (sortHeader) this.handleSort(sortHeader.dataset.sortKey);\r\n\r\n      if (target.closest(`#${this.prefix}-save-filter-btn`))\r\n        this.saveFilterSet();\r\n      if (target.closest(`#${this.prefix}-delete-filter-btn`))\r\n        this.deleteFilterSet();\r\n      if (target.closest('.clear-automation-btn')) {\r\n        this.clearAutomationFeedbackAndFilters(true);\r\n      }\r\n    });\r\n  }\r\n\r\n  setPatient(patient) {\r\n    this.currentPatient = patient;\r\n    this.allData = [];\r\n    this.clearFilters(false); // Reseta os filtros para o padrão ao trocar de paciente.\r\n    this.clearAutomationFeedbackAndFilters(false);\r\n    this.applyFiltersAndRender();\r\n\r\n    if (this.elements.section) {\r\n      this.elements.section.style.display = patient ? 'block' : 'none';\r\n    }\r\n\r\n    if (\r\n      patient &&\r\n      this.globalSettings.userPreferences[\r\n        `autoLoad${\r\n          this.sectionKey.charAt(0).toUpperCase() + this.sectionKey.slice(1)\r\n        }`\r\n      ]\r\n    ) {\r\n      this.fetchData();\r\n    }\r\n  }\r\n\r\n  async fetchData() {\r\n    if (!this.currentPatient) {\r\n      if (this.elements.section.style.display !== 'none')\r\n        Utils.showMessage('Nenhum paciente selecionado.');\r\n      return;\r\n    }\r\n    if (this.isLoading) return;\r\n\r\n    this.isLoading = true;\r\n    this.elements.content.innerHTML =\r\n      '<p class=\"text-slate-500\">Carregando...</p>';\r\n\r\n    try {\r\n      const fetchTypeElement = this.elements.mainFilters?.querySelector(\r\n        `#${this.prefix}-fetch-type-buttons`\r\n      );\r\n      if (fetchTypeElement) {\r\n        this.fetchType = fetchTypeElement.value;\r\n      }\r\n\r\n      const dataInicialValue = this.elements.dateInitial\r\n        ? this.elements.dateInitial.value\r\n        : null;\r\n      const dataFinalValue = this.elements.dateFinal\r\n        ? this.elements.dateFinal.value\r\n        : null;\r\n\r\n      const params = {\r\n        isenPK: `${this.currentPatient.isenPK.idp}-${this.currentPatient.isenPK.ids}`,\r\n        isenFullPKCrypto: this.currentPatient.isenFullPKCrypto,\r\n        dataInicial: dataInicialValue\r\n          ? new Date(dataInicialValue).toLocaleDateString('pt-BR')\r\n          : '01/01/1900',\r\n        dataFinal: dataFinalValue\r\n          ? new Date(dataFinalValue).toLocaleDateString('pt-BR')\r\n          : new Date().toLocaleDateString('pt-BR'),\r\n        type: this.fetchType,\r\n      };\r\n\r\n      if (this.sectionKey === 'exams') {\r\n        params.comResultado =\r\n          this.fetchType === 'withResult' || this.fetchType === 'all';\r\n        params.semResultado =\r\n          this.fetchType === 'withoutResult' || this.fetchType === 'all';\r\n      }\r\n\r\n      const result = await this.config.fetchFunction(params);\r\n      this.allData = Array.isArray(result) ? result : result.jsonData || [];\r\n    } catch (error) {\r\n      console.error(`Erro ao buscar dados para ${this.sectionKey}:`, error);\r\n      const sectionNameMap = {\r\n        consultations: 'consultas',\r\n        exams: 'exames',\r\n        appointments: 'agendamentos',\r\n        regulations: 'regulações',\r\n        documents: 'documentos',\r\n      };\r\n      const friendlyName = sectionNameMap[this.sectionKey] || this.sectionKey;\r\n      Utils.showMessage(\r\n        `Erro ao buscar ${friendlyName}. Verifique a conexão e a URL base.`\r\n      );\r\n      this.allData = [];\r\n    } finally {\r\n      this.isLoading = false;\r\n      this.applyFiltersAndRender();\r\n    }\r\n  }\r\n\r\n  applyFiltersAndRender() {\r\n    let filteredData = [...this.allData];\r\n    if (this.config.filterLogic) {\r\n      filteredData = this.config.filterLogic(\r\n        filteredData,\r\n        this.getFilterValues(),\r\n        this.fetchType\r\n      );\r\n    }\r\n    const sortedData = this.sortData(filteredData);\r\n    this.config.renderFunction(sortedData, this.sortState, this.globalSettings);\r\n    this.updateActiveFiltersIndicator();\r\n  }\r\n\r\n  sortData(data) {\r\n    const { key, order } = this.sortState;\r\n    return [...data].sort((a, b) => {\r\n      let valA, valB;\r\n      if (key === 'date' || key === 'sortableDate') {\r\n        valA = a.sortableDate || Utils.parseDate(a.date);\r\n        valB = b.sortableDate || Utils.parseDate(b.date);\r\n      } else {\r\n        valA = (a[key] || '').toString().toLowerCase();\r\n        valB = (b[key] || '').toString().toLowerCase();\r\n      }\r\n      if (valA < valB) return order === 'asc' ? -1 : 1;\r\n      if (valA > valB) return order === 'asc' ? 1 : -1;\r\n      return 0;\r\n    });\r\n  }\r\n\r\n  getFilterValues() {\r\n    const values = {};\r\n    const filters = filterConfig[this.sectionKey] || [];\r\n    filters.forEach((filter) => {\r\n      if (filter.type === 'component') return;\r\n\r\n      const el = document.getElementById(filter.id);\r\n      if (el) {\r\n        values[filter.id] = el.type === 'checkbox' ? el.checked : el.value;\r\n      }\r\n    });\r\n    return values;\r\n  }\r\n\r\n  toggleSection() {\r\n    this.elements.wrapper?.classList.toggle('show');\r\n    this.elements.toggleBtn.textContent =\r\n      this.elements.wrapper.classList.contains('show')\r\n        ? 'Recolher'\r\n        : 'Expandir';\r\n  }\r\n\r\n  toggleMoreFilters() {\r\n    const shouldShow = !this.elements.moreFilters.classList.contains('show');\r\n    this.elements.moreFilters.classList.toggle('show', shouldShow);\r\n    this.elements.toggleMoreBtn.querySelector('.button-text').textContent =\r\n      shouldShow ? 'Menos filtros' : 'Mais filtros';\r\n    this.updateActiveFiltersIndicator();\r\n  }\r\n\r\n  clearFilters(shouldRender = true) {\r\n    const sectionLayout =\r\n      this.globalSettings.filterLayout[this.sectionKey] || [];\r\n    const layoutMap = new Map(sectionLayout.map((f) => [f.id, f]));\r\n\r\n    // --- INÍCIO DA CORREÇÃO ---\r\n    // Reseta o período de busca para o padrão global da seção\r\n    const dateRangeDefaults =\r\n      this.globalSettings.userPreferences.dateRangeDefaults;\r\n    const defaultRanges = {\r\n      consultations: { start: -6, end: 0 },\r\n      exams: { start: -6, end: 0 },\r\n      appointments: { start: -1, end: 3 },\r\n      regulations: { start: -12, end: 0 },\r\n      documents: { start: -24, end: 0 },\r\n    };\r\n    const range =\r\n      dateRangeDefaults[this.sectionKey] || defaultRanges[this.sectionKey];\r\n    if (this.elements.dateInitial)\r\n      this.elements.dateInitial.valueAsDate = Utils.calculateRelativeDate(\r\n        range.start\r\n      );\r\n    if (this.elements.dateFinal)\r\n      this.elements.dateFinal.valueAsDate = Utils.calculateRelativeDate(\r\n        range.end\r\n      );\r\n    // --- FIM DA CORREÇÃO ---\r\n\r\n    (filterConfig[this.sectionKey] || []).forEach((filter) => {\r\n      if (filter.type === 'component') return;\r\n\r\n      const el = document.getElementById(filter.id);\r\n      if (el) {\r\n        const savedFilterSettings = layoutMap.get(filter.id);\r\n        let defaultValue;\r\n\r\n        if (\r\n          savedFilterSettings &&\r\n          savedFilterSettings.defaultValue !== undefined\r\n        ) {\r\n          defaultValue = savedFilterSettings.defaultValue;\r\n        } else {\r\n          defaultValue =\r\n            filter.defaultChecked ??\r\n            (filter.options ? filter.options[0].value : '');\r\n        }\r\n\r\n        if (el.type === 'checkbox') {\r\n          el.checked = defaultValue;\r\n        } else {\r\n          el.value = defaultValue;\r\n        }\r\n\r\n        if (el.classList.contains('filter-select-group')) {\r\n          this.handleFetchTypeChange(el);\r\n        }\r\n      }\r\n    });\r\n    if (shouldRender) {\r\n      this.applyFiltersAndRender();\r\n    }\r\n  }\r\n\r\n  handleSort(sortKey) {\r\n    if (this.sortState.key === sortKey) {\r\n      this.sortState.order = this.sortState.order === 'asc' ? 'desc' : 'asc';\r\n    } else {\r\n      this.sortState.key = sortKey;\r\n      this.sortState.order = 'desc';\r\n    }\r\n    this.applyFiltersAndRender();\r\n  }\r\n\r\n  handleFetchTypeChange(element) {\r\n    this.fetchType = element.value || element.dataset.fetchType;\r\n    this.fetchData();\r\n  }\r\n\r\n  updateActiveFiltersIndicator() {\r\n    const indicator = this.elements.toggleMoreBtn?.querySelector(\r\n      'span:not(.button-text)'\r\n    );\r\n    if (!indicator || !this.elements.moreFilters) return;\r\n    const isShown = this.elements.moreFilters.classList.contains('show');\r\n    let activeCount = 0;\r\n    const filterElements =\r\n      this.elements.moreFilters.querySelectorAll('input, select');\r\n    filterElements.forEach((el) => {\r\n      if (\r\n        (el.type === 'select-one' || el.type === 'select') &&\r\n        el.value !== 'todos' &&\r\n        el.value !== 'todas' &&\r\n        el.value !== '' &&\r\n        el.value !== 'all'\r\n      )\r\n        activeCount++;\r\n      else if (el.type === 'text' && el.value.trim() !== '') activeCount++;\r\n      else if (el.type === 'checkbox' && el.checked) activeCount++;\r\n    });\r\n    if (activeCount > 0 && !isShown) {\r\n      indicator.textContent = activeCount;\r\n      indicator.classList.remove('hidden');\r\n    } else {\r\n      indicator.classList.add('hidden');\r\n    }\r\n  }\r\n\r\n  saveFilterSet() {\r\n    const name = window.prompt('Digite um nome para o conjunto de filtros:');\r\n    if (!name || name.trim() === '') {\r\n      Utils.showMessage('Nome inválido. O filtro não foi salvo.');\r\n      return;\r\n    }\r\n\r\n    const savedSets = store.getSavedFilterSets();\r\n    if (!savedSets[this.sectionKey]) {\r\n      savedSets[this.sectionKey] = [];\r\n    }\r\n    const existingIndex = savedSets[this.sectionKey].findIndex(\r\n      (set) => set.name === name\r\n    );\r\n    const filterValues = this.getFilterValues();\r\n    const newSet = { name, values: filterValues };\r\n    if (existingIndex > -1) {\r\n      savedSets[this.sectionKey][existingIndex] = newSet;\r\n    } else {\r\n      savedSets[this.sectionKey].push(newSet);\r\n    }\r\n    browser.storage.local.set({ savedFilterSets: savedSets });\r\n    store.setSavedFilterSets(savedSets);\r\n    Utils.showMessage(`Filtro \"${name}\" salvo com sucesso.`, 'success');\r\n  }\r\n\r\n  loadFilterSet() {\r\n    const select = document.getElementById(\r\n      `${this.prefix}-saved-filters-select`\r\n    );\r\n    const name = select.value;\r\n    if (!name) return;\r\n    const set = (store.getSavedFilterSets()[this.sectionKey] || []).find(\r\n      (s) => s.name === name\r\n    );\r\n    if (!set) return;\r\n    Object.entries(set.values).forEach(([id, value]) => {\r\n      const el = document.getElementById(id);\r\n      if (el) {\r\n        if (el.type === 'checkbox') el.checked = value;\r\n        else el.value = value;\r\n\r\n        if (el.classList.contains('filter-select-group')) {\r\n          this.handleFetchTypeChange(el);\r\n        }\r\n      }\r\n    });\r\n    this.applyFiltersAndRender();\r\n  }\r\n\r\n  deleteFilterSet() {\r\n    const select = document.getElementById(\r\n      `${this.prefix}-saved-filters-select`\r\n    );\r\n    const name = select.value;\r\n    if (!name) {\r\n      Utils.showMessage('Selecione um filtro para apagar.');\r\n      return;\r\n    }\r\n\r\n    const confirmation = window.confirm(\r\n      `Tem certeza que deseja apagar o filtro \"${name}\"?`\r\n    );\r\n    if (!confirmation) return;\r\n\r\n    const savedSets = store.getSavedFilterSets();\r\n    savedSets[this.sectionKey] = (savedSets[this.sectionKey] || []).filter(\r\n      (set) => set.name !== name\r\n    );\r\n    browser.storage.local.set({ savedFilterSets: savedSets });\r\n    store.setSavedFilterSets(savedSets);\r\n    Utils.showMessage(`Filtro \"${name}\" apagado.`, 'success');\r\n  }\r\n\r\n  populateSavedFilterDropdown() {\r\n    const select = document.getElementById(\r\n      `${this.prefix}-saved-filters-select`\r\n    );\r\n    if (!select) return;\r\n    const currentSelection = select.value;\r\n    select.innerHTML = '<option value=\"\">Carregar filtro...</option>';\r\n    const sets = store.getSavedFilterSets()[this.sectionKey] || [];\r\n    sets.forEach((set) => {\r\n      const option = document.createElement('option');\r\n      option.value = set.name;\r\n      option.textContent = set.name;\r\n      select.appendChild(option);\r\n    });\r\n    select.value = currentSelection;\r\n  }\r\n\r\n  renderFilterControls() {\r\n    try {\r\n      const sectionFilters = filterConfig[this.sectionKey] || [];\r\n      const sectionLayout =\r\n        this.globalSettings.filterLayout[this.sectionKey] || [];\r\n      const layoutMap = new Map(sectionLayout.map((f) => [f.id, f]));\r\n\r\n      const sortedItems = [...sectionFilters].sort((a, b) => {\r\n        const orderA = layoutMap.get(a.id)?.order ?? Infinity;\r\n        const orderB = layoutMap.get(b.id)?.order ?? Infinity;\r\n        return orderA - orderB;\r\n      });\r\n\r\n      if (this.elements.mainFilters) this.elements.mainFilters.innerHTML = '';\r\n      if (this.elements.moreFilters) this.elements.moreFilters.innerHTML = '';\r\n\r\n      sortedItems.forEach((item) => {\r\n        const location =\r\n          layoutMap.get(item.id)?.location || item.defaultLocation;\r\n        const container =\r\n          location === 'main'\r\n            ? this.elements.mainFilters\r\n            : this.elements.moreFilters;\r\n\r\n        if (container) {\r\n          let element;\r\n          if (item.type === 'component') {\r\n            element = this.createUiComponent(item.componentName);\r\n          } else {\r\n            element = this.createFilterElement(item);\r\n          }\r\n          if (element) {\r\n            container.appendChild(element);\r\n          }\r\n        }\r\n      });\r\n    } catch (e) {\r\n      console.error(`Erro ao renderizar filtros para ${this.sectionKey}:`, e);\r\n    }\r\n  }\r\n\r\n  createUiComponent(componentName) {\r\n    switch (componentName) {\r\n    case 'date-range':\r\n      return this.renderDateRangeComponent();\r\n    case 'saved-filters':\r\n      return this.renderSavedFiltersComponent();\r\n    default:\r\n      return null;\r\n    }\r\n  }\r\n\r\n  renderDateRangeComponent() {\r\n    const container = document.createElement('div');\r\n    container.className = 'grid grid-cols-2 gap-4 text-sm';\r\n    container.innerHTML = `\r\n        <div>\r\n            <label for=\"${this.prefix}-date-initial\" class=\"block font-medium\">Data Inicial</label>\r\n            <input type=\"date\" id=\"${this.prefix}-date-initial\" class=\"mt-1 w-full px-2 py-1 border border-slate-300 rounded-md\"/>\r\n        </div>\r\n        <div>\r\n            <label for=\"${this.prefix}-date-final\" class=\"block font-medium\">Data Final</label>\r\n            <input type=\"date\" id=\"${this.prefix}-date-final\" class=\"mt-1 w-full px-2 py-1 border border-slate-300 rounded-md\"/>\r\n        </div>\r\n      `;\r\n    this.elements.dateInitial = container.querySelector(\r\n      `#${this.prefix}-date-initial`\r\n    );\r\n    this.elements.dateFinal = container.querySelector(\r\n      `#${this.prefix}-date-final`\r\n    );\r\n    return container;\r\n  }\r\n\r\n  renderSavedFiltersComponent() {\r\n    const container = document.createElement('div');\r\n    container.className = 'mt-4 pt-4 border-t';\r\n    container.id = `${this.prefix}-saved-filters-container`;\r\n    container.innerHTML = `\r\n        <h3 class=\"text-sm font-semibold text-slate-600 mt-3 mb-2\">Filtros Salvos</h3>\r\n        <div class=\"flex items-center gap-2\">\r\n            <select id=\"${this.prefix}-saved-filters-select\" class=\"flex-grow w-full px-2 py-1 border border-slate-300 rounded-md bg-white text-sm\" title=\"Carregar um filtro salvo\">\r\n                <option value=\"\">Carregar filtro...</option>\r\n            </select>\r\n            <button id=\"${this.prefix}-save-filter-btn\" title=\"Salvar filtros atuais\" class=\"p-1.5 text-slate-500 hover:bg-blue-100 hover:text-blue-600 rounded\">\r\n                <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"16\" height=\"16\" fill=\"currentColor\" viewBox=\"0 0 16 16\"><path d=\"M2 1a1 1 0 0 0-1 1v12a1 1 0 0 0 1 1h12a1 1 0 0 0 1-1V2a1 1 0 0 0-1-1H9.5a1 1 0 0 0-1 1v4.5h2a.5.5 0 0 1 .354.854l-2.5 2.5a.5.5 0 0 1-.708 0l-2.5-2.5A.5.5 0 0 1 5.5 6.5h2V2a2 2 0 0 1 2-2H14a2 2 0 0 1 2 2v12a2 2 0 0 1-2 2H2a2 2 0 0 1-2-2V2a2 2 0 0 1 2-2h2.5a.5.5 0 0 1 0 1H2z\"/></svg>\r\n            </button>\r\n            <button id=\"${this.prefix}-delete-filter-btn\" title=\"Apagar filtro selecionado\" class=\"p-1.5 text-slate-500 hover:bg-red-100 hover:text-red-600 rounded\">\r\n                <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"16\" height=\"16\" fill=\"currentColor\" viewBox=\"0 0 16 16\"><path d=\"M5.5 5.5A.5.5 0 0 1 6 6v6a.5.5 0 0 1-1 0V6a.5.5 0 0 1 .5-.5zm2.5 0a.5.5 0 0 1 .5.5v6a.5.5 0 0 1-1 0V6a.5.5 0 0 1 .5-.5zm3 .5a.5.5 0 0 0-1 0v6a.5.5 0 0 0 1 0V6z\"/><path fill-rule=\"evenodd\" d=\"M14.5 3a1 1 0 0 1-1 1H13v9a2 2 0 0 1-2 2H5a2 2 0 0 1-2-2V4h-.5a1 1 0 0 1-1-1V2a1 1 0 0 1 1-1H6a1 1 0 0 1 1-1h2a1 1 0 0 1 1 1h3.5a1 1 0 0 1 1 1v1zM4.118 4 4 4.059V13a1 1 0 0 0 1 1h6a1 1 0 0 0 1-1V4.059L11.882 4H4.118zM2.5 3V2h11v1h-11z\"/></svg>\r\n            </button>\r\n        </div>\r\n      `;\r\n    this.elements.savedFiltersContainer = container;\r\n    this.populateSavedFilterDropdown();\r\n    return container;\r\n  }\r\n\r\n  createFilterElement(filter) {\r\n    const container = document.createElement('div');\r\n    let elementHtml = '';\r\n    if (filter.type !== 'checkbox') {\r\n      elementHtml += `<label for=\"${filter.id}\" class=\"block font-medium mb-1 text-sm\">${filter.label}</label>`;\r\n    }\r\n    switch (filter.type) {\r\n    case 'text':\r\n      elementHtml += `<input type=\"text\" id=\"${filter.id}\" placeholder=\"${\r\n        filter.placeholder || ''\r\n      }\" class=\"w-full px-2 py-1 border border-slate-300 rounded-md\">`;\r\n      break;\r\n    case 'select':\r\n    case 'selectGroup':\r\n      elementHtml += `<select id=\"${filter.id}\" class=\"w-full px-2 py-1 border border-slate-300 rounded-md bg-white\">`;\r\n\r\n      if (\r\n        filter.id === 'regulation-filter-priority' &&\r\n          this.globalSettings.regulationPriorities\r\n      ) {\r\n        elementHtml += '<option value=\"todas\">Todas</option>';\r\n        this.globalSettings.regulationPriorities.forEach((prio) => {\r\n          elementHtml += `<option value=\"${prio.coreDescricao}\">${prio.coreDescricao}</option>`;\r\n        });\r\n      } else {\r\n        (filter.options || []).forEach((opt) => {\r\n          elementHtml += `<option value=\"${opt.value}\">${opt.text}</option>`;\r\n        });\r\n      }\r\n      elementHtml += '</select>';\r\n      break;\r\n    case 'checkbox':\r\n      container.className = 'flex items-center';\r\n      elementHtml += `<input id=\"${filter.id}\" type=\"checkbox\" class=\"h-4 w-4 rounded border-gray-300 text-blue-600 focus:ring-blue-500\">\r\n                          <label for=\"${filter.id}\" class=\"ml-2 block text-sm text-slate-700\">${filter.label}</label>`;\r\n      break;\r\n    }\r\n    container.innerHTML = elementHtml;\r\n    return container;\r\n  }\r\n\r\n  applyAutomationFilters(filterSettings, ruleName) {\r\n    if (!filterSettings) return;\r\n\r\n    // --- INÍCIO DA CORREÇÃO ---\r\n    // Aplica o período de busca da regra, se definido\r\n    if (filterSettings.dateRange) {\r\n      const { start, end } = filterSettings.dateRange;\r\n      if (this.elements.dateInitial && start !== null && !isNaN(start)) {\r\n        this.elements.dateInitial.valueAsDate =\r\n          Utils.calculateRelativeDate(start);\r\n      }\r\n      if (this.elements.dateFinal && end !== null && !isNaN(end)) {\r\n        this.elements.dateFinal.valueAsDate = Utils.calculateRelativeDate(end);\r\n      }\r\n    }\r\n    // --- FIM DA CORREÇÃO ---\r\n\r\n    Object.entries(filterSettings).forEach(([filterId, value]) => {\r\n      // Pula a propriedade dateRange que já foi tratada\r\n      if (filterId === 'dateRange') return;\r\n\r\n      const el = document.getElementById(filterId);\r\n      if (el) {\r\n        if (el.type === 'checkbox') {\r\n          el.checked = value;\r\n        } else {\r\n          el.value = value;\r\n        }\r\n      }\r\n    });\r\n\r\n    this.fetchData();\r\n\r\n    if (this.elements.automationFeedback) {\r\n      this.elements.automationFeedback.innerHTML = `\r\n            <div class=\"flex justify-between items-center\">\r\n                <span>Filtro automático aplicado: <strong>${ruleName}</strong></span>\r\n                <button class=\"clear-automation-btn text-blue-800 hover:text-blue-900 font-bold\" title=\"Limpar filtro automático\">&times;</button>\r\n            </div>\r\n        `;\r\n      this.elements.automationFeedback.classList.remove('hidden');\r\n    }\r\n  }\r\n\r\n  clearAutomationFeedbackAndFilters(shouldRender = true) {\r\n    if (\r\n      this.elements.automationFeedback &&\r\n      !this.elements.automationFeedback.classList.contains('hidden')\r\n    ) {\r\n      this.elements.automationFeedback.classList.add('hidden');\r\n      this.elements.automationFeedback.innerHTML = '';\r\n      this.clearFilters(false);\r\n    }\r\n    if (shouldRender) {\r\n      this.applyFiltersAndRender();\r\n    }\r\n  }\r\n}\r\n","/**\r\n * @file Módulo TimelineManager, responsável por gerir a secção da Linha do Tempo.\r\n */\r\nimport * as API from './api.js';\r\nimport * as Utils from './utils.js';\r\nimport * as Renderers from './renderers.js';\r\nimport { store } from './store.js';\r\n\r\nexport class TimelineManager {\r\n  constructor(sectionKey, config, globalSettings) {\r\n    this.sectionKey = sectionKey;\r\n    this.config = config;\r\n    this.globalSettings = globalSettings;\r\n\r\n    this.allData = [];\r\n    this.currentPatient = null;\r\n    this.isLoading = false;\r\n\r\n    // State for automation filters\r\n    this.activeRuleFilters = null;\r\n    this.activeRuleName = null;\r\n    this.isFilteredView = false;\r\n\r\n    this.elements = {};\r\n    this.init();\r\n  }\r\n\r\n  init() {\r\n    this.cacheDomElements();\r\n    this.addEventListeners();\r\n    store.subscribe(() => this.onStateChange());\r\n  }\r\n\r\n  cacheDomElements() {\r\n    this.elements = {\r\n      section: document.getElementById('timeline-section'),\r\n      wrapper: document.getElementById('timeline-wrapper'),\r\n      content: document.getElementById('timeline-content'),\r\n      fetchBtn: document.getElementById('fetch-timeline-btn'),\r\n      toggleBtn: document.getElementById('toggle-timeline-list-btn'),\r\n      automationFeedback: document.getElementById(\r\n        'timeline-automation-feedback'\r\n      ),\r\n      dateInitial: document.getElementById('timeline-date-initial'),\r\n      dateFinal: document.getElementById('timeline-date-final'),\r\n      searchKeyword: document.getElementById('timeline-search-keyword'),\r\n    };\r\n  }\r\n\r\n  addEventListeners() {\r\n    this.elements.fetchBtn?.addEventListener('click', () => this.fetchData());\r\n    this.elements.toggleBtn?.addEventListener('click', () =>\r\n      this.toggleSection()\r\n    );\r\n\r\n    this.elements.searchKeyword?.addEventListener(\r\n      'input',\r\n      Utils.debounce(() => this.render(), 300)\r\n    );\r\n    this.elements.dateInitial?.addEventListener('change', () => this.render());\r\n    this.elements.dateFinal?.addEventListener('change', () => this.render());\r\n\r\n    this.elements.section?.addEventListener('click', (event) => {\r\n      const header = event.target.closest('.timeline-header');\r\n      if (header) {\r\n        const details = header.nextElementSibling;\r\n        if (details && details.classList.contains('timeline-details-body')) {\r\n          details.classList.toggle('show');\r\n        }\r\n        return;\r\n      }\r\n\r\n      const toggleDetailsBtn = event.target.closest('.timeline-toggle-details-btn');\r\n      if (toggleDetailsBtn) {\r\n        const timelineItem = toggleDetailsBtn.closest('.timeline-item');\r\n        const details = timelineItem?.querySelector('.timeline-details-body');\r\n        if (details) {\r\n          details.classList.toggle('show');\r\n        }\r\n        return;\r\n      }\r\n\r\n      const toggleFilterBtn = event.target.closest(\r\n        '#timeline-toggle-filter-btn'\r\n      );\r\n      if (toggleFilterBtn) {\r\n        this.toggleFilteredView();\r\n      }\r\n    });\r\n  }\r\n\r\n  onStateChange() {\r\n    const patientState = store.getPatient();\r\n    const newPatient = patientState ? patientState.ficha : null;\r\n\r\n    if (this.currentPatient?.isenPK?.idp !== newPatient?.isenPK?.idp) {\r\n      this.setPatient(newPatient);\r\n    }\r\n  }\r\n\r\n  setPatient(patient) {\r\n    this.currentPatient = patient;\r\n    this.allData = [];\r\n    this.clearAutomation();\r\n    this.elements.content.innerHTML = '';\r\n    if (this.elements.searchKeyword) {\r\n      this.elements.searchKeyword.value = '';\r\n    }\r\n    this.applyDefaultDateRange();\r\n\r\n    if (this.elements.section) {\r\n      this.elements.section.style.display = patient ? 'block' : 'none';\r\n    }\r\n  }\r\n\r\n  applyDefaultDateRange() {\r\n    const dateRangeDefaults =\r\n      this.globalSettings.userPreferences.dateRangeDefaults;\r\n    const range = dateRangeDefaults.timeline || { start: -12, end: 0 };\r\n\r\n    if (this.elements.dateInitial)\r\n      this.elements.dateInitial.valueAsDate = Utils.calculateRelativeDate(\r\n        range.start\r\n      );\r\n    if (this.elements.dateFinal)\r\n      this.elements.dateFinal.valueAsDate = Utils.calculateRelativeDate(\r\n        range.end\r\n      );\r\n  }\r\n\r\n  async fetchData() {\r\n    if (!this.currentPatient || this.isLoading) {\r\n      return;\r\n    }\r\n\r\n    this.isLoading = true;\r\n    Renderers.renderTimeline([], 'loading');\r\n\r\n    try {\r\n      const params = {\r\n        isenPK: `${this.currentPatient.isenPK.idp}-${this.currentPatient.isenPK.ids}`,\r\n        isenFullPKCrypto: this.currentPatient.isenFullPKCrypto,\r\n        dataInicial: '01/01/1900', // Busca sempre o histórico completo\r\n        dataFinal: new Date().toLocaleDateString('pt-BR'),\r\n      };\r\n\r\n      const apiData = await API.fetchAllTimelineData(params);\r\n      const normalizedData = Utils.normalizeTimelineData(apiData);\r\n\r\n      this.allData = normalizedData;\r\n      this.render();\r\n    } catch (error) {\r\n      console.error('Erro ao buscar dados para a Linha do Tempo:', error);\r\n      Renderers.renderTimeline([], 'error');\r\n    } finally {\r\n      this.isLoading = false;\r\n    }\r\n  }\r\n\r\n  getFilterValues() {\r\n    return {\r\n      startDate: this.elements.dateInitial?.value,\r\n      endDate: this.elements.dateFinal?.value,\r\n      keyword: Utils.normalizeString(this.elements.searchKeyword?.value || ''),\r\n    };\r\n  }\r\n\r\n  render() {\r\n    if (this.allData.length === 0 && !this.isLoading) {\r\n      Renderers.renderTimeline([], 'empty');\r\n      return;\r\n    }\r\n\r\n    let dataToRender = this.allData;\r\n    const filters = this.getFilterValues();\r\n\r\n    // Client-side filtering\r\n    if (filters.startDate) {\r\n      const startDate = new Date(filters.startDate);\r\n      dataToRender = dataToRender.filter(\r\n        (event) => event.sortableDate >= startDate\r\n      );\r\n    }\r\n    if (filters.endDate) {\r\n      const endDate = new Date(filters.endDate);\r\n      endDate.setHours(23, 59, 59, 999); // Garante que o dia final seja incluído\r\n      dataToRender = dataToRender.filter(\r\n        (event) => event.sortableDate <= endDate\r\n      );\r\n    }\r\n    if (filters.keyword) {\r\n      dataToRender = dataToRender.filter((event) =>\r\n        event.searchText.includes(filters.keyword)\r\n      );\r\n    }\r\n\r\n    // Automation rule filtering\r\n    if (this.isFilteredView && this.activeRuleFilters) {\r\n      dataToRender = Utils.filterTimelineEvents(\r\n        dataToRender,\r\n        this.activeRuleFilters\r\n      );\r\n    }\r\n\r\n    Renderers.renderTimeline(dataToRender, 'success');\r\n  }\r\n\r\n  toggleSection() {\r\n    this.elements.wrapper?.classList.toggle('show');\r\n    this.elements.toggleBtn.textContent =\r\n      this.elements.wrapper.classList.contains('show')\r\n        ? 'Recolher'\r\n        : 'Expandir';\r\n  }\r\n\r\n  applyAutomationFilters(filters, ruleName) {\r\n    this.activeRuleFilters = filters;\r\n    this.activeRuleName = ruleName;\r\n    this.isFilteredView = false;\r\n\r\n    if (this.elements.automationFeedback) {\r\n      this.elements.automationFeedback.innerHTML = `\r\n            <div class=\"flex justify-between items-center text-sm\">\r\n                <span>Regra '<strong>${ruleName}</strong>' ativa.</span>\r\n                <button id=\"timeline-toggle-filter-btn\" class=\"font-semibold text-blue-600 hover:underline\">\r\n                    Ver timeline focada\r\n                </button>\r\n            </div>\r\n        `;\r\n      this.elements.automationFeedback.classList.remove('hidden');\r\n    }\r\n\r\n    if (this.allData.length > 0) {\r\n      this.render();\r\n    }\r\n  }\r\n\r\n  clearAutomation() {\r\n    this.activeRuleFilters = null;\r\n    this.activeRuleName = null;\r\n    this.isFilteredView = false;\r\n    if (this.elements.automationFeedback) {\r\n      this.elements.automationFeedback.classList.add('hidden');\r\n      this.elements.automationFeedback.innerHTML = '';\r\n    }\r\n    if (this.allData.length > 0) {\r\n      this.render();\r\n    }\r\n  }\r\n\r\n  toggleFilteredView() {\r\n    this.isFilteredView = !this.isFilteredView;\r\n    const button = document.getElementById('timeline-toggle-filter-btn');\r\n    if (button) {\r\n      button.textContent = this.isFilteredView\r\n        ? 'Ver timeline completa'\r\n        : 'Ver timeline focada';\r\n    }\r\n    this.render();\r\n  }\r\n}\r\n","import './browser-polyfill.js';\r\n\r\nconst api = typeof browser !== 'undefined' ? browser : chrome;\r\n\r\n/**\r\n * Obtém a URL base do sistema a partir das configurações salvas pelo usuário.\r\n * @returns {Promise<string>} A URL base salva.\r\n */\r\nexport async function getBaseUrl() {\r\n  let data;\r\n  try {\r\n    data = await api.storage.sync.get('baseUrl');\r\n  } catch (e) {\r\n    console.error('Erro ao obter a URL base do storage:', e);\r\n    throw e;\r\n  }\r\n\r\n  if (data && data.baseUrl) {\r\n    return data.baseUrl;\r\n  }\r\n\r\n  console.error(\"URL base não configurada. Vá em 'Opções' para configurá-la.\");\r\n  throw new Error('URL_BASE_NOT_CONFIGURED');\r\n}\r\n\r\n/**\r\n * Lida com erros de fetch de forma centralizada.\r\n * @param {Response} response - O objeto de resposta do fetch.\r\n */\r\nfunction handleFetchError(response) {\r\n  console.error(\r\n    `Erro na requisição: ${response.status} ${response.statusText}`\r\n  );\r\n  throw new Error('Falha na comunicação com o servidor.');\r\n}\r\n\r\n/**\r\n * Extrai o texto de uma string HTML.\r\n * @param {string} htmlString - A string HTML.\r\n * @returns {string} O texto extraído.\r\n */\r\nfunction getTextFromHTML(htmlString) {\r\n  if (!htmlString) return '';\r\n  const parser = new DOMParser();\r\n  const doc = parser.parseFromString(htmlString, 'text/html');\r\n  return doc.body.textContent || '';\r\n}\r\n\r\n/**\r\n * Busca as configurações de prioridade de regulação do sistema.\r\n * @returns {Promise<Array<object>>} Uma lista de objetos de prioridade.\r\n */\r\nexport async function fetchRegulationPriorities() {\r\n  const baseUrl = await getBaseUrl();\r\n  const url = new URL(\r\n    `${baseUrl}/sigss/configuracaoGravidade/loadConfiguracaoRegra`\r\n  );\r\n\r\n  try {\r\n    const response = await fetch(url);\r\n    if (!response.ok) {\r\n      console.error('Não foi possível buscar as prioridades de regulação.');\r\n      return [];\r\n    }\r\n    const data = await response.json();\r\n    // Filtra apenas as ativas e ordena pela ordem de exibição definida no sistema\r\n    return data\r\n      .filter((p) => p.coreIsAtivo === 't')\r\n      .sort((a, b) => a.coreOrdemExibicao - b.coreOrdemExibicao);\r\n  } catch (error) {\r\n    console.error('Erro de rede ao buscar prioridades:', error);\r\n    return []; // Retorna lista vazia em caso de falha de rede\r\n  }\r\n}\r\n\r\n/**\r\n * Busca os detalhes completos de uma regulação específica.\r\n * @param {object} params\r\n * @param {string} params.reguIdp - O IDP da regulação.\r\n * @param {string} params.reguIds - O IDS da regulação.\r\n * @returns {Promise<object>} O objeto com os dados da regulação.\r\n */\r\nexport async function fetchRegulationDetails({ reguIdp, reguIds }) {\r\n  if (!reguIdp || !reguIds) {\r\n    throw new Error('IDs da regulação são necessários.');\r\n  }\r\n  const baseUrl = await getBaseUrl();\r\n  // Este é o endpoint que vimos no arquivo HAR.\r\n  const url = new URL(\r\n    `${baseUrl}/sigss/regulacaoControleSolicitacao/visualiza`\r\n  );\r\n  url.search = new URLSearchParams({\r\n    'reguPK.idp': reguIdp,\r\n    'reguPK.ids': reguIds,\r\n  }).toString();\r\n\r\n  const response = await fetch(url, {\r\n    method: 'GET',\r\n    headers: {\r\n      Accept: 'application/json, text/javascript, */*; q=0.01',\r\n      'X-Requested-With': 'XMLHttpRequest',\r\n    },\r\n  });\r\n\r\n  if (!response.ok) {\r\n    handleFetchError(response);\r\n    return null;\r\n  }\r\n\r\n  const contentType = response.headers.get('content-type');\r\n  if (contentType && contentType.includes('application/json')) {\r\n    const data = await response.json();\r\n    // O objeto de dados está aninhado sob a chave \"regulacao\"\r\n    return data.regulacao || null;\r\n  } else {\r\n    throw new Error(\r\n      'A resposta do servidor não foi JSON. A sessão pode ter expirado.'\r\n    );\r\n  }\r\n}\r\n\r\nfunction parseConsultasHTML(htmlString) {\r\n  const parser = new DOMParser();\r\n  const doc = parser.parseFromString(htmlString, 'text/html');\r\n  const rows = Array.from(doc.querySelectorAll('tbody > tr'));\r\n  const consultations = [];\r\n  const getFormattedText = (element) => {\r\n    if (!element) return '';\r\n    const clone = element.cloneNode(true);\r\n    clone\r\n      .querySelectorAll('br')\r\n      .forEach((br) =>\r\n        br.parentNode.replaceChild(document.createTextNode('\\n'), br)\r\n      );\r\n    return clone.textContent || '';\r\n  };\r\n  const parseDateForSorting = (dateString) => {\r\n    const datePart = (\r\n      dateString.split('\\n').find((p) => p.startsWith('At')) || dateString\r\n    )\r\n      .replace('At', '')\r\n      .trim();\r\n    const match = datePart.match(\r\n      /(\\d{2})\\/(\\d{2})\\/(\\d{4})(?: (\\d{2}):(\\d{2}):(\\d{2}))?/\r\n    );\r\n    if (!match) return null;\r\n    const [, day, month, year, hour = 0, minute = 0, second = 0] = match;\r\n    return new Date(year, month - 1, day, hour, minute, second);\r\n  };\r\n  let i = 0;\r\n  while (i < rows.length) {\r\n    const mainRow = rows[i];\r\n    const mainCells = mainRow.querySelectorAll('td');\r\n    if (mainCells.length < 5 || !mainCells[0].className.includes('width10')) {\r\n      i++;\r\n      continue;\r\n    }\r\n    const dateText = mainCells[1].textContent.trim().replace(/\\s+/g, ' ');\r\n    const consultation = {\r\n      priority: mainCells[0].textContent.trim(),\r\n      date: dateText.replace('At', '\\nAt'),\r\n      sortableDate: parseDateForSorting(dateText),\r\n      unit: mainCells[2].textContent.trim(),\r\n      specialty: mainCells[3].textContent.trim(),\r\n      professional: mainCells[4].textContent\r\n        .trim()\r\n        .replace(/Insc\\.: \\d+/, '')\r\n        .trim(),\r\n      details: [],\r\n      isNoShow: mainRow.textContent.includes('FALTOU A CONSULTA'),\r\n    };\r\n    let endIndex = rows.findIndex(\r\n      (row, index) =>\r\n        index > i &&\r\n        row.querySelectorAll('td').length > 5 &&\r\n        row.querySelectorAll('td')[0].className.includes('width10')\r\n    );\r\n    if (endIndex === -1) endIndex = rows.length;\r\n    const blockRows = rows.slice(i + 1, endIndex);\r\n    const isSoapNote = blockRows.some((row) =>\r\n      row.textContent.includes('SOAP -')\r\n    );\r\n    if (isSoapNote) {\r\n      const soapSections = ['SUBJETIVO', 'OBJETIVO', 'AVALIAÇÃO', 'PLANO'];\r\n      soapSections.forEach((sectionName) => {\r\n        const headerRowIndex = blockRows.findIndex((row) =>\r\n          row.textContent.includes(`SOAP - ${sectionName}`)\r\n        );\r\n        if (headerRowIndex === -1) return;\r\n        let content = '',\r\n          ciapCid = '',\r\n          obsNota = '';\r\n        const contentEndIndex = blockRows.findIndex(\r\n          (row, index) =>\r\n            index > headerRowIndex && row.textContent.includes('SOAP -')\r\n        );\r\n        const sectionRows = blockRows.slice(\r\n          headerRowIndex + 1,\r\n          contentEndIndex !== -1 ? contentEndIndex : blockRows.length\r\n        );\r\n        sectionRows.forEach((row) => {\r\n          const diagCell = Array.from(row.querySelectorAll('td')).find(\r\n            (cell) =>\r\n              cell.textContent.includes('CID -') ||\r\n              cell.textContent.includes('CIAP -')\r\n          );\r\n          if (diagCell) {\r\n            ciapCid = diagCell.textContent.trim();\r\n            if (diagCell.nextElementSibling)\r\n              ciapCid += ` - ${diagCell.nextElementSibling.textContent.trim()}`;\r\n          }\r\n          const descDiv = row.querySelector('.divHpdnObs');\r\n          if (descDiv) content += getFormattedText(descDiv);\r\n          const obsCell = Array.from(row.querySelectorAll('td')).find((cell) =>\r\n            cell.textContent.trim().startsWith('OBS./NOTA:')\r\n          );\r\n          if (obsCell)\r\n            obsNota = obsCell.textContent.replace('OBS./NOTA:', '').trim();\r\n        });\r\n        let finalValue = '';\r\n        if (ciapCid) finalValue += ciapCid.trim();\r\n        if (obsNota)\r\n          finalValue += (finalValue ? '\\n' : '') + `Obs.: ${obsNota.trim()}`;\r\n        if (content)\r\n          finalValue +=\r\n            (finalValue ? '\\n' : '') + `Descrição: ${content.trim()}`;\r\n        if (finalValue.trim())\r\n          consultation.details.push({ label: sectionName, value: finalValue });\r\n      });\r\n    } else {\r\n      blockRows.forEach((row) => {\r\n        const cidCell = Array.from(row.querySelectorAll('td')).find((cell) =>\r\n          cell.textContent.includes('CID -')\r\n        );\r\n        if (cidCell) {\r\n          const descCell = cidCell.nextElementSibling;\r\n          if (descCell)\r\n            consultation.details.push({\r\n              label: 'Hipótese Diagnóstica',\r\n              value: `${cidCell.textContent.trim()} - ${descCell.textContent.trim()}`,\r\n            });\r\n        }\r\n        const rowText = row.textContent.trim();\r\n        if (rowText.includes('DESCRIÇÃO DA CONSULTA')) {\r\n          const nextRow = row.nextElementSibling;\r\n          const descDiv = nextRow?.querySelector('.divHpdnObs');\r\n          if (descDiv)\r\n            consultation.details.push({\r\n              label: 'Descrição da Consulta',\r\n              value: getFormattedText(descDiv).trim(),\r\n            });\r\n        }\r\n        if (rowText.includes('OBSERVAÇÃO DE ENFERMAGEM:')) {\r\n          const obsCell = row.querySelector('td[colspan]');\r\n          if (obsCell)\r\n            consultation.details.push({\r\n              label: 'Observação de Enfermagem',\r\n              value: getFormattedText(obsCell)\r\n                .replace('OBSERVAÇÃO DE ENFERMAGEM:', '')\r\n                .trim(),\r\n            });\r\n        }\r\n      });\r\n    }\r\n    consultations.push(consultation);\r\n    i = endIndex;\r\n  }\r\n  return consultations;\r\n}\r\n\r\nexport async function searchPatients(term) {\r\n  if (!term || term.length < 1) return [];\r\n  const baseUrl = await getBaseUrl();\r\n  const url = new URL(`${baseUrl}/sigss/usuarioServico/busca`);\r\n  url.search = new URLSearchParams({ searchString: term });\r\n  const response = await fetch(url, {\r\n    headers: {\r\n      Accept: 'application/json, text/javascript, */*; q=0.01',\r\n      'X-Requested-With': 'XMLHttpRequest',\r\n    },\r\n  });\r\n  if (!response.ok) handleFetchError(response);\r\n  const data = await response.json();\r\n  return Array.isArray(data)\r\n    ? data.map((p) => ({\r\n      idp: p[0],\r\n      ids: p[1],\r\n      value: p[5],\r\n      cns: p[6],\r\n      dataNascimento: p[7],\r\n      cpf: p[15],\r\n    }))\r\n    : [];\r\n}\r\n\r\nexport async function fetchVisualizaUsuario({ idp, ids }) {\r\n  if (!idp || !ids)\r\n    throw new Error(`ID inválido. idp: '${idp}', ids: '${ids}'.`);\r\n  const baseUrl = await getBaseUrl();\r\n  const url = `${baseUrl}/sigss/usuarioServico/visualiza`;\r\n  const body = `isenPK.idp=${encodeURIComponent(\r\n    idp\r\n  )}&isenPK.ids=${encodeURIComponent(ids)}`;\r\n  const response = await fetch(url, {\r\n    method: 'POST',\r\n    headers: {\r\n      'Content-Type': 'application/x-www-form-urlencoded; charset=UTF-8',\r\n      'X-Requested-With': 'XMLHttpRequest',\r\n      Accept: 'application/json, text/javascript, */*; q=0.01',\r\n    },\r\n    body,\r\n  });\r\n  if (!response.ok) handleFetchError(response);\r\n\r\n  const contentType = response.headers.get('content-type');\r\n  if (contentType && contentType.indexOf('application/json') !== -1) {\r\n    const patientData = await response.json();\r\n    return patientData?.usuarioServico || {};\r\n  } else {\r\n    console.error(\r\n      'A resposta do servidor não foi JSON. Provável expiração de sessão.'\r\n    );\r\n    throw new Error(\r\n      'A sessão pode ter expirado. Por favor, faça login no sistema novamente.'\r\n    );\r\n  }\r\n}\r\n\r\nexport async function fetchProntuarioHash({\r\n  isenFullPKCrypto,\r\n  dataInicial,\r\n  dataFinal,\r\n}) {\r\n  const baseUrl = await getBaseUrl();\r\n  const url = `${baseUrl}/sigss/common/queryStrToParamHash`;\r\n  const rawParamString = `isenFullPKCrypto=${isenFullPKCrypto}&moip_idp=4&moip_ids=1&dataInicial=${dataInicial}&dataFinal=${dataFinal}&ppdc=t&consulta_basica=t&obs_enfermagem=t&encaminhamento=t&consulta_especializada=t&consulta_odonto=t&exame_solicitado=t&exame=t&triagem=t&procedimento=t&vacina=t&proc_odonto=t&medicamento_receitado=t&demais_orientacoes=t&medicamento_retirado=t&aih=t&acs=t&lista_espera=t&beneficio=f&internacao=t&apac=t&procedimento_coletivo=t&justificativa=&responsavelNome=&responsavelCPF=&isOdonto=t&isSoOdonto=f`;\r\n  const response = await fetch(url, {\r\n    method: 'POST',\r\n    headers: {\r\n      'Content-Type': 'application/x-www-form-urlencoded; charset=UTF-8',\r\n    },\r\n    body: `paramString=${encodeURIComponent(rawParamString)}`,\r\n  });\r\n  if (!response.ok)\r\n    throw new Error('Não foi possível gerar o passe de acesso.');\r\n  const data = await response.json();\r\n  if (data?.string) return data.string;\r\n  throw new Error(data.mensagem || 'Resposta não continha o hash.');\r\n}\r\n\r\nexport async function fetchConsultasEspecializadas({\r\n  isenFullPKCrypto,\r\n  dataInicial,\r\n  dataFinal,\r\n}) {\r\n  if (!isenFullPKCrypto) throw new Error('ID criptografado necessário.');\r\n  const baseUrl = await getBaseUrl();\r\n  const url = new URL(\r\n    `${baseUrl}/sigss/prontuarioAmbulatorial2/buscaDadosConsultaEspecializadas_HTML`\r\n  );\r\n  url.search = new URLSearchParams({\r\n    isenFullPKCrypto,\r\n    dataInicial,\r\n    dataFinal,\r\n  });\r\n  const response = await fetch(url, {\r\n    headers: {\r\n      Accept: 'application/json, text/javascript, */*; q=0.01',\r\n      'X-Requested-With': 'XMLHttpRequest',\r\n    },\r\n  });\r\n  if (!response.ok) handleFetchError(response);\r\n  const data = await response.json();\r\n  return {\r\n    htmlData: data?.tabela || '',\r\n    jsonData: parseConsultasHTML(data?.tabela || ''),\r\n  };\r\n}\r\n\r\nexport async function fetchConsultasBasicas({\r\n  isenFullPKCrypto,\r\n  dataInicial,\r\n  dataFinal,\r\n}) {\r\n  if (!isenFullPKCrypto) throw new Error('ID criptografado necessário.');\r\n  const baseUrl = await getBaseUrl();\r\n  const url = new URL(\r\n    `${baseUrl}/sigss/prontuarioAmbulatorial2/buscaDadosConsulta_HTML`\r\n  );\r\n  url.search = new URLSearchParams({\r\n    isenFullPKCrypto,\r\n    dataInicial,\r\n    dataFinal,\r\n  });\r\n  const response = await fetch(url, {\r\n    headers: {\r\n      Accept: 'application/json, text/javascript, */*; q=0.01',\r\n      'X-Requested-With': 'XMLHttpRequest',\r\n    },\r\n  });\r\n  if (!response.ok) handleFetchError(response);\r\n  const data = await response.json();\r\n  return {\r\n    htmlData: data?.tabela || '',\r\n    jsonData: parseConsultasHTML(data?.tabela || ''),\r\n  };\r\n}\r\n\r\nexport async function fetchAllConsultations({\r\n  isenFullPKCrypto,\r\n  dataInicial,\r\n  dataFinal,\r\n}) {\r\n  const [basicasResult, especializadasResult] = await Promise.all([\r\n    fetchConsultasBasicas({ isenFullPKCrypto, dataInicial, dataFinal }),\r\n    fetchConsultasEspecializadas({ isenFullPKCrypto, dataInicial, dataFinal }),\r\n  ]);\r\n  const combinedJsonData = [\r\n    ...basicasResult.jsonData,\r\n    ...especializadasResult.jsonData,\r\n  ];\r\n  const combinedHtmlData = `<h3>Consultas Básicas</h3>${basicasResult.htmlData}<h3>Consultas Especializadas</h3>${especializadasResult.htmlData}`;\r\n  return { jsonData: combinedJsonData, htmlData: combinedHtmlData };\r\n}\r\n\r\nexport async function fetchExamesSolicitados({\r\n  isenPK,\r\n  dataInicial,\r\n  dataFinal,\r\n  comResultado,\r\n  semResultado,\r\n}) {\r\n  if (!isenPK) throw new Error('ID (isenPK) do paciente é necessário.');\r\n  const baseUrl = await getBaseUrl();\r\n  const url = new URL(`${baseUrl}/sigss/exameRequisitado/findAllReex`);\r\n  const params = {\r\n    'filters[0]': `dataInicial:${dataInicial}`,\r\n    'filters[1]': `dataFinal:${dataFinal}`,\r\n    'filters[2]': `isenPK:${isenPK}`,\r\n    exameSolicitadoMin: 'true',\r\n    exameSolicitadoOutro: 'true',\r\n    exameComResultado: comResultado,\r\n    exameSemResultado: semResultado,\r\n    tipoBusca: 'reex',\r\n    _search: 'false',\r\n    nd: Date.now(),\r\n    rows: '1000',\r\n    page: '1',\r\n    sidx: 'reex.reexData',\r\n    sord: 'asc',\r\n  };\r\n  url.search = new URLSearchParams(params).toString();\r\n  const response = await fetch(url, {\r\n    headers: {\r\n      Accept: 'application/json, text/javascript, */*; q=0.01',\r\n      'X-Requested-With': 'XMLHttpRequest',\r\n    },\r\n  });\r\n  if (!response.ok) handleFetchError(response);\r\n  const data = await response.json();\r\n  return (data?.rows || []).map((row) => {\r\n    const cell = row.cell || [];\r\n    return {\r\n      id: row.id || '',\r\n      date: cell[2] || '',\r\n      examName: (cell[5] || '').trim(),\r\n      hasResult: (cell[6] || '') === 'SIM',\r\n      professional: cell[8] || '',\r\n      specialty: cell[9] || '',\r\n      resultIdp: cell[13] != null ? String(cell[13]) : '',\r\n      resultIds: cell[14] != null ? String(cell[14]) : '',\r\n    };\r\n  });\r\n}\r\n\r\nexport async function fetchResultadoExame({ idp, ids }) {\r\n  if (!idp || !ids)\r\n    throw new Error('IDs do resultado do exame são necessários.');\r\n  const baseUrl = await getBaseUrl();\r\n  const url = new URL(`${baseUrl}/sigss/resultadoExame/visualizaImagem`);\r\n  url.search = new URLSearchParams({\r\n    'iterPK.idp': idp,\r\n    'iterPK.ids': ids,\r\n  }).toString();\r\n  const response = await fetch(url, {\r\n    headers: {\r\n      Accept: 'application/json, text/javascript, */*; q=0.01',\r\n      'X-Requested-With': 'XMLHttpRequest',\r\n    },\r\n  });\r\n  if (!response.ok) handleFetchError(response);\r\n  const data = await response.json();\r\n  return data?.path || null;\r\n}\r\n\r\nexport async function fetchCadsusData({ cpf, cns }) {\r\n  if (!cpf && !cns) {\r\n    return null;\r\n  }\r\n\r\n  const baseUrl = await getBaseUrl();\r\n  const url = new URL(\r\n    `${baseUrl}/sigss/usuarioServicoConsultaPDQ/consultarPaciente`\r\n  );\r\n\r\n  const params = new URLSearchParams({\r\n    _search: 'false',\r\n    rows: '50',\r\n    page: '1',\r\n    sidx: 'nome',\r\n    sord: 'asc',\r\n    'pdq.cartaoNacionalSus': '',\r\n    'pdq.cpf': '',\r\n    'pdq.rg': '',\r\n    'pdq.nome': '',\r\n    'pdq.dataNascimento': '',\r\n    'pdq.sexo': '',\r\n    'pdq.nomeMae': '',\r\n  });\r\n\r\n  if (cpf) {\r\n    const formattedCpf = String(cpf)\r\n      .replace(/\\D/g, '')\r\n      .replace(/(\\d{3})(\\d{3})(\\d{3})(\\d{2})/, '$1.$2.$3-$4');\r\n    params.set('pdq.cpf', formattedCpf);\r\n  } else if (cns) {\r\n    params.set('pdq.cartaoNacionalSus', cns);\r\n  }\r\n\r\n  url.search = params.toString();\r\n\r\n  const response = await fetch(url, {\r\n    headers: {\r\n      Accept: 'application/json, text/javascript, */*; q=0.01',\r\n      'X-Requested-With': 'XMLHttpRequest',\r\n    },\r\n  });\r\n\r\n  if (!response.ok) {\r\n    console.warn(`A busca no CADSUS falhou com status ${response.status}.`);\r\n    return null;\r\n  }\r\n\r\n  const data = await response.json();\r\n\r\n  if (data && data.rows && data.rows.length > 0) {\r\n    return data.rows[0].cell;\r\n  }\r\n\r\n  return null;\r\n}\r\n\r\nexport async function fetchAppointmentDetails({ idp, ids }) {\r\n  if (!idp || !ids) throw new Error('ID do agendamento é necessário.');\r\n  const baseUrl = await getBaseUrl();\r\n  const url = new URL(`${baseUrl}/sigss/agendamentoConsulta/visualiza`);\r\n  url.search = new URLSearchParams({\r\n    'agcoPK.idp': idp,\r\n    'agcoPK.ids': ids,\r\n  }).toString();\r\n\r\n  const response = await fetch(url, {\r\n    headers: {\r\n      Accept: 'application/json, text/javascript, */*; q=0.01',\r\n      'X-Requested-With': 'XMLHttpRequest',\r\n    },\r\n  });\r\n\r\n  if (!response.ok) {\r\n    console.error(`Falha ao buscar detalhes do agendamento ${idp}-${ids}`);\r\n    return null;\r\n  }\r\n  const data = await response.json();\r\n  return data?.agendamentoConsulta || null;\r\n}\r\n\r\n/**\r\n * NEW: Busca os detalhes de um agendamento de exame.\r\n * @param {object} params\r\n * @param {string} params.idp - O IDP do agendamento de exame.\r\n * @param {string} params.ids - O IDS do agendamento de exame.\r\n * @returns {Promise<object>} O objeto com os dados do agendamento de exame.\r\n */\r\nexport async function fetchExamAppointmentDetails({ idp, ids }) {\r\n  if (!idp || !ids) throw new Error('ID do agendamento de exame é necessário.');\r\n  const baseUrl = await getBaseUrl();\r\n  const url = new URL(`${baseUrl}/sigss/agendamentoExame/visualizar`);\r\n  url.search = new URLSearchParams({\r\n    'examPK.idp': idp,\r\n    'examPK.ids': ids,\r\n  }).toString();\r\n\r\n  const response = await fetch(url, {\r\n    headers: {\r\n      Accept: 'application/json, text/javascript, */*; q=0.01',\r\n      'X-Requested-With': 'XMLHttpRequest',\r\n    },\r\n  });\r\n\r\n  if (!response.ok) {\r\n    handleFetchError(response);\r\n    return null;\r\n  }\r\n  const data = await response.json();\r\n  return data?.agendamentoExame || null;\r\n}\r\n\r\nexport async function fetchAppointments({ isenPK, dataInicial, dataFinal }) {\r\n  if (!isenPK) throw new Error('ID (isenPK) do paciente é necessário.');\r\n  const baseUrl = await getBaseUrl();\r\n  const url = new URL(`${baseUrl}/sigss/resumoCompromisso/lista`);\r\n  const params = {\r\n    isenPK,\r\n    dataInicial,\r\n    dataFinal,\r\n    _search: 'false',\r\n    nd: Date.now(),\r\n    rows: '1000',\r\n    page: '1',\r\n    sidx: 'data',\r\n    sord: 'desc',\r\n  };\r\n  url.search = new URLSearchParams(params).toString();\r\n\r\n  const response = await fetch(url, {\r\n    headers: {\r\n      Accept: 'application/json, text/javascript, */*; q=0.01',\r\n      'X-Requested-With': 'XMLHttpRequest',\r\n    },\r\n  });\r\n\r\n  if (!response.ok) handleFetchError(response);\r\n  const data = await response.json();\r\n\r\n  const basicAppointments = (data?.rows || []).map((row) => {\r\n    const cell = row.cell || [];\r\n    let status = 'AGENDADO';\r\n    if (String(cell[10]).includes('red')) status = 'FALTOU';\r\n    else if (String(cell[7]).includes('blue')) status = 'PRESENTE';\r\n    else if (String(cell[8]).includes('red')) status = 'CANCELADO';\r\n    else if (String(cell[11]).includes('blue')) status = 'ATENDIDO';\r\n\r\n    return {\r\n      id: row.id || '',\r\n      type: cell[1] || 'N/A',\r\n      date: cell[2] || '',\r\n      time: cell[3] || '',\r\n      location: cell[4] || '',\r\n      professional: cell[5] || '',\r\n      description: (cell[6] || '').trim(),\r\n      status: status,\r\n    };\r\n  });\r\n\r\n  const enrichedAppointments = [];\r\n  const batchSize = 10;\r\n\r\n  for (let i = 0; i < basicAppointments.length; i += batchSize) {\r\n    const batch = basicAppointments.slice(i, i + batchSize);\r\n\r\n    const promises = batch.map(async (appt) => {\r\n      if (appt.type.toUpperCase().includes('EXAME')) {\r\n        return {\r\n          ...appt,\r\n          specialty: appt.description || 'Exame sem descrição',\r\n        };\r\n      }\r\n\r\n      const [idp, ids] = appt.id.split('-');\r\n      if (!idp || !ids) return appt;\r\n\r\n      try {\r\n        const details = await fetchAppointmentDetails({ idp, ids });\r\n        if (details) {\r\n          let specialtyString = 'Sem especialidade';\r\n          const apcn = details.atividadeProfissionalCnes;\r\n\r\n          if (apcn && apcn.apcnNome) {\r\n            specialtyString = apcn.apcnCod\r\n              ? `${apcn.apcnNome} (${apcn.apcnCod})`\r\n              : apcn.apcnNome;\r\n          }\r\n\r\n          return {\r\n            ...appt,\r\n            isSpecialized: details.agcoIsEspecializada === 't',\r\n            isOdonto: details.agcoIsOdonto === 't',\r\n            specialty: specialtyString,\r\n          };\r\n        }\r\n      } catch (error) {\r\n        console.warn(\r\n          `Falha ao buscar detalhes para o agendamento ${appt.id}`,\r\n          error\r\n        );\r\n      }\r\n      return appt;\r\n    });\r\n\r\n    const settledBatch = await Promise.all(promises);\r\n    enrichedAppointments.push(...settledBatch);\r\n  }\r\n\r\n  return enrichedAppointments;\r\n}\r\n\r\nasync function fetchRegulations({\r\n  isenPK,\r\n  modalidade,\r\n  dataInicial,\r\n  dataFinal,\r\n}) {\r\n  if (!isenPK) throw new Error('ID (isenPK) do paciente é necessário.');\r\n  const baseUrl = await getBaseUrl();\r\n  const url = new URL(`${baseUrl}/sigss/regulacaoRegulador/lista`);\r\n\r\n  const params = {\r\n    'filters[0]': `isFiltrarData:${!!dataInicial}`,\r\n    'filters[1]': `dataInicial:${dataInicial || ''}`,\r\n    'filters[2]': `dataFinal:${dataFinal || ''}`,\r\n    'filters[3]': `modalidade:${modalidade}`,\r\n    'filters[4]': 'solicitante:undefined',\r\n    'filters[5]': `usuarioServico:${isenPK}`,\r\n    'filters[6]': 'autorizado:true',\r\n    'filters[7]': 'pendente:true',\r\n    'filters[8]': 'devolvido:true',\r\n    'filters[9]': 'negado:true',\r\n    'filters[10]': 'emAnalise:true',\r\n    'filters[11]': 'cancelados:true',\r\n    'filters[12]': 'cboFiltro:',\r\n    'filters[13]': 'procedimentoFiltro:',\r\n    'filters[14]': 'reguGravidade:',\r\n    'filters[15]': 'reguIsRetorno:...',\r\n    'filters[16]': 'codBarProtocolo:',\r\n    'filters[17]': 'reguIsAgendadoFiltro:todos',\r\n    _search: 'false',\r\n    nd: Date.now(),\r\n    rows: '1000',\r\n    page: '1',\r\n    sidx: 'regu.reguDataPrevista',\r\n    sord: 'desc',\r\n  };\r\n\r\n  url.search = new URLSearchParams(params).toString();\r\n\r\n  const response = await fetch(url, {\r\n    headers: {\r\n      Accept: 'application/json, text/javascript, */*; q=0.01',\r\n      'X-Requested-With': 'XMLHttpRequest',\r\n    },\r\n  });\r\n\r\n  if (!response.ok) handleFetchError(response);\r\n  const data = await response.json();\r\n\r\n  return (data?.rows || []).map((row) => {\r\n    const cell = row.cell || [];\r\n    let idp = null,\r\n      ids = null;\r\n    const idMatch = (row.id || '').match(/reguPK(\\d+)-(\\d+)/);\r\n    if (idMatch && idMatch.length === 3) {\r\n      idp = idMatch[1];\r\n      ids = idMatch[2];\r\n    }\r\n\r\n    const descriptionHtml = cell[6] || '';\r\n    const [procedure, cid] = descriptionHtml.split('<br/>');\r\n\r\n    return {\r\n      id: row.id,\r\n      idp,\r\n      ids,\r\n      type: cell[2] || 'N/A',\r\n      priority: getTextFromHTML(cell[3]),\r\n      date: cell[4] || '',\r\n      status: getTextFromHTML(cell[5]),\r\n      procedure: getTextFromHTML(procedure),\r\n      cid: cid ? cid.trim() : '',\r\n      requester: cell[7] || '',\r\n      provider: cell[8] || '',\r\n      isenFullPKCrypto: cell[9] || '',\r\n    };\r\n  });\r\n}\r\n\r\nexport async function fetchAllRegulations({\r\n  isenPK,\r\n  dataInicial,\r\n  dataFinal,\r\n  type = 'all',\r\n}) {\r\n  let regulationsToFetch = [];\r\n\r\n  if (type === 'all') {\r\n    regulationsToFetch = await Promise.all([\r\n      fetchRegulations({ isenPK, modalidade: 'ENC', dataInicial, dataFinal }),\r\n      fetchRegulations({ isenPK, modalidade: 'EXA', dataInicial, dataFinal }),\r\n    ]);\r\n  } else if (type === 'ENC') {\r\n    regulationsToFetch = [\r\n      await fetchRegulations({\r\n        isenPK,\r\n        modalidade: 'ENC',\r\n        dataInicial,\r\n        dataFinal,\r\n      }),\r\n    ];\r\n  } else if (type === 'EXA') {\r\n    regulationsToFetch = [\r\n      await fetchRegulations({\r\n        isenPK,\r\n        modalidade: 'EXA',\r\n        dataInicial,\r\n        dataFinal,\r\n      }),\r\n    ];\r\n  }\r\n\r\n  const allRegulations = regulationsToFetch.flat();\r\n\r\n  const regulationsWithAttachments = await Promise.all(\r\n    allRegulations.map(async (regulation) => {\r\n      if (regulation.idp && regulation.ids) {\r\n        try {\r\n          // CORREÇÃO: Usa o ID da própria regulação como o isenPK para esta chamada específica.\r\n          const attachmentIsenPk = `${regulation.idp}-${regulation.ids}`;\r\n          const attachments = await fetchRegulationAttachments({\r\n            reguIdp: regulation.idp,\r\n            reguIds: regulation.ids,\r\n            isenPK: attachmentIsenPk,\r\n          });\r\n          return { ...regulation, attachments };\r\n        } catch (error) {\r\n          console.warn(\r\n            `Falha ao buscar anexos para regulação ${regulation.id}:`,\r\n            error\r\n          );\r\n          return { ...regulation, attachments: [] };\r\n        }\r\n      }\r\n      return { ...regulation, attachments: [] };\r\n    })\r\n  );\r\n\r\n  regulationsWithAttachments.sort((a, b) => {\r\n    const dateA = a.date.split('/').reverse().join('-');\r\n    const dateB = b.date.split('/').reverse().join('-');\r\n    return new Date(dateB) - new Date(dateA);\r\n  });\r\n\r\n  return regulationsWithAttachments;\r\n}\r\n\r\n/**\r\n * Busca a lista de documentos anexados ao cadastro de um paciente.\r\n * @param {object} params\r\n * @param {string} params.isenPK - O PK do paciente no formato \"idp-ids\".\r\n * @returns {Promise<Array<object>>} Uma lista de objetos de documento.\r\n */\r\nexport async function fetchDocuments({ isenPK }) {\r\n  if (!isenPK) throw new Error('ID (isenPK) do paciente é necessário.');\r\n  const [idp, ids] = isenPK.split('-');\r\n  if (!idp || !ids)\r\n    throw new Error('ID (isenPK) do paciente em formato inválido.');\r\n\r\n  const baseUrl = await getBaseUrl();\r\n  const url = new URL(`${baseUrl}/sigss/isar/buscaGrid`);\r\n  const params = {\r\n    'isenPK.idp': idp,\r\n    'isenPK.ids': ids,\r\n    _search: 'false',\r\n    nd: Date.now(),\r\n    rows: '999',\r\n    page: '1',\r\n    sidx: 'isar.isarData desc, isar.isarPK.idp',\r\n    sord: 'desc',\r\n  };\r\n  url.search = new URLSearchParams(params).toString();\r\n\r\n  const response = await fetch(url, {\r\n    headers: {\r\n      Accept: 'application/json, text/javascript, */*; q=0.01',\r\n      'X-Requested-With': 'XMLHttpRequest',\r\n    },\r\n  });\r\n\r\n  if (!response.ok) handleFetchError(response);\r\n  const data = await response.json();\r\n\r\n  return (data?.rows || []).map((row) => {\r\n    const cell = row.cell || [];\r\n    return {\r\n      idp: cell[0],\r\n      ids: cell[1],\r\n      date: cell[2] || '',\r\n      description: (cell[3] || '').trim(),\r\n      fileType: (cell[4] || '').toLowerCase(),\r\n    };\r\n  });\r\n}\r\n\r\n/**\r\n * Obtém a URL de visualização para um documento específico.\r\n * @param {object} params\r\n * @param {string} params.idp - O IDP do documento.\r\n * @param {string} params.ids - O IDS do documento.\r\n * @returns {Promise<string|null>} A URL completa para visualização do arquivo.\r\n */\r\nexport async function fetchDocumentUrl({ idp, ids }) {\r\n  if (!idp || !ids) throw new Error('IDs do documento são necessários.');\r\n\r\n  const baseUrl = await getBaseUrl();\r\n  const url = new URL(`${baseUrl}/sigss/isar/getHashArquivo`);\r\n  url.search = new URLSearchParams({\r\n    'isarPK.idp': idp,\r\n    'isarPK.ids': ids,\r\n  }).toString();\r\n\r\n  const response = await fetch(url, {\r\n    headers: {\r\n      Accept: 'application/json, text/javascript, */*; q=0.01',\r\n      'X-Requested-With': 'XMLHttpRequest',\r\n    },\r\n  });\r\n\r\n  if (!response.ok) handleFetchError(response);\r\n  const data = await response.json();\r\n\r\n  if (data?.isenArquivo?.img) {\r\n    const filePath = data.isenArquivo.img;\r\n    return filePath.startsWith('http') ? filePath : `${baseUrl}${filePath}`;\r\n  }\r\n\r\n  return null;\r\n}\r\n\r\n/**\r\n * Busca a lista de arquivos anexados a uma solicitação de regulação específica.\r\n * @param {object} params\r\n * @param {string} params.reguIdp - O IDP da regulação.\r\n * @param {string} params.reguIds - O IDS da regulação.\r\n * @param {string} params.isenPK - O PK do paciente no formato \"idp-ids\".\r\n * @returns {Promise<Array<object>>} Uma lista de objetos de anexo.\r\n */\r\nexport async function fetchRegulationAttachments({ reguIdp, reguIds, isenPK }) {\r\n  if (!reguIdp || !reguIds) throw new Error('ID da regulação é necessário.');\r\n  if (!isenPK) throw new Error('ID do paciente (isenPK) é necessário.');\r\n\r\n  const [isenIdp, isenIds] = isenPK.split('-');\r\n  if (!isenIdp || !isenIds)\r\n    throw new Error('ID do paciente (isenPK) em formato inválido.');\r\n\r\n  const baseUrl = await getBaseUrl();\r\n  const url = new URL(`${baseUrl}/sigss/rear/buscaGrid`);\r\n  const params = {\r\n    'isenPK.idp': isenIdp,\r\n    'isenPK.ids': isenIds,\r\n    'reguPK.idp': reguIdp,\r\n    'reguPK.ids': reguIds,\r\n    _search: 'false',\r\n    nd: Date.now(),\r\n    rows: '999',\r\n    page: '1',\r\n    sidx: '', // Corrigido para corresponder à requisição da aplicação\r\n    sord: 'asc', // Corrigido para corresponder à requisição da aplicação\r\n  };\r\n  url.search = new URLSearchParams(params).toString();\r\n\r\n  const response = await fetch(url, {\r\n    headers: {\r\n      Accept: 'application/json, text/javascript, */*; q=0.01',\r\n      'X-Requested-With': 'XMLHttpRequest',\r\n    },\r\n  });\r\n\r\n  if (!response.ok) handleFetchError(response);\r\n  const data = await response.json();\r\n\r\n  return (data?.rows || []).map((row) => {\r\n    const cell = row.cell || [];\r\n    return {\r\n      idp: cell[0],\r\n      ids: cell[1],\r\n      date: cell[2] || '',\r\n      description: (cell[3] || '').trim(),\r\n      fileType: (cell[4] || '').toLowerCase(),\r\n    };\r\n  });\r\n}\r\n\r\n/**\r\n * Obtém a URL de visualização para um anexo de regulação específico.\r\n * @param {object} params\r\n * @param {string} params.idp - O IDP do anexo (rearPK.idp).\r\n * @param {string} params.ids - O IDS do anexo (rearPK.ids).\r\n * @returns {Promise<string|null>} A URL completa para visualização do arquivo.\r\n */\r\nexport async function fetchRegulationAttachmentUrl({ idp, ids }) {\r\n  if (!idp || !ids) throw new Error('IDs do anexo são necessários.');\r\n\r\n  const baseUrl = await getBaseUrl();\r\n  const url = new URL(`${baseUrl}/sigss/rear/getHashArquivo`);\r\n  url.search = new URLSearchParams({\r\n    'rearPK.idp': idp,\r\n    'rearPK.ids': ids,\r\n  }).toString();\r\n\r\n  const response = await fetch(url, {\r\n    headers: {\r\n      Accept: 'application/json, text/javascript, */*; q=0.01',\r\n      'X-Requested-With': 'XMLHttpRequest',\r\n    },\r\n  });\r\n\r\n  if (!response.ok) handleFetchError(response);\r\n  const data = await response.json();\r\n\r\n  if (data?.regulacaoArquivo?.img) {\r\n    const filePath = data.regulacaoArquivo.img;\r\n    return filePath.startsWith('http') ? filePath : `${baseUrl}${filePath}`;\r\n  }\r\n\r\n  return null;\r\n}\r\n\r\n/**\r\n * Fetches all data sources for the patient timeline concurrently.\r\n * @param {object} params - The parameters for the API calls.\r\n * @returns {Promise<object>} An object containing the data from all sources.\r\n */\r\nexport async function fetchAllTimelineData({\r\n  isenPK,\r\n  isenFullPKCrypto,\r\n  dataInicial,\r\n  dataFinal,\r\n}) {\r\n  // Usando um objeto de promessas para tornar a extração de resultados mais robusta.\r\n  const dataPromises = {\r\n    consultations: fetchAllConsultations({\r\n      isenFullPKCrypto,\r\n      dataInicial,\r\n      dataFinal,\r\n    }),\r\n    exams: fetchExamesSolicitados({\r\n      isenPK,\r\n      dataInicial,\r\n      dataFinal,\r\n      comResultado: true,\r\n      semResultado: true,\r\n    }),\r\n    appointments: fetchAppointments({ isenPK, dataInicial, dataFinal }),\r\n    regulations: fetchAllRegulations({\r\n      isenPK,\r\n      dataInicial,\r\n      dataFinal,\r\n      type: 'all',\r\n    }),\r\n    documents: fetchDocuments({ isenPK }),\r\n  };\r\n\r\n  const results = await Promise.allSettled(Object.values(dataPromises));\r\n  const dataKeys = Object.keys(dataPromises);\r\n\r\n  const getValueOrDefault = (result, defaultValue = []) => {\r\n    if (result.status === 'fulfilled') {\r\n      if (result.value && typeof result.value.jsonData !== 'undefined') {\r\n        return result.value.jsonData; // For consultations\r\n      }\r\n      return result.value; // For others\r\n    }\r\n    console.warn('Falha em chamada de API para a timeline:', result.reason);\r\n    return defaultValue;\r\n  };\r\n\r\n  const timelineData = {};\r\n  dataKeys.forEach((key, index) => {\r\n    timelineData[key] = getValueOrDefault(results[index]);\r\n  });\r\n\r\n  return timelineData;\r\n}\r\n\r\n/**\r\n * Envia uma requisição para manter a sessão ativa no sistema.\r\n * @returns {Promise<boolean>} True se a requisição foi bem-sucedida, false caso contrário.\r\n */\r\nexport async function keepSessionAlive() {\r\n  try {\r\n    const baseUrl = await getBaseUrl();\r\n    const url = new URL(`${baseUrl}/sigss/common/dataHora`);\r\n\r\n    const response = await fetch(url, {\r\n      method: 'GET',\r\n      headers: {\r\n        Accept: 'application/json, text/javascript, */*; q=0.01',\r\n        'X-Requested-With': 'XMLHttpRequest',\r\n      },\r\n    });\r\n\r\n    if (!response.ok) {\r\n      console.warn(`Keep-alive falhou com status ${response.status}`);\r\n      return false;\r\n    }\r\n\r\n    const data = await response.json();\r\n    console.log('Sessão mantida ativa:', data);\r\n    return true;\r\n  } catch (error) {\r\n    console.error('Erro ao manter sessão ativa:', error);\r\n    return false;\r\n  }\r\n}\r\n","/*\r\n * Copyright (c) 2016-2019, 2021-2022  Mozilla Foundation.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n * http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n\r\n'use strict';\r\n\r\nif (typeof browser === 'undefined' && typeof chrome !== 'undefined') {\r\n  var browser = chrome;\r\n}\r\n","/**\r\n * Define a configuração padrão para os campos da ficha do paciente.\r\n * Este é o \"molde\" que a extensão usará se nenhuma configuração personalizada for encontrada.\r\n *\r\n * Estrutura de cada objeto de campo:\r\n * - id: Um identificador único para o campo (usado no HTML).\r\n * - key: O caminho para acessar o dado no objeto da ficha LOCAL (ex: 'entidadeFisica.entidade.entiNome').\r\n * - cadsusKey: O índice do dado correspondente no array 'cell' do CADSUS. Null se não houver correspondência.\r\n * - label: O nome do campo exibido na interface (pode ser editado pelo usuário).\r\n * - enabled: Se o campo deve ser exibido por padrão.\r\n * - section: Onde o campo aparece por padrão ('main' para sempre visível, 'more' para \"Mostrar Mais\").\r\n * - formatter: (Opcional) Uma função para formatar o valor antes da exibição e comparação.\r\n */\r\n\r\n// Função para obter um valor aninhado de um objeto de forma segura\r\nconst getNestedValue = (obj, path) => {\r\n  if (!path) return undefined;\r\n  return path.split('.').reduce((acc, part) => acc && acc[part], obj);\r\n};\r\n\r\n// Função para normalizar e formatar telefones para exibição\r\nconst formatPhone = (value) => {\r\n  if (!value) return '';\r\n  // Remove todos os caracteres não numéricos, incluindo o DDI 55 que pode vir do CADSUS\r\n  const digits = String(value).replace(/\\D/g, '').replace(/^55/, '');\r\n  if (digits.length === 11) {\r\n    // (XX) XXXXX-XXXX\r\n    return digits.replace(/(\\d{2})(\\d{5})(\\d{4})/, '($1) $2-$3');\r\n  }\r\n  if (digits.length === 10) {\r\n    // (XX) XXXX-XXXX\r\n    return digits.replace(/(\\d{2})(\\d{4})(\\d{4})/, '($1) $2-$3');\r\n  }\r\n  return value; // Retorna original se não corresponder\r\n};\r\n\r\n// Formatter para valores 't' (true) e 'f' (false)\r\nconst formatBoolean = (value) => {\r\n  if (value === 't' || value === true) return 'Sim';\r\n  if (value === 'f' || value === false) return 'Não';\r\n  return value;\r\n};\r\n\r\nexport const defaultFieldConfig = [\r\n  // --- Seção Principal (Main) ---\r\n  {\r\n    id: 'nomeCompleto',\r\n    key: 'entidadeFisica.entidade.entiNome',\r\n    cadsusKey: 2,\r\n    label: 'Nome',\r\n    enabled: true,\r\n    section: 'main',\r\n    order: 1,\r\n  },\r\n  {\r\n    id: 'cpf',\r\n    key: 'entidadeFisica.entfCPF',\r\n    cadsusKey: 50,\r\n    label: 'CPF',\r\n    enabled: true,\r\n    section: 'main',\r\n    order: 2,\r\n    formatter: (value) => String(value || '').replace(/\\D/g, ''), // Normaliza para comparação\r\n  },\r\n  {\r\n    id: 'cns',\r\n    key: 'isenNumCadSus',\r\n    cadsusKey: (cell) =>\r\n      (String(cell[1]) || '')\r\n        .split('\\n')[0]\r\n        .replace(/\\s*\\(.*\\)/, '')\r\n        .trim(),\r\n    label: 'CNS',\r\n    enabled: true,\r\n    section: 'main',\r\n    order: 3,\r\n  },\r\n  {\r\n    id: 'nomeMae',\r\n    key: 'entidadeFisica.entfNomeMae',\r\n    cadsusKey: 7,\r\n    label: 'Nome da Mãe',\r\n    enabled: true,\r\n    section: 'main',\r\n    order: 4,\r\n  },\r\n  {\r\n    id: 'dtNasc',\r\n    key: 'entidadeFisica.entfDtNasc',\r\n    cadsusKey: 3,\r\n    label: 'Nascimento',\r\n    enabled: true,\r\n    section: 'main',\r\n    order: 5,\r\n  },\r\n  {\r\n    id: 'telefone',\r\n    key: (data) =>\r\n      `${data.entidadeFisica?.entidade?.entiTel1Pre || ''}${\r\n        data.entidadeFisica?.entidade?.entiTel1 || ''\r\n      }`,\r\n    cadsusKey: 16,\r\n    label: 'Telefone',\r\n    enabled: true,\r\n    section: 'main',\r\n    order: 6,\r\n    formatter: formatPhone,\r\n  },\r\n  // --- Seção \"Mostrar Mais\" (More) ---\r\n  {\r\n    id: 'nomeSocial',\r\n    key: 'entidadeFisica.entidade.entiNomeSocial',\r\n    cadsusKey: null,\r\n    label: 'Nome Social',\r\n    enabled: true,\r\n    section: 'more',\r\n    order: 1,\r\n  },\r\n  {\r\n    id: 'rg',\r\n    key: 'entidadeFisica.entfRG',\r\n    cadsusKey: 51, // CORRIGIDO\r\n    label: 'RG',\r\n    enabled: true,\r\n    section: 'more',\r\n    order: 2,\r\n  },\r\n  {\r\n    id: 'endereco',\r\n    key: (data) =>\r\n      `${\r\n        data.entidadeFisica?.entidade?.logradouro?.tipoLogradouro?.tiloNome ||\r\n        ''\r\n      } ${String(data.entidadeFisica?.entidade?.logradouro?.logrNome || '')\r\n        .split('/')[0]\r\n        .trim()}`.trim(),\r\n    cadsusKey: (cell) =>\r\n      `${String(cell[35] || '')} ${String(cell[34] || '')\r\n        .split('/')[0]\r\n        .trim()}`.trim(),\r\n    label: 'Endereço',\r\n    enabled: true,\r\n    section: 'more',\r\n    order: 3,\r\n  },\r\n  {\r\n    id: 'bairro',\r\n    key: 'entidadeFisica.entidade.localidade.locaNome',\r\n    cadsusKey: 30,\r\n    label: 'Bairro',\r\n    enabled: true,\r\n    section: 'more',\r\n    order: 4,\r\n  },\r\n  {\r\n    id: 'cidade',\r\n    key: 'entidadeFisica.entidade.localidade.cidade.cidaNome',\r\n    cadsusKey: 29,\r\n    label: 'Cidade',\r\n    enabled: true,\r\n    section: 'more',\r\n    order: 5,\r\n  },\r\n  {\r\n    id: 'cep',\r\n    key: 'entidadeFisica.entidade.entiEndeCEP',\r\n    cadsusKey: 41,\r\n    label: 'CEP',\r\n    enabled: true,\r\n    section: 'more',\r\n    order: 6,\r\n    formatter: (value) => String(value || '').replace(/\\D/g, ''), // Normaliza para comparação\r\n  },\r\n  {\r\n    id: 'alergiaMedicamentos',\r\n    key: 'isenAlergMedicamentos',\r\n    cadsusKey: null,\r\n    label: 'Alergia a Medicamentos',\r\n    enabled: true,\r\n    section: 'more',\r\n    order: 7,\r\n  },\r\n  {\r\n    id: 'alergiaAlimentos',\r\n    key: 'isenAlergAlimentos',\r\n    cadsusKey: null,\r\n    label: 'Alergia a Alimentos',\r\n    enabled: true,\r\n    section: 'more',\r\n    order: 8,\r\n  },\r\n  {\r\n    id: 'alergiaQuimicos',\r\n    key: 'isenAlergElementosQuimicos',\r\n    cadsusKey: null,\r\n    label: 'Alergia a Químicos',\r\n    enabled: true,\r\n    section: 'more',\r\n    order: 9,\r\n  },\r\n  {\r\n    id: 'acamado',\r\n    key: 'isenIsAcamado',\r\n    cadsusKey: null,\r\n    label: 'Acamado',\r\n    enabled: true,\r\n    section: 'more',\r\n    order: 10,\r\n    formatter: formatBoolean,\r\n  },\r\n  {\r\n    id: 'deficiente',\r\n    key: 'isenPessoaDeficiente',\r\n    cadsusKey: null,\r\n    label: 'Pessoa com Deficiência',\r\n    enabled: true,\r\n    section: 'more',\r\n    order: 11,\r\n    formatter: formatBoolean,\r\n  },\r\n  {\r\n    id: 'gemeo',\r\n    key: 'isenPossuiIrmaoGemeo',\r\n    cadsusKey: null,\r\n    label: 'Possui Irmão Gêmeo',\r\n    enabled: true,\r\n    section: 'more',\r\n    order: 12,\r\n    formatter: formatBoolean,\r\n  },\r\n  {\r\n    id: 'statusCadastro',\r\n    key: 'status.valor',\r\n    cadsusKey: null,\r\n    label: 'Status do Cadastro',\r\n    enabled: true,\r\n    section: 'more',\r\n    order: 13,\r\n  },\r\n  {\r\n    id: 'unidadeSaude',\r\n    key: 'unidadeSaude.entidade.entiNome',\r\n    cadsusKey: null,\r\n    label: 'Unidade de Saúde',\r\n    enabled: true,\r\n    section: 'more',\r\n    order: 14,\r\n  },\r\n  {\r\n    id: 'observacao',\r\n    key: 'entidadeFisica.entidade.entiObs',\r\n    cadsusKey: null,\r\n    label: 'Observação do Cadastro',\r\n    enabled: true,\r\n    section: 'more',\r\n    order: 15,\r\n  },\r\n  {\r\n    id: 'nomePai',\r\n    key: 'entidadeFisica.entfNomePai',\r\n    cadsusKey: 8, // CORRIGIDO\r\n    label: 'Nome do Pai',\r\n    enabled: false,\r\n    section: 'more',\r\n    order: 16,\r\n  },\r\n  {\r\n    id: 'racaCor',\r\n    key: 'entidadeFisica.racaCor.racoNome',\r\n    cadsusKey: 11, // CORRIGIDO\r\n    label: 'Raça/Cor',\r\n    enabled: false,\r\n    section: 'more',\r\n    order: 17,\r\n  },\r\n  {\r\n    id: 'grauInstrucao',\r\n    key: 'entidadeFisica.grauInstrucao.grinNome',\r\n    cadsusKey: null,\r\n    label: 'Grau de Instrução',\r\n    enabled: false,\r\n    section: 'more',\r\n    order: 18,\r\n  },\r\n  {\r\n    id: 'cidadeNascimento',\r\n    key: 'entidadeFisica.cidadeNasc.cidaNome',\r\n    cadsusKey: 45, // CORRIGIDO\r\n    label: 'Cidade de Nascimento',\r\n    enabled: false,\r\n    section: 'more',\r\n    order: 19,\r\n  },\r\n  {\r\n    id: 'nacionalidade',\r\n    key: 'entidadeFisica.nacionalidade.naciDescricao',\r\n    cadsusKey: 23, // CORRIGIDO\r\n    label: 'Nacionalidade',\r\n    enabled: false,\r\n    section: 'more',\r\n    order: 20,\r\n  },\r\n  {\r\n    id: 'religiao',\r\n    key: 'entidadeFisica.religiao.reliNome',\r\n    cadsusKey: null,\r\n    label: 'Religião',\r\n    enabled: false,\r\n    section: 'more',\r\n    order: 21,\r\n  },\r\n  {\r\n    id: 'cbo',\r\n    key: 'entidadeFisica.cbo.dcboNome',\r\n    cadsusKey: null,\r\n    label: 'Profissão (CBO)',\r\n    enabled: false,\r\n    section: 'more',\r\n    order: 22,\r\n  },\r\n  {\r\n    id: 'pis',\r\n    key: 'entidadeFisica.entfPis',\r\n    cadsusKey: 55, // CORRIGIDO\r\n    label: 'PIS',\r\n    enabled: false,\r\n    section: 'more',\r\n    order: 23,\r\n  },\r\n  {\r\n    id: 'ctps',\r\n    key: (data) => {\r\n      const ctps = data.entidadeFisica?.entfCTPS || '';\r\n      const serie = data.entidadeFisica?.entfCTPSSerie || '';\r\n      if (!ctps) return '';\r\n      return `${ctps} (Série: ${serie})`;\r\n    },\r\n    cadsusKey: null,\r\n    label: 'CTPS',\r\n    enabled: false,\r\n    section: 'more',\r\n    order: 24,\r\n  },\r\n  {\r\n    id: 'convulsivo',\r\n    key: 'isenIsConvulsivo',\r\n    cadsusKey: null,\r\n    label: 'É Convulsivo',\r\n    enabled: true,\r\n    section: 'more',\r\n    order: 25,\r\n    formatter: formatBoolean,\r\n  },\r\n  {\r\n    id: 'bpc',\r\n    key: 'isenRecebeBPC',\r\n    cadsusKey: null,\r\n    label: 'Recebe BPC',\r\n    enabled: true,\r\n    section: 'more',\r\n    order: 26,\r\n    formatter: formatBoolean,\r\n  },\r\n  {\r\n    id: 'autista',\r\n    key: 'isenEspectroAutista',\r\n    cadsusKey: null,\r\n    label: 'Espectro Autista',\r\n    enabled: true,\r\n    section: 'more',\r\n    order: 27,\r\n    formatter: formatBoolean,\r\n  },\r\n];\r\n\r\n// Exporta a função para obter valores, será útil no sidebar.js\r\nexport { getNestedValue };\r\n","/**\r\n * Define a configuração padrão para todos os filtros disponíveis na extensão.\r\n * Este arquivo centraliza a definição de cada filtro, que será usado tanto\r\n * na página de opções (para configurar a disposição) quanto na barra lateral\r\n * (para renderização e funcionamento).\r\n *\r\n * Estrutura de cada objeto de filtro:\r\n * - id: Identificador único do elemento HTML.\r\n * - label: O texto que descreve o filtro na interface.\r\n * - type: O tipo de elemento ('text', 'select', 'checkbox', 'selectGroup', 'component').\r\n * - section: A qual seção principal o filtro pertence.\r\n * - defaultLocation: Onde o filtro aparece por padrão ('main' ou 'more').\r\n * - componentName: (Apenas para type 'component') O nome do componente a ser renderizado.\r\n * - placeholder: (Opcional) Texto de exemplo para campos de texto.\r\n * - options: (Opcional) Um array de objetos {value, text} para 'select' ou 'selectGroup'.\r\n * - defaultChecked: (Opcional) Estado padrão para 'checkbox'.\r\n */\r\n\r\nexport const filterConfig = {\r\n  consultations: [\r\n    {\r\n      id: 'consultation-date-range',\r\n      label: 'Filtro de Datas',\r\n      type: 'component',\r\n      componentName: 'date-range',\r\n      section: 'consultations',\r\n      defaultLocation: 'main',\r\n    },\r\n    {\r\n      id: 'consultation-filter-keyword',\r\n      label: 'Busca por Palavra-chave',\r\n      type: 'text',\r\n      section: 'consultations',\r\n      defaultLocation: 'main',\r\n      placeholder: 'Busque em todo o conteúdo...',\r\n    },\r\n    {\r\n      id: 'hide-no-show-checkbox',\r\n      label: 'Ocultar faltas',\r\n      type: 'checkbox',\r\n      section: 'consultations',\r\n      defaultLocation: 'main',\r\n      defaultChecked: false,\r\n    },\r\n    {\r\n      id: 'fetch-type-buttons',\r\n      label: 'Tipo de Consulta',\r\n      type: 'selectGroup',\r\n      section: 'consultations',\r\n      defaultLocation: 'more',\r\n      options: [\r\n        { value: 'all', text: 'Todas' },\r\n        { value: 'basic', text: 'Básicas' },\r\n        { value: 'specialized', text: 'Especializadas' },\r\n      ],\r\n    },\r\n    {\r\n      id: 'consultation-filter-cid',\r\n      label: 'CID/CIAP',\r\n      type: 'text',\r\n      section: 'consultations',\r\n      defaultLocation: 'more',\r\n      placeholder: 'Ex: A09, Z00...',\r\n    },\r\n    {\r\n      id: 'consultation-filter-specialty',\r\n      label: 'Especialidade',\r\n      type: 'text',\r\n      section: 'consultations',\r\n      defaultLocation: 'more',\r\n      placeholder: 'Digite especialidades, separe por vírgula...',\r\n    },\r\n    {\r\n      id: 'consultation-filter-professional',\r\n      label: 'Profissional',\r\n      type: 'text',\r\n      section: 'consultations',\r\n      defaultLocation: 'more',\r\n      placeholder: 'Digite nomes, separe por vírgula...',\r\n    },\r\n    {\r\n      id: 'consultation-filter-unit',\r\n      label: 'Unidade de Saúde',\r\n      type: 'text',\r\n      section: 'consultations',\r\n      defaultLocation: 'more',\r\n      placeholder: 'Digite unidades, separe por vírgula...',\r\n    },\r\n    {\r\n      id: 'consultation-saved-filters',\r\n      label: 'Filtros Salvos',\r\n      type: 'component',\r\n      componentName: 'saved-filters',\r\n      section: 'consultations',\r\n      defaultLocation: 'more',\r\n    },\r\n  ],\r\n  exams: [\r\n    {\r\n      id: 'exam-date-range',\r\n      label: 'Filtro de Datas',\r\n      type: 'component',\r\n      componentName: 'date-range',\r\n      section: 'exams',\r\n      defaultLocation: 'main',\r\n    },\r\n    {\r\n      id: 'exam-fetch-type-buttons',\r\n      label: 'Status do Resultado',\r\n      type: 'selectGroup',\r\n      section: 'exams',\r\n      defaultLocation: 'main',\r\n      options: [\r\n        { value: 'all', text: 'Todos' },\r\n        { value: 'withResult', text: 'Com Resultado' },\r\n        { value: 'withoutResult', text: 'Sem Resultado' },\r\n      ],\r\n    },\r\n    {\r\n      id: 'exam-filter-name',\r\n      label: 'Nome do Exame',\r\n      type: 'text',\r\n      section: 'exams',\r\n      defaultLocation: 'main',\r\n      placeholder: 'Digite nomes, separe por vírgula...',\r\n    },\r\n    {\r\n      id: 'exam-filter-professional',\r\n      label: 'Profissional Solicitante',\r\n      type: 'text',\r\n      section: 'exams',\r\n      defaultLocation: 'more',\r\n      placeholder: 'Digite nomes, separe por vírgula...',\r\n    },\r\n    {\r\n      id: 'exam-filter-specialty',\r\n      label: 'Especialidade Solicitante',\r\n      type: 'text',\r\n      section: 'exams',\r\n      defaultLocation: 'more',\r\n      placeholder: 'Digite especialidades, separe por vírgula...',\r\n    },\r\n    {\r\n      id: 'exam-saved-filters',\r\n      label: 'Filtros Salvos',\r\n      type: 'component',\r\n      componentName: 'saved-filters',\r\n      section: 'exams',\r\n      defaultLocation: 'more',\r\n    },\r\n  ],\r\n  appointments: [\r\n    {\r\n      id: 'appointment-date-range',\r\n      label: 'Filtro de Datas',\r\n      type: 'component',\r\n      componentName: 'date-range',\r\n      section: 'appointments',\r\n      defaultLocation: 'main',\r\n    },\r\n    {\r\n      id: 'appointment-fetch-type-buttons',\r\n      label: 'Tipo de Agendamento',\r\n      type: 'selectGroup',\r\n      section: 'appointments',\r\n      defaultLocation: 'main',\r\n      options: [\r\n        { value: 'all', text: 'Todos' },\r\n        { value: 'consultas', text: 'Consultas' },\r\n        { value: 'exames', text: 'Exames' },\r\n      ],\r\n    },\r\n    {\r\n      id: 'appointment-filter-status',\r\n      label: 'Status',\r\n      type: 'select',\r\n      section: 'appointments',\r\n      defaultLocation: 'main',\r\n      options: [\r\n        { value: 'todos', text: 'Todos' },\r\n        { value: 'AGENDADO', text: 'Agendado' },\r\n        { value: 'PRESENTE', text: 'Presente' },\r\n        { value: 'FALTOU', text: 'Faltou' },\r\n        { value: 'CANCELADO', text: 'Cancelado' },\r\n        { value: 'ATENDIDO', text: 'Atendido' },\r\n      ],\r\n    },\r\n    {\r\n      id: 'appointment-filter-term',\r\n      label: 'Busca por Termo',\r\n      type: 'text',\r\n      section: 'appointments',\r\n      defaultLocation: 'more',\r\n      placeholder: 'Profissional, especialidade...',\r\n    },\r\n    {\r\n      id: 'appointment-filter-location',\r\n      label: 'Local',\r\n      type: 'text',\r\n      section: 'appointments',\r\n      defaultLocation: 'more',\r\n      placeholder: 'Digite locais, separe por vírgula...',\r\n    },\r\n    {\r\n      id: 'appointment-saved-filters',\r\n      label: 'Filtros Salvos',\r\n      type: 'component',\r\n      componentName: 'saved-filters',\r\n      section: 'appointments',\r\n      defaultLocation: 'more',\r\n    },\r\n  ],\r\n  regulations: [\r\n    {\r\n      id: 'regulation-date-range',\r\n      label: 'Filtro de Datas',\r\n      type: 'component',\r\n      componentName: 'date-range',\r\n      section: 'regulations',\r\n      defaultLocation: 'main',\r\n    },\r\n    {\r\n      id: 'regulation-fetch-type-buttons',\r\n      label: 'Modalidade',\r\n      type: 'selectGroup',\r\n      section: 'regulations',\r\n      defaultLocation: 'main',\r\n      options: [\r\n        { value: 'all', text: 'Todos' },\r\n        { value: 'ENC', text: 'Consultas' },\r\n        { value: 'EXA', text: 'Exames' },\r\n      ],\r\n    },\r\n    {\r\n      id: 'regulation-filter-status',\r\n      label: 'Status',\r\n      type: 'select',\r\n      section: 'regulations',\r\n      defaultLocation: 'main',\r\n      options: [\r\n        { value: 'todos', text: 'Todos' },\r\n        { value: 'AUTORIZADO', text: 'Autorizado' },\r\n        { value: 'PENDENTE', text: 'Pendente' },\r\n        { value: 'NEGADO', text: 'Negado' },\r\n        { value: 'DEVOLVIDO', text: 'Devolvido' },\r\n        { value: 'CANCELADA', text: 'Cancelada' },\r\n        { value: 'EM ANÁLISE', text: 'Em Análise' },\r\n      ],\r\n    },\r\n    {\r\n      id: 'regulation-filter-priority',\r\n      label: 'Prioridade',\r\n      type: 'select',\r\n      section: 'regulations',\r\n      defaultLocation: 'more',\r\n      options: [\r\n        { value: 'todas', text: 'Todas' }, // Opções serão populadas dinamicamente\r\n      ],\r\n    },\r\n    {\r\n      id: 'regulation-filter-procedure',\r\n      label: 'Procedimento/Especialidade',\r\n      type: 'text',\r\n      section: 'regulations',\r\n      defaultLocation: 'more',\r\n      placeholder: 'Ex: Ortopedia, Raio X...',\r\n    },\r\n    {\r\n      id: 'regulation-filter-requester',\r\n      label: 'Profissional/Unidade Solicitante',\r\n      type: 'text',\r\n      section: 'regulations',\r\n      defaultLocation: 'more',\r\n      placeholder: 'Digite nomes, separe por vírgula...',\r\n    },\r\n    {\r\n      id: 'regulation-saved-filters',\r\n      label: 'Filtros Salvos',\r\n      type: 'component',\r\n      componentName: 'saved-filters',\r\n      section: 'regulations',\r\n      defaultLocation: 'more',\r\n    },\r\n  ],\r\n  documents: [\r\n    {\r\n      id: 'document-date-range',\r\n      label: 'Filtro de Datas',\r\n      type: 'component',\r\n      componentName: 'date-range',\r\n      section: 'documents',\r\n      defaultLocation: 'main',\r\n    },\r\n    {\r\n      id: 'document-filter-keyword',\r\n      label: 'Busca por Palavra-chave',\r\n      type: 'text',\r\n      section: 'documents',\r\n      defaultLocation: 'main',\r\n      placeholder: 'Busque na descrição do documento...',\r\n    },\r\n  ],\r\n};\r\n","/**\r\n * @file Contém todas as funções responsáveis por gerar o HTML dos resultados.\r\n */\r\n\r\nimport { getSortIndicator } from './SectionManager.js';\r\nimport * as Utils from './utils.js';\r\n\r\nexport function renderConsultations(consultations, sortState) {\r\n  const contentDiv = document.getElementById('consultations-content');\r\n  if (!contentDiv) return;\r\n\r\n  if (consultations.length === 0) {\r\n    contentDiv.innerHTML =\r\n      '<p class=\"text-slate-500\">Nenhuma consulta encontrada para os filtros aplicados.</p>';\r\n    return;\r\n  }\r\n  const headers = `\r\n    <div class=\"flex justify-between text-xs font-bold text-slate-500 mb-2 px-3\">\r\n        <span class=\"sort-header w-2/3\" data-sort-key=\"specialty\">Especialidade/Profissional <span class=\"sort-indicator\">${getSortIndicator(\r\n    'specialty',\r\n    sortState\r\n  )}</span></span>\r\n        <span class=\"sort-header w-1/3 text-right\" data-sort-key=\"sortableDate\">Data <span class=\"sort-indicator\">${getSortIndicator(\r\n    'sortableDate',\r\n    sortState\r\n  )}</span></span>\r\n    </div>\r\n  `;\r\n  contentDiv.innerHTML =\r\n    headers +\r\n    consultations\r\n      .map(\r\n        (c) => `\r\n        <div class=\"p-3 mb-3 border rounded-lg ${\r\n  c.isNoShow ? 'bg-red-50 border-red-200' : 'bg-white'\r\n} consultation-item\">\r\n            <div class=\"flex justify-between items-start cursor-pointer consultation-header\">\r\n                <div>\r\n                    <p class=\"font-bold text-blue-700 pointer-events-none\">${\r\n  c.specialty\r\n}</p>\r\n                    <p class=\"text-sm text-slate-600 pointer-events-none\">${\r\n  c.professional\r\n}</p>\r\n                </div>\r\n                <p class=\"text-sm font-medium text-slate-800 bg-slate-100 px-2 py-1 rounded whitespace-pre-wrap text-right pointer-events-none\">${c.date.replace(\r\n    /\\n/g,\r\n    '<br>'\r\n  )}</p>\r\n            </div>\r\n            <div class=\"consultation-body collapse-section show\">\r\n                ${\r\n  c.isNoShow\r\n    ? '<p class=\"text-center font-bold text-red-600 mt-2\">PACIENTE FALTOU</p>'\r\n    : `\r\n                <p class=\"text-sm text-slate-500 mt-1\">${c.unit}</p>\r\n                <div class=\"mt-3 pt-3 border-t border-slate-200 space-y-2\">\r\n                    ${c.details\r\n    .map(\r\n      (d) =>\r\n        `<p class=\"text-xs font-semibold text-slate-500 uppercase\">${\r\n          d.label\r\n        }</p><p class=\"text-sm text-slate-700 whitespace-pre-wrap\">${d.value.replace(\r\n          /\\n/g,\r\n          '<br>'\r\n        )} <span class=\"copy-icon\" title=\"Copiar\" data-copy-text=\"${\r\n          d.value\r\n        }\">📄</span></p>`\r\n    )\r\n    .join('')}\r\n                </div>`\r\n}\r\n            </div>\r\n        </div>\r\n    `\r\n      )\r\n      .join('');\r\n}\r\n\r\nexport function renderExams(exams, sortState) {\r\n  const contentDiv = document.getElementById('exams-content');\r\n  if (!contentDiv) return;\r\n\r\n  if (exams.length === 0) {\r\n    contentDiv.innerHTML =\r\n      '<p class=\"text-slate-500\">Nenhum exame encontrado para os filtros aplicados.</p>';\r\n    return;\r\n  }\r\n  const headers = `\r\n    <div class=\"flex justify-between text-xs font-bold text-slate-500 mb-2 px-3\">\r\n        <span class=\"sort-header w-2/3\" data-sort-key=\"examName\">Nome do Exame <span class=\"sort-indicator\">${getSortIndicator(\r\n    'examName',\r\n    sortState\r\n  )}</span></span>\r\n        <span class=\"sort-header w-1/3 text-right\" data-sort-key=\"date\">Data <span class=\"sort-indicator\">${getSortIndicator(\r\n    'date',\r\n    sortState\r\n  )}</span></span>\r\n    </div>\r\n  `;\r\n  contentDiv.innerHTML =\r\n    headers +\r\n    exams\r\n      .map((exam) => {\r\n        const idp = exam.resultIdp;\r\n        const ids = exam.resultIds;\r\n        const idpStr = idp !== null && idp !== undefined ? String(idp) : '';\r\n        const idsStr = ids !== null && ids !== undefined ? String(ids) : '';\r\n        const showBtn =\r\n          exam.hasResult &&\r\n          idp !== null &&\r\n          idp !== undefined &&\r\n          ids !== null &&\r\n          ids !== undefined &&\r\n          idpStr !== '' &&\r\n          idsStr !== '';\r\n        return `\r\n        <div class=\"p-3 mb-3 border rounded-lg bg-white\">\r\n            <p class=\"font-semibold text-indigo-700\">${\r\n  exam.examName || 'Nome do exame não informado'\r\n} <span class=\"copy-icon\" title=\"Copiar\" data-copy-text=\"${\r\n  exam.examName\r\n}\">📄</span></p>\r\n            <div class=\"text-sm text-slate-500 mt-1\">\r\n                <p>Solicitado por: ${exam.professional || 'Não informado'} (${\r\n  exam.specialty || 'N/A'\r\n})</p>\r\n                <p>Data: ${exam.date || 'Não informada'}</p>\r\n            </div>\r\n            ${\r\n  showBtn\r\n    ? `<button class=\"view-exam-result-btn mt-2 w-full text-sm bg-green-100 text-green-800 py-1 rounded hover:bg-green-200\" data-idp=\"${idpStr}\" data-ids=\"${idsStr}\">Visualizar Resultado</button>`\r\n    : ''\r\n}\r\n        </div>\r\n      `;\r\n      })\r\n      .join('');\r\n}\r\n\r\nexport function renderAppointments(appointments, sortState) {\r\n  const contentDiv = document.getElementById('appointments-content');\r\n  if (!contentDiv) return;\r\n\r\n  const statusStyles = {\r\n    AGENDADO: 'bg-blue-100 text-blue-800',\r\n    PRESENTE: 'bg-green-100 text-green-800',\r\n    FALTOU: 'bg-red-100 text-red-800',\r\n    CANCELADO: 'bg-yellow-100 text-yellow-800',\r\n    ATENDIDO: 'bg-purple-100 text-purple-800',\r\n  };\r\n\r\n  if (appointments.length === 0) {\r\n    contentDiv.innerHTML =\r\n      '<p class=\"text-slate-500\">Nenhum agendamento encontrado para o filtro selecionado.</p>';\r\n    return;\r\n  }\r\n  const headers = `\r\n    <div class=\"flex justify-between text-xs font-bold text-slate-500 mb-2 px-3\">\r\n        <span class=\"sort-header w-1/2\" data-sort-key=\"specialty\">Especialidade <span class=\"sort-indicator\">${getSortIndicator(\r\n    'specialty',\r\n    sortState\r\n  )}</span></span>\r\n        <span class=\"sort-header w-1/4 text-center\" data-sort-key=\"status\">Status <span class=\"sort-indicator\">${getSortIndicator(\r\n    'status',\r\n    sortState\r\n  )}</span></span>\r\n        <span class=\"sort-header w-1/4 text-right\" data-sort-key=\"date\">Data <span class=\"sort-indicator\">${getSortIndicator(\r\n    'date',\r\n    sortState\r\n  )}</span></span>\r\n    </div>\r\n  `;\r\n  contentDiv.innerHTML =\r\n    headers +\r\n    appointments\r\n      .map((item) => {\r\n        const style = statusStyles[item.status] || 'bg-gray-100 text-gray-800';\r\n        let typeText = item.type;\r\n        if (item.isSpecialized) {\r\n          typeText = 'CONSULTA ESPECIALIZADA';\r\n        } else if (item.isOdonto) {\r\n          typeText = 'CONSULTA ODONTO';\r\n        } else if (item.type.toUpperCase().includes('EXAME')) {\r\n          typeText = 'EXAME';\r\n        }\r\n\r\n        const [idp, ids] = item.id.split('-');\r\n\r\n        return `\r\n        <div class=\"p-3 mb-3 border rounded-lg bg-white\">\r\n            <div class=\"flex justify-between items-start\">\r\n                <div>\r\n                    <p class=\"font-semibold text-gray-800\">${typeText}</p>\r\n                    <p class=\"text-sm text-indigo-600 font-medium\">${\r\n  item.specialty || 'Sem especialidade'\r\n}</p>\r\n                </div>\r\n                <span class=\"text-xs font-bold px-2 py-1 rounded-full ${style}\">${\r\n  item.status\r\n}</span>\r\n            </div>\r\n            <div class=\"text-sm text-slate-500 mt-2 border-t pt-2\">\r\n                <p><strong>Data:</strong> ${item.date} às ${item.time}</p>\r\n                <p><strong>Local:</strong> ${item.location}</p>\r\n                <p><strong>Profissional:</strong> ${item.professional}</p>\r\n            </div>\r\n            <div class=\"flex items-center justify-between mt-2 pt-2 border-t\">\r\n                 <button class=\"view-appointment-details-btn text-sm bg-gray-100 text-gray-800 py-1 px-3 rounded hover:bg-gray-200\" data-idp=\"${\r\n  idp || ''\r\n}\" data-ids=\"${ids || ''}\" data-type=\"${item.type}\">\r\n                    Ver Detalhes\r\n                </button>\r\n            </div>\r\n        </div>\r\n      `;\r\n      })\r\n      .join('');\r\n}\r\n\r\nexport function renderRegulations(regulations, sortState, globalSettings) {\r\n  const contentDiv = document.getElementById('regulations-content');\r\n  if (!contentDiv) return;\r\n\r\n  const priorityNameMap = new Map();\r\n  const priorityColorMap = new Map();\r\n  if (globalSettings && globalSettings.regulationPriorities) {\r\n    globalSettings.regulationPriorities.forEach((prio) => {\r\n      priorityNameMap.set(prio.coreDescricao, prio.coreDescricao);\r\n      priorityColorMap.set(prio.coreDescricao, prio.coreCor);\r\n    });\r\n  }\r\n\r\n  const statusStyles = {\r\n    AUTORIZADO: 'bg-green-100 text-green-800',\r\n    PENDENTE: 'bg-yellow-100 text-yellow-800',\r\n    NEGADO: 'bg-red-100 text-red-800',\r\n    DEVOLVIDO: 'bg-orange-100 text-orange-800',\r\n    CANCELADA: 'bg-gray-100 text-gray-800',\r\n    'EM ANÁLISE': 'bg-blue-100 text-blue-800',\r\n  };\r\n\r\n  if (regulations.length === 0) {\r\n    contentDiv.innerHTML =\r\n      '<p class=\"text-slate-500\">Nenhum resultado encontrado para os filtros aplicados.</p>';\r\n    return;\r\n  }\r\n  const headers = `\r\n    <div class=\"flex justify-between text-xs font-bold text-slate-500 mb-2 px-3\">\r\n        <span class=\"sort-header w-1/2\" data-sort-key=\"procedure\">Procedimento <span class=\"sort-indicator\">${getSortIndicator(\r\n    'procedure',\r\n    sortState\r\n  )}</span></span>\r\n        <span class=\"sort-header w-1/4 text-center\" data-sort-key=\"status\">Status <span class=\"sort-indicator\">${getSortIndicator(\r\n    'status',\r\n    sortState\r\n  )}</span></span>\r\n        <span class=\"sort-header w-1/4 text-right\" data-sort-key=\"date\">Data <span class=\"sort-indicator\">${getSortIndicator(\r\n    'date',\r\n    sortState\r\n  )}</span></span>\r\n    </div>\r\n  `;\r\n  contentDiv.innerHTML =\r\n    headers +\r\n    regulations\r\n      .map((item) => {\r\n        const statusKey = (item.status || '').toUpperCase();\r\n        const style = statusStyles[statusKey] || 'bg-gray-100 text-gray-800';\r\n\r\n        const priorityKey = (item.priority || '').toUpperCase();\r\n        const priorityColor = priorityColorMap.get(priorityKey) || 'CCCCCC';\r\n        const textColor = Utils.getContrastYIQ(priorityColor);\r\n        const priorityStyle = `background-color: #${priorityColor}; color: ${textColor};`;\r\n        const priorityText = priorityNameMap.get(priorityKey) || item.priority;\r\n\r\n        const typeText = (item.type || '').startsWith('CON')\r\n          ? 'CONSULTA'\r\n          : 'EXAME';\r\n        const typeColor =\r\n          typeText === 'CONSULTA' ? 'text-cyan-700' : 'text-fuchsia-700';\r\n\r\n        const attachmentsHtml =\r\n          item.attachments && item.attachments.length > 0\r\n            ? `\r\n            <div class=\"mt-2 pt-2 border-t border-slate-100\">\r\n                <p class=\"text-xs font-semibold text-slate-500 mb-1\">ANEXOS:</p>\r\n                <div class=\"space-y-1\">\r\n                    ${item.attachments\r\n    .map(\r\n      (att) => `\r\n                        <button class=\"view-regulation-attachment-btn w-full text-left text-sm bg-gray-50 text-gray-700 py-1 px-2 rounded hover:bg-gray-100 flex justify-between items-center\" data-idp=\"${\r\n  att.idp\r\n}\" data-ids=\"${att.ids}\">\r\n                            <div class=\"flex items-center gap-2 overflow-hidden\">\r\n                                <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"14\" height=\"14\" fill=\"currentColor\" class=\"flex-shrink-0\" viewBox=\"0 0 16 16\"><path d=\"M4 0h8a2 2 0 0 1 2 2v12a2 2 0 0 1-2 2H4a2 2 0 0 1-2-2V2a2 2 0 0 1 2-2zM2 2a1 1 0 0 0-1 1v12a1 1 0 0 0 1 1h8a1 1 0 0 0 1-1V2a1 1 0 0 0-1-1H2z\"/><path d=\"M4.5 12.5a.5.5 0 0 1 .5-.5h7a.5.5 0 0 1 0 1h-7a.5.5 0 0 1-.5-.5zm0-2a.5.5 0 0 1 .5-.5h7a.5.5 0 0 1 0 1h-7a.5.5 0 0 1-.5-.5zm0-2a.5.5 0 0 1 .5-.5h7a.5.5 0 0 1 0 1h-7a.5.5 0 0 1-.5-.5z\"/></svg>\r\n                                <span class=\"truncate\" title=\"${\r\n  att.description\r\n} (${att.fileType.toUpperCase()})\">${\r\n  att.description\r\n} (${att.fileType.toUpperCase()})</span>\r\n                            </div>\r\n                            <span class=\"text-xs text-slate-400 flex-shrink-0 ml-2\">${\r\n  att.date\r\n}</span>\r\n                        </button>`\r\n    )\r\n    .join('')}\r\n                </div>\r\n            </div>\r\n            `\r\n            : '';\r\n\r\n        return `\r\n            <div class=\"p-3 mb-3 border rounded-lg bg-white\">\r\n                <div class=\"flex justify-between items-start\">\r\n                    <div>\r\n                        <div class=\"flex items-center gap-2 mb-1\">\r\n                           <p class=\"font-bold ${typeColor}\">${typeText}</p>\r\n                           <span class=\"text-xs font-bold px-2 py-0.5 rounded-full\" style=\"${priorityStyle}\">${priorityText}</span>\r\n                        </div>\r\n                        <p class=\"text-sm text-slate-800 font-medium\">${\r\n  item.procedure\r\n} <span class=\"copy-icon\" title=\"Copiar\" data-copy-text=\"${\r\n  item.procedure\r\n}\">📄</span></p>\r\n                        <p class=\"text-xs text-slate-500\">${\r\n  item.cid\r\n} <span class=\"copy-icon\" title=\"Copiar\" data-copy-text=\"${\r\n  item.cid\r\n}\">📄</span></p>\r\n                    </div>\r\n                    <span class=\"text-xs font-bold px-2 py-1 rounded-full ${style}\">${\r\n  item.status\r\n}</span>\r\n                </div>\r\n                <div class=\"text-sm text-slate-500 mt-2 border-t pt-2 space-y-1\">\r\n                    <p><strong>Data:</strong> ${item.date}</p>\r\n                    <p><strong>Solicitante:</strong> ${item.requester}</p>\r\n                    <p><strong>Executante:</strong> ${\r\n  item.provider || 'Não definido'\r\n}</p>\r\n                </div>\r\n                <div class=\"mt-2 pt-2 border-t\">\r\n                     <button class=\"view-regulation-details-btn w-full text-sm bg-gray-100 text-gray-800 py-1 px-3 rounded hover:bg-gray-200\" data-idp=\"${\r\n  item.idp\r\n}\" data-ids=\"${item.ids}\">\r\n                        Visualizar Detalhes\r\n                    </button>\r\n                </div>\r\n                ${attachmentsHtml}\r\n            </div>\r\n      `;\r\n      })\r\n      .join('');\r\n}\r\n\r\nexport function renderDocuments(documents, sortState) {\r\n  const contentDiv = document.getElementById('documents-content');\r\n  if (!contentDiv) return;\r\n\r\n  if (!documents || documents.length === 0) {\r\n    contentDiv.innerHTML =\r\n      '<p class=\"text-slate-500\">Nenhum documento encontrado.</p>';\r\n    return;\r\n  }\r\n\r\n  const headers = `\r\n    <div class=\"flex justify-between text-xs font-bold text-slate-500 mb-2 px-3\">\r\n        <span class=\"sort-header w-2/3\" data-sort-key=\"description\">Descrição <span class=\"sort-indicator\">${getSortIndicator(\r\n    'description',\r\n    sortState\r\n  )}</span></span>\r\n        <span class=\"sort-header w-1/3 text-right\" data-sort-key=\"date\">Data <span class=\"sort-indicator\">${getSortIndicator(\r\n    'date',\r\n    sortState\r\n  )}</span></span>\r\n    </div>\r\n  `;\r\n\r\n  contentDiv.innerHTML =\r\n    headers +\r\n    documents\r\n      .map(\r\n        (doc) => `\r\n        <div class=\"p-3 mb-2 border rounded-lg bg-white\">\r\n            <p class=\"font-semibold text-gray-800\">${doc.description}</p>\r\n            <div class=\"text-sm text-slate-500 mt-1\">\r\n                <span>Data: ${doc.date}</span> |\r\n                <span class=\"font-medium\">Tipo: ${doc.fileType.toUpperCase()}</span>\r\n            </div>\r\n            <button class=\"view-document-btn mt-2 w-full text-sm bg-gray-100 text-gray-800 py-1 rounded hover:bg-gray-200\" data-idp=\"${\r\n  doc.idp\r\n}\" data-ids=\"${doc.ids}\">\r\n                Visualizar Documento\r\n            </button>\r\n        </div>\r\n      `\r\n      )\r\n      .join('');\r\n}\r\n\r\n/**\r\n * Renders the timeline based on the provided events and status.\r\n * @param {Array<object>} events - The array of timeline event objects.\r\n * @param {'loading'|'empty'|'error'|'success'} status - The current status of the timeline.\r\n */\r\nexport function renderTimeline(events, status) {\r\n  const contentDiv = document.getElementById('timeline-content');\r\n  if (!contentDiv) return;\r\n\r\n  const eventTypeStyles = {\r\n    consultation: {\r\n      label: 'Consulta',\r\n      color: 'blue',\r\n      bgColorClass: 'bg-blue-100',\r\n      iconColorClass: 'text-blue-600',\r\n      icon: 'M11 2v2M5 2v2M5 3H4a2 2 0 0 0-2 2v4a6 6 0 0 0 12 0V5a2 2 0 0 0-2-2h-1M8 15a6 6 0 0 0 12 0v-3m-6-5a2 2 0 1 0 0 4 2 2 0 0 0 0-4Z',\r\n    },\r\n    exam: {\r\n      label: 'Exame',\r\n      color: 'green',\r\n      bgColorClass: 'bg-green-100',\r\n      iconColorClass: 'text-green-600',\r\n      icon: 'M6 18h8M3 22h18M14 22a7 7 0 1 0 0-14h-1M9 14h2M9 12a2 2 0 0 1-2-2V6h6v4a2 2 0 0 1-2 2ZM12 6V3a1 1 0 0 0-1-1H9a1 1 0 0 0-1 1v3',\r\n    },\r\n    appointment: {\r\n      label: 'Agendamento',\r\n      color: 'purple',\r\n      bgColorClass: 'bg-purple-100',\r\n      iconColorClass: 'text-purple-600',\r\n      icon: 'M8 2v4M16 2v4M3 10h18M3 4h18v16H3zM9 16l2 2 4-4',\r\n    },\r\n    regulation: {\r\n      label: 'Regulação',\r\n      color: 'red',\r\n      bgColorClass: 'bg-red-100',\r\n      iconColorClass: 'text-red-600',\r\n      icon: 'M20 13c0 5-3.5 7.5-7.66 8.95a1 1 0 0 1-.67-.01C7.5 20.5 4 18 4 13V6a1 1 0 0 1 1-1c2 0 4.5-1.2 6.24-2.72a1.17 1.17 0 0 1 1.52 0C14.51 3.81 17 5 19 5a1 1 0 0 1 1 1zM9 12l2 2 4-4',\r\n    },\r\n    // --- INÍCIO DA MODIFICAÇÃO ---\r\n    document: {\r\n      label: 'Documento',\r\n      color: 'gray',\r\n      bgColorClass: 'bg-gray-100',\r\n      iconColorClass: 'text-gray-600',\r\n      icon: 'M14 2H6a2 2 0 0 0-2 2v16a2 2 0 0 0 2 2h12a2 2 0 0 0 2-2V8Z M14 2v6h6',\r\n    },\r\n    // --- FIM DA MODIFICAÇÃO ---\r\n  };\r\n\r\n  let contentHtml = '';\r\n\r\n  switch (status) {\r\n  case 'loading':\r\n    contentHtml =\r\n        '<p class=\"text-slate-500 text-center\">A carregar linha do tempo...</p>';\r\n    break;\r\n  case 'empty':\r\n    contentHtml =\r\n        '<p class=\"text-slate-500 text-center\">Nenhum evento encontrado para este paciente.</p>';\r\n    break;\r\n  case 'error':\r\n    contentHtml =\r\n        '<p class=\"text-red-500 text-center\">Ocorreu um erro ao carregar os dados. Tente novamente.</p>';\r\n    break;\r\n  case 'success':\r\n    if (events.length === 0) {\r\n      contentHtml =\r\n          '<p class=\"text-slate-500 text-center\">Nenhum evento encontrado para os filtros aplicados.</p>';\r\n      break;\r\n    }\r\n    contentHtml = '<div class=\"relative space-y-4\">';\r\n    contentHtml +=\r\n        '<div class=\"absolute left-4 top-2 bottom-2 w-0.5 bg-slate-200\"></div>';\r\n\r\n    contentHtml += events\r\n      .map((event) => {\r\n        const style = eventTypeStyles[event.type] || {\r\n          label: 'Evento',\r\n          color: 'gray',\r\n          icon: '',\r\n        };\r\n        const dateString =\r\n            event.date instanceof Date && !isNaN(event.date)\r\n              ? event.date.toLocaleDateString('pt-BR')\r\n              : 'Data Inválida';\r\n\r\n        let topRightDetailsHtml = '';\r\n        let extraInfoHtml = '';\r\n\r\n        if (event.type === 'appointment') {\r\n          const a = event.details;\r\n          const [idp, ids] = a.id.split('-');\r\n\r\n          const statusStyles = {\r\n            AGENDADO: 'text-blue-600',\r\n            PRESENTE: 'text-green-600',\r\n            FALTOU: 'text-red-600',\r\n            CANCELADO: 'text-yellow-600',\r\n            ATENDIDO: 'text-purple-600',\r\n          };\r\n          const statusClass =\r\n              statusStyles[a.status] || 'text-slate-600';\r\n          const timeHtml = `<div class=\"text-xs text-slate-500\">às ${a.time}</div>`;\r\n          const statusHtml = `<div class=\"mt-1 text-xs font-semibold ${statusClass}\">${a.status}</div>`;\r\n\r\n          const icon = '<svg xmlns=\"http://www.w3.org/2000/svg\" width=\"14\" height=\"14\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\" class=\"lucide lucide-file-search-2\"><path d=\"M14 2v6h6\"/><path d=\"M4 22h14a2 2 0 0 0 2-2V7.5L14.5 2H6a2 2 0 0 0-2 2v4\"/><path d=\"M5 17a3 3 0 1 0 0-6 3 3 0 0 0 0 6z\"/><path d=\"m9 21-1.5-1.5\"/></svg>';\r\n          const detailsButtonHtml = `<button class=\"view-appointment-details-btn mt-2 text-xs bg-gray-100 text-gray-800 py-1 px-3 rounded hover:bg-gray-200 flex items-center gap-1\" data-idp=\"${idp}\" data-ids=\"${ids}\" data-type=\"${a.type}\">${icon}<span>Detalhes</span></button>`;\r\n\r\n          topRightDetailsHtml = timeHtml + statusHtml + detailsButtonHtml;\r\n        } else if (event.type === 'exam') {\r\n          const statusText = event.details.hasResult\r\n            ? 'Com Resultado'\r\n            : 'Sem Resultado';\r\n          const statusClass = event.details.hasResult\r\n            ? 'text-green-600'\r\n            : 'text-yellow-600';\r\n          topRightDetailsHtml = `<div class=\"mt-1 text-xs font-semibold ${statusClass}\">${statusText}</div>`;\r\n          if (\r\n            event.details.hasResult &&\r\n              event.details.resultIdp &&\r\n              event.details.resultIds\r\n          ) {\r\n            topRightDetailsHtml += `<button class=\"view-exam-result-btn mt-2 text-xs bg-green-100 text-green-800 py-1 px-3 rounded hover:bg-green-200\" data-idp=\"${event.details.resultIdp}\" data-ids=\"${event.details.resultIds}\">Visualizar Resultado</button>`;\r\n          }\r\n        } else if (event.type === 'regulation') {\r\n          const r = event.details;\r\n          if (r.idp && r.ids) {\r\n            const icon = '<svg xmlns=\"http://www.w3.org/2000/svg\" width=\"14\" height=\"14\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\" class=\"lucide lucide-file-search-2\"><path d=\"M14 2v6h6\"/><path d=\"M4 22h14a2 2 0 0 0 2-2V7.5L14.5 2H6a2 2 0 0 0-2 2v4\"/><path d=\"M5 17a3 3 0 1 0 0-6 3 3 0 0 0 0 6z\"/><path d=\"m9 21-1.5-1.5\"/></svg>';\r\n            topRightDetailsHtml = `<button class=\"view-regulation-details-btn mt-2 text-xs bg-gray-100 text-gray-800 py-1 px-3 rounded hover:bg-gray-200 flex items-center gap-1\" data-idp=\"${r.idp}\" data-ids=\"${r.ids}\">${icon}<span>Detalhes</span></button>`;\r\n          }\r\n        }\r\n\r\n        if (event.type === 'consultation') {\r\n          const c = event.details;\r\n          const icon = '<svg xmlns=\"http://www.w3.org/2000/svg\" width=\"14\" height=\"14\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\" class=\"lucide lucide-file-search-2\"><path d=\"M14 2v6h6\"/><path d=\"M4 22h14a2 2 0 0 0 2-2V7.5L14.5 2H6a2 2 0 0 0-2 2v4\"/><path d=\"M5 17a3 3 0 1 0 0-6 3 3 0 0 0 0 6z\"/><path d=\"m9 21-1.5-1.5\"/></svg>';\r\n          topRightDetailsHtml = `<button class=\"timeline-toggle-details-btn mt-2 text-xs bg-gray-100 text-gray-800 py-1 px-3 rounded hover:bg-gray-200 flex items-center gap-1\">${icon}<span>Detalhes</span></button>`;\r\n            \r\n          extraInfoHtml = `\r\n                <div class=\"timeline-details-body mt-2 pt-2 border-t border-slate-200\">\r\n                    <p class=\"text-sm text-slate-500 mb-2\">${c.unit}</p>\r\n                    ${c.details\r\n    .map(\r\n      (d) => `\r\n                        <p class=\"text-xs font-semibold text-slate-500 uppercase mb-1\">${\r\n  d.label\r\n}</p>\r\n                        <p class=\"text-sm text-slate-700 mb-2\">${d.value.replace(\r\n    /\\n/g,\r\n    '<br>'\r\n  )} <span class=\"copy-icon\" title=\"Copiar\" data-copy-text=\"${\r\n  d.value\r\n}\">📄</span></p>\r\n                    `\r\n    )\r\n    .join('')}\r\n                </div>\r\n            `;\r\n        } else if (event.type === 'regulation') {\r\n          const r = event.details;\r\n          const attachmentsHtml =\r\n              r.attachments && r.attachments.length > 0\r\n                ? `\r\n                <div class=\"mt-2 pt-2 border-t border-slate-100\">\r\n                    <p class=\"text-xs font-semibold text-slate-500 mb-1\">ANEXOS:</p>\r\n                    <div class=\"space-y-1\">\r\n                        ${r.attachments\r\n    .map(\r\n      (att) => `\r\n                            <button class=\"view-regulation-attachment-btn w-full text-left text-sm bg-gray-50 text-gray-700 py-1 px-2 rounded hover:bg-gray-100 flex justify-between items-center\" data-idp=\"${\r\n  att.idp\r\n}\" data-ids=\"${att.ids}\">\r\n                                <div class=\"flex items-center gap-2 overflow-hidden\">\r\n                                    <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"14\" height=\"14\" fill=\"currentColor\" class=\"flex-shrink-0\" viewBox=\"0 0 16 16\"><path d=\"M4 0h8a2 2 0 0 1 2 2v12a2 2 0 0 1-2 2H4a2 2 0 0 1-2-2V2a2 2 0 0 1 2-2zM2 2a1 1 0 0 0-1 1v12a1 1 0 0 0 1 1h8a1 1 0 0 0 1-1V2a1 1 0 0 0-1-1H2z\"/><path d=\"M4.5 12.5a.5.5 0 0 1 .5-.5h7a.5.5 0 0 1 0 1h-7a.5.5 0 0 1-.5-.5zm0-2a.5.5 0 0 1 .5-.5h7a.5.5 0 0 1 0 1h-7a.5.5 0 0 1-.5-.5zm0-2a.5.5 0 0 1 .5-.5h7a.5.5 0 0 1 0 1h-7a.5.5 0 0 1-.5-.5z\"/></svg>\r\n                                    <span class=\"truncate\" title=\"${\r\n  att.description\r\n} (${att.fileType.toUpperCase()})\">${\r\n  att.description\r\n} (${att.fileType.toUpperCase()})</span>\r\n                                </div>\r\n                                <span class=\"text-xs text-slate-400 flex-shrink-0 ml-2\">${\r\n  att.date\r\n}</span>\r\n                            </button>\r\n                        `\r\n    )\r\n    .join('')}\r\n                    </div>\r\n                </div>\r\n                `\r\n                : '';\r\n\r\n          extraInfoHtml = `\r\n                <div class=\"timeline-details-body mt-2 pt-2 border-t border-slate-200 text-sm\">\r\n                    <p class=\"mb-1\"><strong>Status:</strong> ${r.status}</p>\r\n                    <p class=\"mb-1\"><strong>Prioridade:</strong> ${r.priority}</p>\r\n                    <p class=\"mb-1\"><strong>CID:</strong> ${r.cid}</p>\r\n                    <p class=\"mb-2\"><strong>Executante:</strong> ${\r\n  r.provider || 'Não definido'\r\n}</p>\r\n                    ${attachmentsHtml}\r\n                </div>\r\n            `;\r\n          // --- INÍCIO DA MODIFICAÇÃO ---\r\n        } else if (event.type === 'document') {\r\n          const doc = event.details;\r\n          extraInfoHtml = `\r\n                <div class=\"timeline-details-body mt-2 pt-2 border-t border-slate-200\">\r\n                    <button class=\"view-document-btn w-full text-sm bg-gray-100 text-gray-800 py-1 rounded hover:bg-gray-200\" data-idp=\"${doc.idp}\" data-ids=\"${doc.ids}\">\r\n                        Visualizar Documento\r\n                    </button>\r\n                </div>\r\n            `;\r\n        }\r\n        // --- FIM DA MODIFICAÇÃO ---\r\n\r\n        return `\r\n                    <div class=\"relative pl-10 timeline-item\" data-event-type=\"${event.type}\">\r\n                        <div class=\"absolute left-4 top-2 -ml-[15px] h-[30px] w-[30px] rounded-full ${style.bgColorClass} border-2 border-white flex items-center justify-center ${style.iconColorClass}\" title=\"${style.label}\">\r\n                            <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"18\" height=\"18\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2.5\" stroke-linecap=\"round\" stroke-linejoin=\"round\">\r\n                                <path d=\"${style.icon}\" />\r\n                            </svg>\r\n                        </div>\r\n                        <div class=\"bg-slate-50 p-3 rounded-lg border border-slate-200\">\r\n                            <div class=\"timeline-header cursor-pointer\">\r\n                                <div class=\"flex justify-between items-start\">\r\n                                    <div>\r\n                                        <p class=\"text-sm font-semibold text-${style.color}-700\">${event.title}</p>\r\n                                        <p class=\"text-xs text-slate-600\">${event.summary}</p>\r\n                                    </div>\r\n                                    <div class=\"text-right flex-shrink-0 ml-2\">\r\n                                        <p class=\"text-xs font-medium text-slate-500\">${dateString}</p>\r\n                                        ${topRightDetailsHtml}\r\n                                    </div>\r\n                                </div>\r\n                            </div>\r\n                            ${extraInfoHtml}\r\n                        </div>\r\n                    </div>\r\n                `;\r\n      })\r\n      .join('');\r\n    contentHtml += '</div>';\r\n    break;\r\n  }\r\n  contentDiv.innerHTML = contentHtml;\r\n}\r\n","/**\r\n * @file store.js - Gestor de estado centralizado para a aplicação.\r\n * Implementa um padrão simples de \"publish-subscribe\" para gerir o estado global.\r\n */\r\n\r\nconst state = {\r\n  currentPatient: {\r\n    ficha: null,\r\n    cadsus: null,\r\n    lastCadsusCheck: null,\r\n    isUpdating: false,\r\n  },\r\n  recentPatients: [],\r\n  savedFilterSets: {},\r\n};\r\n\r\nconst listeners = [];\r\n\r\nexport const store = {\r\n  /**\r\n   * Adiciona uma função de callback à lista de listeners.\r\n   * @param {Function} listener A função a ser adicionada.\r\n   * @returns {Function} Uma função para remover o listener (unsubscribe).\r\n   */\r\n  subscribe(listener) {\r\n    listeners.push(listener);\r\n    // PASSO 3.3: Retorna uma função de unsubscribe para melhor gestão de memória.\r\n    return () => {\r\n      const index = listeners.indexOf(listener);\r\n      if (index > -1) {\r\n        listeners.splice(index, 1);\r\n      }\r\n    };\r\n  },\r\n\r\n  _notify() {\r\n    for (const listener of listeners) {\r\n      try {\r\n        listener();\r\n      } catch (error) {\r\n        console.error('Erro num listener do store:', error);\r\n      }\r\n    }\r\n  },\r\n\r\n  setPatient(fichaData, cadsusData) {\r\n    state.currentPatient.ficha = fichaData;\r\n    state.currentPatient.cadsus = cadsusData;\r\n    state.currentPatient.lastCadsusCheck = cadsusData ? new Date() : null;\r\n    state.currentPatient.isUpdating = false;\r\n    this._notify();\r\n  },\r\n\r\n  clearPatient() {\r\n    state.currentPatient.ficha = null;\r\n    state.currentPatient.cadsus = null;\r\n    state.currentPatient.lastCadsusCheck = null;\r\n    state.currentPatient.isUpdating = false;\r\n    this._notify();\r\n  },\r\n\r\n  setPatientUpdating() {\r\n    state.currentPatient.isUpdating = true;\r\n    this._notify();\r\n  },\r\n\r\n  getPatient() {\r\n    return state.currentPatient.ficha ? state.currentPatient : null;\r\n  },\r\n\r\n  setRecentPatients(patients) {\r\n    state.recentPatients = patients;\r\n    this._notify();\r\n  },\r\n\r\n  getRecentPatients() {\r\n    return state.recentPatients;\r\n  },\r\n\r\n  setSavedFilterSets(sets) {\r\n    state.savedFilterSets = sets;\r\n    this._notify();\r\n  },\r\n\r\n  getSavedFilterSets() {\r\n    return state.savedFilterSets;\r\n  },\r\n\r\n  getState() {\r\n    return {\r\n      currentPatient: { ...state.currentPatient },\r\n      recentPatients: [...state.recentPatients],\r\n      savedFilterSets: { ...state.savedFilterSets },\r\n    };\r\n  },\r\n};\r\n","/**\r\n * @file Módulo para gerir o card de \"Dados do Paciente\".\r\n */\r\nimport * as Utils from '../utils.js';\r\nimport { store } from '../store.js';\r\n\r\nlet patientDetailsSection,\r\n  patientMainInfoDiv,\r\n  patientAdditionalInfoDiv,\r\n  toggleDetailsBtn,\r\n  patientCardFooter,\r\n  cadsusTimestamp,\r\n  refreshCadsusBtn;\r\nlet fieldConfigLayout = [];\r\nlet onForceRefresh; // Callback para forçar a atualização\r\n\r\n/**\r\n * Renderiza os detalhes do paciente no card.\r\n * @param {object} patientData - O objeto completo do paciente vindo do store.\r\n */\r\nfunction render(patientData) {\r\n  if (!patientDetailsSection || !patientData || !patientData.ficha) {\r\n    hide();\r\n    return;\r\n  }\r\n\r\n  const { ficha, cadsus, lastCadsusCheck, isUpdating } = patientData;\r\n\r\n  patientMainInfoDiv.innerHTML = '';\r\n  patientAdditionalInfoDiv.innerHTML = '';\r\n\r\n  const getLocalValue = (field, data) => {\r\n    if (typeof field.key === 'function') return field.key(data);\r\n    return Utils.getNestedValue(data, field.key);\r\n  };\r\n\r\n  const getCadsusValue = (field, data) => {\r\n    if (!data || field.cadsusKey === null) return null;\r\n    if (typeof field.cadsusKey === 'function') return field.cadsusKey(data);\r\n    return data[field.cadsusKey];\r\n  };\r\n\r\n  const sortedFields = [...fieldConfigLayout].sort((a, b) => a.order - b.order);\r\n\r\n  sortedFields.forEach((field) => {\r\n    if (!field.enabled) return;\r\n\r\n    let localValue = getLocalValue(field, ficha);\r\n    if (field.formatter) localValue = field.formatter(localValue);\r\n\r\n    let cadsusValue = getCadsusValue(field, cadsus);\r\n    if (field.formatter) cadsusValue = field.formatter(cadsusValue);\r\n\r\n    const v1 = String(localValue || '').trim();\r\n    const v2 = String(cadsusValue || '').trim();\r\n    let icon = '';\r\n\r\n    if (cadsus && field.cadsusKey !== null) {\r\n      let compareV1 = v1;\r\n      let compareV2 = v2;\r\n\r\n      if (field.id === 'telefone') {\r\n        compareV1 = v1.replace(/\\D/g, '').replace(/^55/, '');\r\n        compareV2 = v2.replace(/\\D/g, '').replace(/^55/, '');\r\n      } else {\r\n        compareV1 = Utils.normalizeString(v1);\r\n        compareV2 = Utils.normalizeString(v2);\r\n      }\r\n\r\n      if (compareV1 && compareV1 === compareV2) {\r\n        icon = '<span class=\"comparison-icon\" title=\"Dado confere com o CADSUS\">✅</span>';\r\n      } else {\r\n        const tooltipText = `Ficha: ${v1 || 'Vazio'}\\nCADSUS: ${v2 || 'Vazio'}`;\r\n        icon = `<span class=\"comparison-icon\" data-tooltip=\"${tooltipText}\">⚠️</span>`;\r\n      }\r\n    }\r\n\r\n    const valueClass =\r\n      field.id.toLowerCase().includes('alerg') && v1 && v1 !== '-'\r\n        ? 'text-red-600 font-bold'\r\n        : 'text-slate-900';\r\n    const copyIcon = v1\r\n      ? `<span class=\"copy-icon\" title=\"Copiar\" data-copy-text=\"${v1}\">📄</span>`\r\n      : '';\r\n    const rowHtml = `<div class=\"flex justify-between items-center py-1\"><span class=\"font-medium text-slate-600\">${\r\n      field.label\r\n    }:</span><span class=\"${valueClass} text-right flex items-center\">${\r\n      v1 || '-'\r\n    }${icon}${copyIcon}</span></div>`;\r\n\r\n    if (field.section === 'main') {\r\n      patientMainInfoDiv.innerHTML += rowHtml;\r\n    } else {\r\n      patientAdditionalInfoDiv.innerHTML += rowHtml;\r\n    }\r\n  });\r\n\r\n  if (lastCadsusCheck) {\r\n    cadsusTimestamp.textContent = `CADSUS verificado em: ${lastCadsusCheck.toLocaleString()}`;\r\n    patientCardFooter.style.display = 'flex';\r\n  } else {\r\n    cadsusTimestamp.textContent = 'Não foi possível verificar dados do CADSUS.';\r\n    patientCardFooter.style.display = 'flex';\r\n  }\r\n\r\n  refreshCadsusBtn\r\n    .querySelector('.refresh-icon')\r\n    .classList.toggle('spinning', isUpdating);\r\n  refreshCadsusBtn.disabled = isUpdating;\r\n\r\n  toggleDetailsBtn.style.display = sortedFields.some(\r\n    (f) => f.enabled && f.section === 'more'\r\n  )\r\n    ? 'block'\r\n    : 'none';\r\n  patientDetailsSection.style.display = 'block';\r\n}\r\n\r\nfunction hide() {\r\n  if (patientDetailsSection) patientDetailsSection.style.display = 'none';\r\n}\r\n\r\nfunction handleToggleDetails() {\r\n  patientAdditionalInfoDiv.classList.toggle('show');\r\n  toggleDetailsBtn.textContent = patientAdditionalInfoDiv.classList.contains(\r\n    'show'\r\n  )\r\n    ? 'Mostrar menos'\r\n    : 'Mostrar mais';\r\n}\r\n\r\nfunction handleForceRefresh() {\r\n  const patient = store.getPatient();\r\n  if (patient && patient.ficha && onForceRefresh) {\r\n    onForceRefresh(\r\n      { idp: patient.ficha.isenPK.idp, ids: patient.ficha.isenPK.ids },\r\n      true\r\n    );\r\n  }\r\n}\r\n\r\nfunction onStateChange() {\r\n  const patient = store.getPatient();\r\n  if (patient) {\r\n    render(patient);\r\n  } else {\r\n    hide();\r\n  }\r\n}\r\n\r\n/**\r\n * Inicializa o módulo do card de paciente.\r\n * @param {Array<object>} config - A configuração dos campos da ficha.\r\n * @param {object} callbacks - Funções de callback.\r\n * @param {Function} callbacks.onForceRefresh - Função para forçar a atualização.\r\n */\r\nexport function init(config, callbacks) {\r\n  patientDetailsSection = document.getElementById('patient-details-section');\r\n  patientMainInfoDiv = document.getElementById('patient-main-info');\r\n  patientAdditionalInfoDiv = document.getElementById('patient-additional-info');\r\n  toggleDetailsBtn = document.getElementById('toggle-details-btn');\r\n  patientCardFooter = document.getElementById('patient-card-footer');\r\n  cadsusTimestamp = document.getElementById('cadsus-timestamp');\r\n  refreshCadsusBtn = document.getElementById('refresh-cadsus-btn');\r\n\r\n  fieldConfigLayout = config;\r\n  onForceRefresh = callbacks.onForceRefresh;\r\n\r\n  toggleDetailsBtn.addEventListener('click', handleToggleDetails);\r\n  refreshCadsusBtn.addEventListener('click', handleForceRefresh);\r\n\r\n  store.subscribe(onStateChange);\r\n}\r\n","/**\r\n * @file Módulo para gerir a funcionalidade de busca de pacientes.\r\n */\r\nimport * as API from '../api.js';\r\nimport * as Utils from '../utils.js';\r\nimport { store } from '../store.js';\r\n\r\nlet searchInput;\r\nlet searchResultsList;\r\nlet recentPatientsList;\r\nlet onSelectPatient; // Callback para notificar o sidebar sobre a seleção\r\n\r\nfunction renderSearchResults(patients) {\r\n  if (!searchResultsList) return;\r\n  if (patients.length === 0) {\r\n    searchResultsList.innerHTML = '<li class=\"px-4 py-3 text-sm text-slate-500\">Nenhum paciente encontrado.</li>';\r\n    return;\r\n  }\r\n  searchResultsList.innerHTML = patients\r\n    .map(\r\n      (p) =>\r\n        `<li class=\"px-4 py-3 border-b border-slate-100 hover:bg-slate-50 cursor-pointer transition\" data-idp=\"${\r\n          p.idp\r\n        }\" data-ids=\"${p.ids}\">${renderPatientListItem(p)}</li>`\r\n    )\r\n    .join('');\r\n}\r\n\r\n/**\r\n * Renderiza a lista de pacientes recentes a partir do store.\r\n */\r\nfunction renderRecentPatients() {\r\n  if (!recentPatientsList) return;\r\n  const recents = store.getRecentPatients() || [];\r\n  recentPatientsList.innerHTML =\r\n    '<li class=\"px-4 pt-3 pb-1 text-xs font-semibold text-slate-400\">PACIENTES RECENTES</li>' +\r\n    (recents.length === 0\r\n      ? '<li class=\"px-4 py-3 text-sm text-slate-500\">Nenhum paciente recente.</li>'\r\n      : recents\r\n        .map((p) => {\r\n          // CORREÇÃO: Lida com a estrutura de dados antiga e nova dos pacientes recentes.\r\n          const fichaData = p.ficha || p; // Se p.ficha não existe, 'p' é o próprio objeto da ficha.\r\n          const idp = fichaData.isenPK?.idp || fichaData.idp;\r\n          const ids = fichaData.isenPK?.ids || fichaData.ids;\r\n\r\n          if (!idp || !ids) return ''; // Pula a renderização se o item estiver malformado.\r\n\r\n          return `<li class=\"px-4 py-3 border-b border-slate-100 hover:bg-slate-50 cursor-pointer transition recent-patient-item\" data-idp=\"${idp}\" data-ids=\"${ids}\">${renderPatientListItem(\r\n            fichaData\r\n          )}</li>`;\r\n        })\r\n        .join(''));\r\n}\r\n\r\nfunction renderPatientListItem(patient) {\r\n  const nome =\r\n    patient.value ||\r\n    Utils.getNestedValue(patient, 'entidadeFisica.entidade.entiNome') ||\r\n    'Nome não informado';\r\n  const idp = patient.idp || patient.isenPK?.idp;\r\n  const ids = patient.ids || patient.isenPK?.ids;\r\n  const dataNascimento =\r\n    patient.dataNascimento ||\r\n    Utils.getNestedValue(patient, 'entidadeFisica.entfDtNasc');\r\n  const cpf =\r\n    patient.cpf || Utils.getNestedValue(patient, 'entidadeFisica.entfCPF');\r\n  const cns = patient.cns || patient.isenNumCadSus;\r\n  return `\r\n      <div class=\"font-medium text-slate-800\">${nome}</div>\r\n      <div class=\"grid grid-cols-2 gap-x-4 text-xs text-slate-500 mt-1\">\r\n        <span><strong class=\"font-semibold\">Cód:</strong> ${idp}-${ids}</span>\r\n        <span><strong class=\"font-semibold\">Nasc:</strong> ${\r\n  dataNascimento || '-'\r\n}</span>\r\n        <span><strong class=\"font-semibold\">CPF:</strong> ${cpf || '-'}</span>\r\n        <span><strong class=\"font-semibold\">CNS:</strong> ${cns || '-'}</span>\r\n      </div>\r\n    `;\r\n}\r\n\r\nconst handleSearchInput = Utils.debounce(async () => {\r\n  const searchTerm = searchInput.value.trim();\r\n  store.clearPatient();\r\n  recentPatientsList.classList.add('hidden');\r\n  searchResultsList.classList.remove('hidden');\r\n  if (searchTerm.length < 1) {\r\n    searchResultsList.innerHTML = '';\r\n    return;\r\n  }\r\n  Utils.toggleLoader(true);\r\n  try {\r\n    const patients = await API.searchPatients(searchTerm);\r\n    renderSearchResults(patients);\r\n  } catch (error) {\r\n    Utils.showMessage('Erro ao buscar pacientes.');\r\n  } finally {\r\n    Utils.toggleLoader(false);\r\n  }\r\n}, 500);\r\n\r\nfunction handleSearchFocus() {\r\n  if (searchInput.value.length > 0) return;\r\n  renderRecentPatients();\r\n  searchResultsList.classList.add('hidden');\r\n  recentPatientsList.classList.remove('hidden');\r\n}\r\n\r\nfunction handleSearchBlur() {\r\n  setTimeout(() => {\r\n    searchResultsList.classList.add('hidden');\r\n    recentPatientsList.classList.add('hidden');\r\n  }, 200);\r\n}\r\n\r\nasync function handleResultClick(event) {\r\n  const listItem = event.target.closest('li[data-idp]');\r\n  if (!listItem) return;\r\n\r\n  const { idp, ids } = listItem.dataset;\r\n\r\n  if (listItem.classList.contains('recent-patient-item')) {\r\n    const recentPatient = store.getRecentPatients().find((p) => {\r\n      // CORREÇÃO: Lida com a estrutura de dados antiga e nova.\r\n      const patientIdp = p.ficha ? p.ficha.isenPK.idp : p.idp;\r\n      return patientIdp == idp;\r\n    });\r\n\r\n    // Se o paciente foi encontrado e tem a nova estrutura (com cache), usa os dados do cache.\r\n    if (recentPatient && recentPatient.ficha) {\r\n      store.setPatient(recentPatient.ficha, recentPatient.cadsus);\r\n      searchInput.value = '';\r\n      searchResultsList.classList.add('hidden');\r\n      recentPatientsList.classList.add('hidden');\r\n      return;\r\n    }\r\n  }\r\n\r\n  // Para pacientes novos ou pacientes recentes com a estrutura antiga (que precisam ser re-buscados).\r\n  if (onSelectPatient) {\r\n    onSelectPatient({ idp, ids });\r\n  }\r\n\r\n  searchInput.value = '';\r\n  searchResultsList.classList.add('hidden');\r\n  recentPatientsList.classList.add('hidden');\r\n}\r\n\r\nexport function init(config) {\r\n  searchInput = document.getElementById('patient-search-input');\r\n  searchResultsList = document.getElementById('search-results');\r\n  recentPatientsList = document.getElementById('recent-patients-list');\r\n  onSelectPatient = config.onSelectPatient;\r\n\r\n  store.subscribe(() => {\r\n    if (!recentPatientsList.classList.contains('hidden')) {\r\n      renderRecentPatients();\r\n    }\r\n  });\r\n\r\n  searchInput.addEventListener('input', handleSearchInput);\r\n  searchInput.addEventListener('focus', handleSearchFocus);\r\n  searchInput.addEventListener('blur', handleSearchBlur);\r\n  searchResultsList.addEventListener('click', handleResultClick);\r\n  recentPatientsList.addEventListener('click', handleResultClick);\r\n}\r\n","/**\r\n * @file Contém funções utilitárias compartilhadas em toda a extensão.\r\n */\r\n\r\n/**\r\n * Atraso na execução de uma função após o utilizador parar de digitar.\r\n * @param {Function} func A função a ser executada.\r\n * @param {number} [delay=500] O tempo de espera em milissegundos.\r\n * @returns {Function} A função com debounce.\r\n */\r\nexport function debounce(func, delay = 500) {\r\n  let timeoutId;\r\n  return (...args) => {\r\n    clearTimeout(timeoutId);\r\n    timeoutId = setTimeout(() => {\r\n      func.apply(this, args);\r\n    }, delay);\r\n  };\r\n}\r\n\r\n/**\r\n * Mostra ou esconde o loader principal.\r\n * @param {boolean} show - `true` para mostrar, `false` para esconder.\r\n */\r\nexport function toggleLoader(show) {\r\n  const loader = document.getElementById('loader');\r\n  if (loader) {\r\n    loader.style.display = show ? 'block' : 'none';\r\n  }\r\n}\r\n\r\n/**\r\n * Exibe uma mensagem na área de mensagens.\r\n * @param {string} text O texto da mensagem.\r\n * @param {'error' | 'success' | 'info'} [type='error'] O tipo de mensagem.\r\n */\r\nexport function showMessage(text, type = 'error') {\r\n  const messageArea = document.getElementById('message-area');\r\n  if (messageArea) {\r\n    messageArea.textContent = text;\r\n    const typeClasses = {\r\n      error: 'bg-red-100 text-red-700',\r\n      success: 'bg-green-100 text-green-700',\r\n      info: 'bg-blue-100 text-blue-700',\r\n    };\r\n    messageArea.className = `p-3 rounded-md text-sm ${\r\n      typeClasses[type] || typeClasses.error\r\n    }`;\r\n    messageArea.style.display = 'block';\r\n  }\r\n}\r\n\r\n/**\r\n * Limpa a área de mensagens.\r\n */\r\nexport function clearMessage() {\r\n  const messageArea = document.getElementById('message-area');\r\n  if (messageArea) {\r\n    messageArea.style.display = 'none';\r\n  }\r\n}\r\n\r\n/**\r\n * Converte uma string de data em vários formatos para um objeto Date.\r\n * @param {string} dateString A data no formato \"dd/MM/yyyy\" ou \"yyyy-MM-dd\", podendo conter prefixos.\r\n * @returns {Date|null} O objeto Date ou null se a string for inválida.\r\n */\r\nexport function parseDate(dateString) {\r\n  if (!dateString || typeof dateString !== 'string') return null;\r\n\r\n  // Tenta extrair o primeiro padrão de data válido da string.\r\n  const dateMatch = dateString.match(\r\n    /(\\d{4}-\\d{2}-\\d{2})|(\\d{2}\\/\\d{2}\\/\\d{2,4})/\r\n  );\r\n  if (!dateMatch) return null;\r\n\r\n  const matchedDate = dateMatch[0];\r\n  let year, month, day;\r\n\r\n  // Tenta o formato YYYY-MM-DD\r\n  if (matchedDate.includes('-')) {\r\n    [year, month, day] = matchedDate.split('-').map(Number);\r\n  } else if (matchedDate.includes('/')) {\r\n    // Tenta o formato DD/MM/YYYY\r\n    [day, month, year] = matchedDate.split('/').map(Number);\r\n  }\r\n\r\n  // Valida se os números são válidos e se a data é real\r\n  if (isNaN(year) || isNaN(month) || isNaN(day)) return null;\r\n\r\n  // Lida com anos de 2 dígitos (ex: '24' -> 2024)\r\n  if (year >= 0 && year < 100) {\r\n    year += 2000;\r\n  }\r\n\r\n  const date = new Date(Date.UTC(year, month - 1, day));\r\n\r\n  // Confirma que a data não \"rolou\" para o mês seguinte (ex: 31 de Abril -> 1 de Maio)\r\n  if (\r\n    date.getUTCFullYear() === year &&\r\n    date.getUTCMonth() === month - 1 &&\r\n    date.getUTCDate() === day\r\n  ) {\r\n    return date;\r\n  }\r\n\r\n  return null; // Retorna nulo se a data for inválida (ex: 31/02/2024)\r\n}\r\n\r\n/**\r\n * Obtém um valor aninhado de um objeto de forma segura.\r\n * @param {object} obj O objeto.\r\n * @param {string} path O caminho para a propriedade (ex: 'a.b.c').\r\n * @returns {*} O valor encontrado ou undefined.\r\n */\r\nexport const getNestedValue = (obj, path) => {\r\n  if (!path) return undefined;\r\n  return path.split('.').reduce((acc, part) => acc && acc[part], obj);\r\n};\r\n\r\n/**\r\n * Calcula uma data relativa à data atual com base num desvio em meses.\r\n * @param {number} offsetInMonths - O número de meses a adicionar ou subtrair.\r\n * @returns {Date} O objeto Date resultante.\r\n */\r\nexport function calculateRelativeDate(offsetInMonths) {\r\n  const date = new Date();\r\n  // setMonth lida corretamente com transições de ano e dias do mês\r\n  date.setMonth(date.getMonth() + offsetInMonths);\r\n  return date;\r\n}\r\n\r\n/**\r\n * Retorna 'black' ou 'white' para o texto dependendo do contraste com a cor de fundo.\r\n * @param {string} hexcolor - A cor de fundo em formato hexadecimal (com ou sem #).\r\n * @returns {'black' | 'white'}\r\n */\r\nexport function getContrastYIQ(hexcolor) {\r\n  hexcolor = hexcolor.replace('#', '');\r\n  const r = parseInt(hexcolor.substr(0, 2), 16);\r\n  const g = parseInt(hexcolor.substr(2, 2), 16);\r\n  const b = parseInt(hexcolor.substr(4, 2), 16);\r\n  const yiq = (r * 299 + g * 587 + b * 114) / 1000;\r\n  return yiq >= 128 ? 'black' : 'white';\r\n}\r\n\r\n/**\r\n * Normaliza uma string removendo acentos, cedilha e convertendo para minúsculas.\r\n * @param {string} str - A string a ser normalizada.\r\n * @returns {string} A string normalizada.\r\n */\r\nexport function normalizeString(str) {\r\n  if (!str) return '';\r\n  return str\r\n    .toString()\r\n    .toLowerCase()\r\n    .normalize('NFD')\r\n    .replace(/[\\u0300-\\u036f]/g, '');\r\n}\r\n\r\n/**\r\n * Configura um sistema de abas (tabs) dentro de um container.\r\n * @param {HTMLElement} container - O elemento que contém os botões e os painéis das abas.\r\n */\r\nexport function setupTabs(container) {\r\n  if (!container) return;\r\n\r\n  const tabButtons = container.querySelectorAll('.tab-button');\r\n  const tabContents = container.querySelectorAll('.tab-content');\r\n\r\n  tabButtons.forEach((button) => {\r\n    button.addEventListener('click', () => {\r\n      const tabName = button.dataset.tab;\r\n      tabButtons.forEach((btn) => btn.classList.remove('active'));\r\n      tabContents.forEach((content) => content.classList.remove('active'));\r\n      button.classList.add('active');\r\n      const activeContent = container.querySelector(`#${tabName}-tab`);\r\n      if (activeContent) {\r\n        activeContent.classList.add('active');\r\n      }\r\n    });\r\n  });\r\n}\r\n\r\n/**\r\n * Normalizes data from various sources into a single, sorted timeline event list.\r\n * @param {object} apiData - An object containing arrays of consultations, exams, etc.\r\n * @returns {Array<object>} A sorted array of timeline event objects.\r\n */\r\nexport function normalizeTimelineData(apiData) {\r\n  const events = [];\r\n\r\n  // Normalize Consultations\r\n  try {\r\n    (apiData.consultations || []).forEach((c) => {\r\n      if (!c || !c.date) return;\r\n      const searchText = normalizeString(\r\n        [\r\n          c.specialty,\r\n          c.professional,\r\n          c.unit,\r\n          ...c.details.map((d) => d.value),\r\n        ].join(' ')\r\n      );\r\n      events.push({\r\n        type: 'consultation',\r\n        date: parseDate(c.date.split('\\n')[0]),\r\n        sortableDate: c.sortableDate || parseDate(c.date),\r\n        title: `Consulta: ${c.specialty || 'Especialidade não informada'}`,\r\n        summary: `com ${c.professional || 'Profissional não informado'}`,\r\n        details: c,\r\n        subDetails: c.details || [],\r\n        searchText,\r\n      });\r\n    });\r\n  } catch (e) {\r\n    console.error('Failed to normalize consultation data for timeline:', e);\r\n  }\r\n\r\n  // Normalize Exams\r\n  try {\r\n    (apiData.exams || []).forEach((e) => {\r\n      const eventDate = parseDate(e.date);\r\n      if (!e || !eventDate) return;\r\n      const searchText = normalizeString(\r\n        [e.examName, e.professional, e.specialty].filter(Boolean).join(' ')\r\n      );\r\n      events.push({\r\n        type: 'exam',\r\n        date: eventDate,\r\n        sortableDate: eventDate,\r\n        title: `Exame Solicitado: ${e.examName || 'Nome não informado'}`,\r\n        summary: `Solicitado por ${e.professional || 'Não informado'}`,\r\n        details: e,\r\n        subDetails: [\r\n          {\r\n            label: 'Resultado',\r\n            value: e.hasResult ? 'Disponível' : 'Pendente',\r\n          },\r\n        ],\r\n        searchText,\r\n      });\r\n    });\r\n  } catch (e) {\r\n    console.error('Failed to normalize exam data for timeline:', e);\r\n  }\r\n\r\n  // Normalize Appointments\r\n  try {\r\n    (apiData.appointments || []).forEach((a) => {\r\n      if (!a || !a.date) return;\r\n      const searchText = normalizeString(\r\n        [a.specialty, a.description, a.location, a.professional].join(' ')\r\n      );\r\n      events.push({\r\n        type: 'appointment',\r\n        date: parseDate(a.date),\r\n        sortableDate: parseDate(a.date),\r\n        title: `Agendamento: ${a.specialty || a.description || 'Não descrito'}`,\r\n        summary: a.location || 'Local não informado',\r\n        details: a,\r\n        subDetails: [\r\n          { label: 'Status', value: a.status || 'N/A' },\r\n          { label: 'Hora', value: a.time || 'N/A' },\r\n        ],\r\n        searchText,\r\n      });\r\n    });\r\n  } catch (e) {\r\n    console.error('Failed to normalize appointment data for timeline:', e);\r\n  }\r\n\r\n  // Normalize Regulations\r\n  try {\r\n    (apiData.regulations || []).forEach((r) => {\r\n      if (!r || !r.date) return;\r\n      const searchText = normalizeString(\r\n        [r.procedure, r.requester, r.provider, r.cid].join(' ')\r\n      );\r\n      events.push({\r\n        type: 'regulation',\r\n        date: parseDate(r.date),\r\n        sortableDate: parseDate(r.date),\r\n        title: `Regulação: ${r.procedure || 'Procedimento não informado'}`,\r\n        summary: `Solicitante: ${r.requester || 'Não informado'}`,\r\n        details: r,\r\n        subDetails: [\r\n          { label: 'Status', value: r.status || 'N/A' },\r\n          { label: 'Prioridade', value: r.priority || 'N/A' },\r\n        ],\r\n        searchText,\r\n      });\r\n    });\r\n  } catch (e) {\r\n    console.error('Failed to normalize regulation data for timeline:', e);\r\n  }\r\n\r\n  // --- INÍCIO DA MODIFICAÇÃO ---\r\n  // Normalize Documents\r\n  try {\r\n    (apiData.documents || []).forEach((doc) => {\r\n      if (!doc || !doc.date) return;\r\n      const searchText = normalizeString(doc.description || '');\r\n      events.push({\r\n        type: 'document',\r\n        date: parseDate(doc.date),\r\n        sortableDate: parseDate(doc.date),\r\n        title: `Documento: ${doc.description || 'Sem descrição'}`,\r\n        summary: `Tipo: ${doc.fileType.toUpperCase()}`,\r\n        details: doc,\r\n        subDetails: [],\r\n        searchText,\r\n      });\r\n    });\r\n  } catch (e) {\r\n    console.error('Failed to normalize document data for timeline:', e);\r\n  }\r\n  // --- FIM DA MODIFICAÇÃO ---\r\n\r\n  // Filter out events with invalid dates and sort all events by date, newest first.\r\n  return events\r\n    .filter(\r\n      (event) =>\r\n        event.sortableDate instanceof Date && !isNaN(event.sortableDate)\r\n    )\r\n    .sort((a, b) => b.sortableDate - a.sortableDate);\r\n}\r\n\r\n/**\r\n * Filters timeline events based on automation rule filters.\r\n * @param {Array<object>} events - The full array of timeline events.\r\n * @param {object} automationFilters - The filter settings from an automation rule.\r\n * @returns {Array<object>} A new array with the filtered events.\r\n */\r\nexport function filterTimelineEvents(events, automationFilters) {\r\n  if (!automationFilters) return events;\r\n\r\n  const checkText = (text, filterValue) => {\r\n    if (!filterValue) return true; // If filter is empty, it passes\r\n    const terms = filterValue\r\n      .toLowerCase()\r\n      .split(',')\r\n      .map((t) => t.trim())\r\n      .filter(Boolean);\r\n    if (terms.length === 0) return true;\r\n    const normalizedText = normalizeString(text || '');\r\n    return terms.some((term) => normalizedText.includes(term));\r\n  };\r\n\r\n  return events.filter((event) => {\r\n    try {\r\n      switch (event.type) {\r\n      case 'consultation': {\r\n        const consultFilters = automationFilters.consultations || {};\r\n        // Procura por um campo rotulado como CID ou CIAP para uma busca precisa.\r\n        const cidDetail = (event.details.details || []).find(\r\n          (d) =>\r\n            normalizeString(d.label).includes('cid') ||\r\n              normalizeString(d.label).includes('ciap')\r\n        );\r\n        const cidText = cidDetail ? cidDetail.value : '';\r\n        return (\r\n          checkText(\r\n            event.details.specialty,\r\n            consultFilters['consultation-filter-specialty']\r\n          ) &&\r\n            checkText(\r\n              event.details.professional,\r\n              consultFilters['consultation-filter-professional']\r\n            ) &&\r\n            checkText(cidText, consultFilters['consultation-filter-cid'])\r\n        );\r\n      }\r\n\r\n      case 'exam': {\r\n        const examFilters = automationFilters.exams || {};\r\n        return (\r\n          checkText(\r\n            event.details.examName,\r\n            examFilters['exam-filter-name']\r\n          ) &&\r\n            checkText(\r\n              event.details.professional,\r\n              examFilters['exam-filter-professional']\r\n            ) &&\r\n            checkText(\r\n              event.details.specialty,\r\n              examFilters['exam-filter-specialty']\r\n            )\r\n        );\r\n      }\r\n\r\n      case 'appointment': {\r\n        const apptFilters = automationFilters.appointments || {};\r\n        const apptText = `${event.details.specialty} ${event.details.professional} ${event.details.location}`;\r\n        return checkText(apptText, apptFilters['appointment-filter-term']);\r\n      }\r\n\r\n      case 'regulation': {\r\n        const regFilters = automationFilters.regulations || {};\r\n        return (\r\n          checkText(\r\n            event.details.procedure,\r\n            regFilters['regulation-filter-procedure']\r\n          ) &&\r\n            checkText(\r\n              event.details.requester,\r\n              regFilters['regulation-filter-requester']\r\n            ) &&\r\n            (regFilters['regulation-filter-status'] === 'todos' ||\r\n              !regFilters['regulation-filter-status'] ||\r\n              event.details.status.toUpperCase() ===\r\n                regFilters['regulation-filter-status'].toUpperCase()) &&\r\n            (regFilters['regulation-filter-priority'] === 'todas' ||\r\n              !regFilters['regulation-filter-priority'] ||\r\n              event.details.priority.toUpperCase() ===\r\n                regFilters['regulation-filter-priority'].toUpperCase())\r\n        );\r\n      }\r\n\r\n      default:\r\n        return true;\r\n      }\r\n    } catch (e) {\r\n      console.warn(\r\n        'Error filtering timeline event, it will be included by default:',\r\n        event,\r\n        e\r\n      );\r\n      return true;\r\n    }\r\n  });\r\n}\r\n"],"names":[],"sourceRoot":""}