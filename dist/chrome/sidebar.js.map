{"version":3,"file":"sidebar.js","mappings":";;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AAEA;AAEA;AAEA;AAEA;AAEA;AAEA;AAEA;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAIA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AAYA;AAMA;AAKA;AAKA;AAMA;AACA;AAEA;AACA;AAEA;AAKA;AAKA;AAMA;AACA;AAEA;AACA;AACA;AAEA;AACA;AAGA;AAEA;AACA;AAGA;AACA;AAGA;AAEA;AAKA;AAMA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AAGA;AAEA;AACA;AAGA;AAEA;AAKA;AAMA;AACA;AAEA;AAAA;AACA;;AAEA;AACA;AAGA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AAMA;AACA;AAEA;AACA;AAAA;AACA;AAAA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAKA;AACA;;AAEA;AACA;AACA;AACA;AAAA;AAAA;AAAA;;AAEA;AACA;AAIA;AACA;AAIA;AAIA;AACA;AAEA;AACA;AACA;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAIA;AACA;AAEA;AACA;AAGA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AAIA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AAKA;AAEA;AACA;AACA;AAEA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAGA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;;AAEA;AACA;;AAGA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAKA;AACA;AACA;AAKA;AACA;AAEA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAEA;AAOA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAEA;AACA;AACA;AAEA;AACA;AAEA;AAEA;AACA;AAEA;AAGA;AACA;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AAAA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AAKA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AAIA;AACA;AACA;AACA;AAIA;AACA;AACA;AACA;AACA;AAEA;AACA;AAAA;AAAA;AACA;AACA;AACA;AAEA;AASA;AACA;AACA;AAIA;AACA;AACA;AACA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAGA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAAA;AAEA;AACA;AAAA;AAAA;AACA;AACA;AAIA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AAGA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAAA;AAAA;AACA;AACA;AAGA;AACA;AAAA;AAAA;AACA;AACA;AAEA;AACA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAAA;AAAA;AAAA;AACA;AACA;AAEA;AACA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAAA;AAAA;AAAA;AAEA;AACA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAIA;AACA;AACA;AACA;AAEA;AAAA;AACA;AAEA;AACA;AAIA;AACA;AACA;AAIA;AAIA;AAIA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAAA;AACA;AAEA;AACA;AACA;AAIA;AAIA;AAIA;AACA;AAEA;AACA;AAEA;AACA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAIA;AACA;AAEA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AAIA;AAEA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AAIA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAMA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAAA;AAAA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;;;;;;AC5jCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;AC1BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;AC3BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;ACPA;;;;;ACAA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;ACNA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;AEhDA;AACA;AACA;AACA;AACA","sources":["webpack://assistente-de-regulacao-medica/./sidebar.js","webpack://assistente-de-regulacao-medica/webpack/bootstrap","webpack://assistente-de-regulacao-medica/webpack/runtime/chunk loaded","webpack://assistente-de-regulacao-medica/webpack/runtime/define property getters","webpack://assistente-de-regulacao-medica/webpack/runtime/hasOwnProperty shorthand","webpack://assistente-de-regulacao-medica/webpack/runtime/make namespace object","webpack://assistente-de-regulacao-medica/webpack/runtime/jsonp chunk loading","webpack://assistente-de-regulacao-medica/webpack/before-startup","webpack://assistente-de-regulacao-medica/webpack/startup","webpack://assistente-de-regulacao-medica/webpack/after-startup"],"sourcesContent":["import * as API from './api.js';\r\nimport './browser-polyfill.js';\r\nimport { defaultFieldConfig } from './field-config.js';\r\nimport * as Renderers from './renderers.js';\r\nimport { SectionManager } from './SectionManager.js';\r\nimport { store } from './store.js';\r\nimport { TimelineManager } from './TimelineManager.js'; // Importa o novo gestor\r\nimport * as PatientCard from './ui/patient-card.js';\r\nimport * as Search from './ui/search.js';\r\nimport * as Utils from './utils.js';\r\n\r\n// --- ÍCONES ---\r\nconst sectionIcons = {\r\n  'patient-details':\r\n    '<svg xmlns=\"http://www.w3.org/2000/svg\" width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"1.5\" stroke-linecap=\"round\" stroke-linejoin=\"round\" class=\"lucide lucide-user-round-check-icon lucide-user-round-check\"><path d=\"M2 21a8 8 0 0 1 13.292-6\"/><circle cx=\"10\" cy=\"8\" r=\"5\"/><path d=\"m16 19 2 2 4-4\"/></svg>',\r\n  timeline:\r\n    '<svg xmlns=\"http://www.w3.org/2000/svg\" width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"1.5\" stroke-linecap=\"round\" stroke-linejoin=\"round\" class=\"lucide lucide-gantt-chart\"><path d=\"M8 6h10\"/><path d=\"M6 12h9\"/><path d=\"M11 18h7\"/></svg>',\r\n  regulations:\r\n    '<svg xmlns=\"http://www.w3.org/2000/svg\" width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"1.5\" stroke-linecap=\"round\" stroke-linejoin=\"round\" class=\"lucide lucide-shield-check-icon lucide-shield-check\"><path d=\"M20 13c0 5-3.5 7.5-7.66 8.95a1 1 0 0 1-.67-.01C7.5 20.5 4 18 4 13V6a1 1 0 0 1 1-1c2 0 4.5-1.2 6.24-2.72a1.17 1.17 0 0 1 1.52 0C14.51 3.81 17 5 19 5a1 1 0 0 1 1 1z\"/><path d=\"m9 12 2 2 4-4\"/></svg>',\r\n  consultations:\r\n    '<svg xmlns=\"http://www.w3.org/2000/svg\" width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"1.5\" stroke-linecap=\"round\" stroke-linejoin=\"round\" class=\"lucide lucide-stethoscope-icon lucide-stethoscope\"><path d=\"M11 2v2\"/><path d=\"M5 2v2\"/><path d=\"M5 3H4a2 2 0 0 0-2 2v4a6 6 0 0 0 12 0V5a2 2 0 0 0-2-2h-1\"/><path d=\"M8 15a6 6 0 0 0 12 0v-3\"/><circle cx=\"20\" cy=\"10\" r=\"2\"/></svg>',\r\n  exams:\r\n    '<svg xmlns=\"http://www.w3.org/2000/svg\" width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"1.5\" stroke-linecap=\"round\" stroke-linejoin=\"round\" class=\"lucide lucide-microscope-icon lucide-microscope\"><path d=\"M6 18h8\"/><path d=\"M3 22h18\"/><path d=\"M14 22a7 7 0 1 0 0-14h-1\"/><path d=\"M9 14h2\"/><path d=\"M9 12a2 2 0 0 1-2-2V6h6v4a2 2 0 0 1-2 2Z\"/><path d=\"M12 6V3a1 1 0 0 0-1-1H9a1 1 0 0 0-1 1v3\"/></svg>',\r\n  appointments:\r\n    '<svg xmlns=\"http://www.w3.org/2000/svg\" width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"1.5\" stroke-linecap=\"round\" stroke-linejoin=\"round\" class=\"lucide lucide-calendar-check-icon lucide-calendar-check\"><path d=\"M8 2v4\"/><path d=\"M16 2v4\"/><rect width=\"18\" height=\"18\" x=\"3\" y=\"4\" rx=\"2\"/><path d=\"M3 10h18\"/><path d=\"m9 16 2 2 4-4\"/></svg>',\r\n  documents:\r\n    '<svg xmlns=\"http://www.w3.org/2000/svg\" class=\"lucide lucide-file-text\" width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"1.5\" stroke-linecap=\"round\" stroke-linejoin=\"round\"><path d=\"M14 2H6a2 2 0 0 0-2 2v16a2 2 0 0 0 2 2h12a2 2 0 0 0 2-2V8Z\"/><path d=\"M14 2v6h6\"/><path d=\"M16 13H8\"/><path d=\"M16 17H8\"/></svg>',\r\n};\r\n\r\nlet currentRegulationData = null;\r\nconst sectionManagers = {}; // Objeto para armazenar instâncias de SectionManager\r\n\r\n// --- FUNÇÃO AUXILIAR DE FILTRAGEM ---\r\n/**\r\n * Aplica um filtro de texto normalizado a um array de dados.\r\n * @param {Array} items - O array de itens a ser filtrado.\r\n * @param {string} text - O texto de busca (pode conter múltiplos termos separados por vírgula).\r\n * @param {Function} getFieldContent - Uma função que recebe um item e retorna a string a ser pesquisada.\r\n * @returns {Array} O array de itens filtrado.\r\n */\r\nconst applyNormalizedTextFilter = (items, text, getFieldContent) => {\r\n  const searchTerms = Utils.normalizeString(text)\r\n    .split(',')\r\n    .map((t) => t.trim())\r\n    .filter(Boolean);\r\n  if (searchTerms.length === 0) return items;\r\n  return items.filter((item) => {\r\n    const content = Utils.normalizeString(getFieldContent(item));\r\n    return searchTerms.some((term) => content.includes(term));\r\n  });\r\n};\r\n\r\n// --- LÓGICA DE FILTRAGEM ---\r\nconst consultationFilterLogic = (data, filters) => {\r\n  let filteredData = [...data];\r\n  if (filters['hide-no-show-checkbox']) {\r\n    filteredData = filteredData.filter((c) => !c.isNoShow);\r\n  }\r\n\r\n  filteredData = applyNormalizedTextFilter(\r\n    filteredData,\r\n    filters['consultation-filter-keyword'],\r\n    (c) =>\r\n      [\r\n        c.specialty,\r\n        c.professional,\r\n        c.unit,\r\n        ...c.details.map((d) => `${d.label} ${d.value}`),\r\n      ].join(' ')\r\n  );\r\n\r\n  filteredData = applyNormalizedTextFilter(\r\n    filteredData,\r\n    filters['consultation-filter-cid'],\r\n    (c) => c.details.map((d) => d.value).join(' ')\r\n  );\r\n\r\n  filteredData = applyNormalizedTextFilter(\r\n    filteredData,\r\n    filters['consultation-filter-specialty'],\r\n    (c) => c.specialty || ''\r\n  );\r\n  filteredData = applyNormalizedTextFilter(\r\n    filteredData,\r\n    filters['consultation-filter-professional'],\r\n    (c) => c.professional || ''\r\n  );\r\n  filteredData = applyNormalizedTextFilter(\r\n    filteredData,\r\n    filters['consultation-filter-unit'],\r\n    (c) => c.unit || ''\r\n  );\r\n\r\n  return filteredData;\r\n};\r\n\r\nconst examFilterLogic = (data, filters) => {\r\n  let filteredData = [...data];\r\n\r\n  filteredData = applyNormalizedTextFilter(\r\n    filteredData,\r\n    filters['exam-filter-name'],\r\n    (item) => item.examName\r\n  );\r\n  filteredData = applyNormalizedTextFilter(\r\n    filteredData,\r\n    filters['exam-filter-professional'],\r\n    (item) => item.professional\r\n  );\r\n  filteredData = applyNormalizedTextFilter(\r\n    filteredData,\r\n    filters['exam-filter-specialty'],\r\n    (item) => item.specialty\r\n  );\r\n\r\n  return filteredData;\r\n};\r\n\r\nconst appointmentFilterLogic = (data, filters, fetchType) => {\r\n  let filteredData = [...data];\r\n  const status = filters['appointment-filter-status'] || 'todos';\r\n\r\n  if (status !== 'todos') {\r\n    filteredData = filteredData.filter(\r\n      (a) => (a.status || '').toUpperCase() === status.toUpperCase()\r\n    );\r\n  }\r\n\r\n  if (fetchType === 'consultas') {\r\n    filteredData = filteredData.filter(\r\n      (a) => !a.type.toUpperCase().includes('EXAME')\r\n    );\r\n  } else if (fetchType === 'exames') {\r\n    filteredData = filteredData.filter((a) =>\r\n      a.type.toUpperCase().includes('EXAME')\r\n    );\r\n  }\r\n\r\n  filteredData = applyNormalizedTextFilter(\r\n    filteredData,\r\n    filters['appointment-filter-term'],\r\n    (a) => [a.professional, a.specialty, a.description].join(' ')\r\n  );\r\n  filteredData = applyNormalizedTextFilter(\r\n    filteredData,\r\n    filters['appointment-filter-location'],\r\n    (a) => a.location || ''\r\n  );\r\n\r\n  return filteredData;\r\n};\r\n\r\nconst regulationFilterLogic = (data, filters) => {\r\n  let filteredData = [...data];\r\n  const status = filters['regulation-filter-status'] || 'todos';\r\n  const priority = filters['regulation-filter-priority'] || 'todas';\r\n\r\n  if (status !== 'todos') {\r\n    filteredData = filteredData.filter(\r\n      (item) => (item.status || '').toUpperCase() === status.toUpperCase()\r\n    );\r\n  }\r\n\r\n  if (priority !== 'todas') {\r\n    filteredData = filteredData.filter(\r\n      (item) => (item.priority || '').toUpperCase() === priority.toUpperCase()\r\n    );\r\n  }\r\n\r\n  filteredData = applyNormalizedTextFilter(\r\n    filteredData,\r\n    filters['regulation-filter-procedure'],\r\n    (item) => item.procedure || ''\r\n  );\r\n  filteredData = applyNormalizedTextFilter(\r\n    filteredData,\r\n    filters['regulation-filter-requester'],\r\n    (item) => item.requester || ''\r\n  );\r\n\r\n  return filteredData;\r\n};\r\n\r\nconst documentFilterLogic = (data, filters) => {\r\n  let filteredData = [...data];\r\n\r\n  // Filtro por data (client-side)\r\n  const startDateValue = document.getElementById(\r\n    'document-date-initial'\r\n  )?.value;\r\n  const endDateValue = document.getElementById('document-date-final')?.value;\r\n\r\n  if (startDateValue) {\r\n    const start = Utils.parseDate(startDateValue);\r\n    if (start) {\r\n      filteredData = filteredData.filter((doc) => {\r\n        const docDate = Utils.parseDate(doc.date.split(' ')[0]);\r\n        return docDate && docDate >= start;\r\n      });\r\n    }\r\n  }\r\n\r\n  if (endDateValue) {\r\n    const end = Utils.parseDate(endDateValue);\r\n    if (end) {\r\n      filteredData = filteredData.filter((doc) => {\r\n        const docDate = Utils.parseDate(doc.date.split(' ')[0]);\r\n        return docDate && docDate <= end;\r\n      });\r\n    }\r\n  }\r\n\r\n  // Filtro por palavra-chave normalizada\r\n  filteredData = applyNormalizedTextFilter(\r\n    filteredData,\r\n    filters['document-filter-keyword'],\r\n    (doc) => doc.description || ''\r\n  );\r\n\r\n  return filteredData;\r\n};\r\n\r\nconst sectionConfigurations = {\r\n  'patient-details': {}, // Seção especial sem fetch\r\n  timeline: {}, // Configuração da Timeline será tratada pelo seu próprio gestor\r\n  consultations: {\r\n    fetchFunction: API.fetchAllConsultations,\r\n    renderFunction: Renderers.renderConsultations,\r\n    initialSortState: { key: 'sortableDate', order: 'desc' },\r\n    filterLogic: consultationFilterLogic,\r\n  },\r\n  exams: {\r\n    fetchFunction: API.fetchExamesSolicitados,\r\n    renderFunction: Renderers.renderExams,\r\n    initialSortState: { key: 'date', order: 'desc' },\r\n    filterLogic: examFilterLogic,\r\n  },\r\n  appointments: {\r\n    fetchFunction: API.fetchAppointments,\r\n    renderFunction: Renderers.renderAppointments,\r\n    initialSortState: { key: 'date', order: 'desc' },\r\n    filterLogic: appointmentFilterLogic,\r\n  },\r\n  regulations: {\r\n    fetchFunction: API.fetchAllRegulations,\r\n    renderFunction: Renderers.renderRegulations,\r\n    initialSortState: { key: 'date', order: 'desc' },\r\n    filterLogic: regulationFilterLogic,\r\n  },\r\n  documents: {\r\n    fetchFunction: API.fetchDocuments,\r\n    renderFunction: Renderers.renderDocuments,\r\n    initialSortState: { key: 'date', order: 'desc' },\r\n    filterLogic: documentFilterLogic,\r\n  },\r\n};\r\n\r\n// --- FUNÇÕES DE ESTILO E ÍCONES ---\r\n\r\n/**\r\n * Injeta os ícones SVG nos cabeçalhos das seções.\r\n */\r\nfunction applySectionIcons() {\r\n  for (const sectionKey in sectionIcons) {\r\n    const iconContainer = document.getElementById(`${sectionKey}-section-icon`);\r\n    if (iconContainer) {\r\n      iconContainer.innerHTML = sectionIcons[sectionKey];\r\n    }\r\n  }\r\n}\r\n\r\n/**\r\n * Lê os estilos customizados do storage e os aplica aos cabeçalhos\r\n * usando Variáveis CSS (CSS Custom Properties) para melhor performance e manutenibilidade.\r\n * @param {object} styles - O objeto de estilos vindo do storage.\r\n */\r\nfunction applyCustomHeaderStyles(styles) {\r\n  // O CSS base com as variáveis e fallbacks já está definido em sidebar.html.\r\n  // Esta função apenas define os valores das variáveis para cada seção.\r\n\r\n  const defaultStyles = {\r\n    backgroundColor: '#ffffff',\r\n    color: '#1e293b',\r\n    iconColor: '#1e293b',\r\n    fontSize: '16px',\r\n  };\r\n\r\n  for (const sectionKey in sectionIcons) {\r\n    const sectionId =\r\n      sectionKey === 'patient-details'\r\n        ? 'patient-details-section'\r\n        : `${sectionKey}-section`;\r\n\r\n    const sectionElement = document.getElementById(sectionId);\r\n    if (!sectionElement) continue;\r\n\r\n    // Pega o estilo salvo para a seção ou usa um objeto vazio.\r\n    const savedStyle = styles[sectionKey] || {};\r\n    // Combina com os padrões para garantir que todas as propriedades existam.\r\n    const finalStyle = { ...defaultStyles, ...savedStyle };\r\n\r\n    // Define as variáveis CSS no elemento da seção.\r\n    sectionElement.style.setProperty(\r\n      '--section-bg-color',\r\n      finalStyle.backgroundColor\r\n    );\r\n    sectionElement.style.setProperty('--section-font-color', finalStyle.color);\r\n    sectionElement.style.setProperty(\r\n      '--section-icon-color',\r\n      finalStyle.iconColor\r\n    );\r\n    sectionElement.style.setProperty(\r\n      '--section-font-size',\r\n      finalStyle.fontSize\r\n    );\r\n  }\r\n}\r\n\r\nasync function selectPatient(patientInfo, forceRefresh = false) {\r\n  const currentPatient = store.getPatient();\r\n  if (\r\n    currentPatient &&\r\n    currentPatient.ficha.isenPK.idp === patientInfo.idp &&\r\n    !forceRefresh\r\n  ) {\r\n    return;\r\n  }\r\n  Utils.toggleLoader(true);\r\n  Utils.clearMessage();\r\n  store.setPatientUpdating();\r\n  try {\r\n    const ficha = await API.fetchVisualizaUsuario(patientInfo);\r\n    const cadsus = await API.fetchCadsusData({\r\n      cpf: Utils.getNestedValue(ficha, 'entidadeFisica.entfCPF'),\r\n      cns: ficha.isenNumCadSus,\r\n    });\r\n    Object.values(sectionManagers).forEach((manager) => {\r\n      if (typeof manager.clearAutomationFeedbackAndFilters === 'function') {\r\n        manager.clearAutomationFeedbackAndFilters(false);\r\n      } else if (typeof manager.clearAutomation === 'function') {\r\n        manager.clearAutomation();\r\n      }\r\n    });\r\n    store.setPatient(ficha, cadsus);\r\n    await updateRecentPatients(store.getPatient());\r\n  } catch (error) {\r\n    Utils.showMessage(error.message, 'error');\r\n    console.error(error);\r\n    store.clearPatient();\r\n  } finally {\r\n    Utils.toggleLoader(false);\r\n  }\r\n}\r\n\r\nasync function init() {\r\n  let baseUrlConfigured = true;\r\n\r\n  try {\r\n    await API.getBaseUrl();\r\n  } catch (error) {\r\n    if (error?.message === 'URL_BASE_NOT_CONFIGURED') {\r\n      baseUrlConfigured = false;\r\n\r\n      const mainContent = document.getElementById('main-content');\r\n      const urlWarning = document.getElementById('url-config-warning');\r\n      const openOptions = document.getElementById('open-options-from-warning');\r\n      const reloadSidebar = document.getElementById(\r\n        'reload-sidebar-from-warning'\r\n      );\r\n\r\n      if (mainContent) mainContent.classList.add('hidden');\r\n      if (urlWarning) urlWarning.classList.remove('hidden');\r\n\r\n      if (openOptions) {\r\n        openOptions.addEventListener('click', () =>\r\n          browser.runtime.openOptionsPage()\r\n        );\r\n      }\r\n      if (reloadSidebar) {\r\n        reloadSidebar.addEventListener('click', () => window.location.reload());\r\n      }\r\n\r\n      // **não retornamos mais aqui**, apenas marcamos que deu “fallback”\r\n    } else {\r\n      console.error('Initialization failed:', error);\r\n      Utils.showMessage(\r\n        'Ocorreu um erro inesperado ao iniciar a extensão.',\r\n        'error'\r\n      );\r\n      // nesse caso você pode querer return ou throw de verdade\r\n      return;\r\n    }\r\n  }\r\n\r\n  // === setup das abas: sempre rodar, mesmo sem baseURL ===\r\n  Utils.setupTabs(document.getElementById('layout-tabs-container'));\r\n  Utils.setupTabs(document.getElementById('patterns-tabs-container'));\r\n  // (adicione aqui quaisquer outros containers de aba que tenha)\r\n\r\n  // === só o resto do fluxo principal depende de baseUrlConfigured ===\r\n  if (!baseUrlConfigured) {\r\n    // já mostramos o formulário de URL, não temos mais nada a fazer\r\n    return;\r\n  }\r\n\r\n  // agora vem tudo o que precisa de baseURL\r\n  const [globalSettings, regulationPriorities] = await Promise.all([\r\n    loadConfigAndData(),\r\n    API.fetchRegulationPriorities(),\r\n  ]);\r\n\r\n  globalSettings.regulationPriorities = regulationPriorities;\r\n\r\n  applySectionIcons();\r\n  applyCustomHeaderStyles(globalSettings.sectionHeaderStyles);\r\n  applySectionOrder(globalSettings.sidebarSectionOrder);\r\n\r\n  Search.init({ onSelectPatient: selectPatient });\r\n  PatientCard.init(globalSettings.fieldConfigLayout, {\r\n    onForceRefresh: selectPatient,\r\n  });\r\n  initializeSections(globalSettings);\r\n  applyUserPreferences(globalSettings);\r\n  addGlobalEventListeners();\r\n  setupAutoModeToggle();\r\n\r\n  await checkForPendingRegulation();\r\n}\r\n\r\nasync function loadConfigAndData() {\r\n  const syncData = await browser.storage.sync.get({\r\n    patientFields: defaultFieldConfig,\r\n    filterLayout: {},\r\n    autoLoadExams: false,\r\n    autoLoadConsultations: false,\r\n    autoLoadAppointments: false,\r\n    autoLoadRegulations: false,\r\n    autoLoadDocuments: false,\r\n    enableAutomaticDetection: true,\r\n    dateRangeDefaults: {},\r\n    sidebarSectionOrder: [],\r\n    sectionHeaderStyles: {}, // Carrega a nova configuração de estilos\r\n  });\r\n  const localData = await browser.storage.local.get({\r\n    recentPatients: [],\r\n    savedFilterSets: {},\r\n    automationRules: [],\r\n  });\r\n  store.setRecentPatients(localData.recentPatients);\r\n  store.setSavedFilterSets(localData.savedFilterSets);\r\n\r\n  return {\r\n    fieldConfigLayout: defaultFieldConfig.map((defaultField) => {\r\n      const savedField = syncData.patientFields.find(\r\n        (f) => f.id === defaultField.id\r\n      );\r\n      return savedField ? { ...defaultField, ...savedField } : defaultField;\r\n    }),\r\n    filterLayout: syncData.filterLayout,\r\n    userPreferences: {\r\n      autoLoadExams: syncData.autoLoadExams,\r\n      autoLoadConsultations: syncData.autoLoadConsultations,\r\n      autoLoadAppointments: syncData.autoLoadAppointments,\r\n      autoLoadRegulations: syncData.autoLoadRegulations,\r\n      autoLoadDocuments: syncData.autoLoadDocuments,\r\n      enableAutomaticDetection: syncData.enableAutomaticDetection,\r\n      dateRangeDefaults: syncData.dateRangeDefaults,\r\n    },\r\n    sidebarSectionOrder: syncData.sidebarSectionOrder,\r\n    sectionHeaderStyles: syncData.sectionHeaderStyles, // Passa os estilos para frente\r\n  };\r\n}\r\n\r\nfunction applySectionOrder(order) {\r\n  const mainContent = document.getElementById('main-content');\r\n  if (!mainContent) return;\r\n\r\n  const sectionMap = {\r\n    'patient-details': 'patient-details-section',\r\n    timeline: 'timeline-section',\r\n    regulations: 'regulations-section',\r\n    consultations: 'consultations-section',\r\n    exams: 'exams-section',\r\n    appointments: 'appointments-section',\r\n    documents: 'documents-section',\r\n  };\r\n\r\n  const patientCardId = 'patient-details';\r\n\r\n  // Pega a ordem salva ou a ordem padrão do DOM\r\n  const savedOrder =\r\n    order && order.length > 0 ? order : Object.keys(sectionMap);\r\n\r\n  // Garante que a ficha do paciente esteja sempre no topo\r\n  // 1. Remove a ficha da ordem atual, não importa onde esteja.\r\n  const finalOrder = savedOrder.filter((id) => id !== patientCardId);\r\n  // 2. Adiciona a ficha no início da lista.\r\n  finalOrder.unshift(patientCardId);\r\n\r\n  // Adiciona quaisquer novas seções (não presentes na ordem salva) ao final\r\n  const knownIds = new Set(finalOrder);\r\n  Object.keys(sectionMap).forEach((id) => {\r\n    if (!knownIds.has(id)) {\r\n      finalOrder.push(id);\r\n    }\r\n  });\r\n\r\n  // Reordena os elementos no DOM\r\n  finalOrder.forEach((tabId) => {\r\n    const sectionId = sectionMap[tabId];\r\n    const sectionElement = document.getElementById(sectionId);\r\n    if (sectionElement) {\r\n      mainContent.appendChild(sectionElement);\r\n    }\r\n  });\r\n}\r\n\r\nfunction initializeSections(globalSettings) {\r\n  Object.keys(sectionConfigurations).forEach((key) => {\r\n    if (key === 'patient-details') return;\r\n    if (key === 'timeline') {\r\n      sectionManagers[key] = new TimelineManager(\r\n        key,\r\n        sectionConfigurations[key],\r\n        globalSettings\r\n      );\r\n      return;\r\n    }\r\n    sectionManagers[key] = new SectionManager(\r\n      key,\r\n      sectionConfigurations[key],\r\n      globalSettings\r\n    );\r\n  });\r\n}\r\n\r\nfunction applyUserPreferences(globalSettings) {\r\n  const { userPreferences, filterLayout } = globalSettings;\r\n  const { dateRangeDefaults } = userPreferences;\r\n\r\n  const sections = [\r\n    'consultations',\r\n    'exams',\r\n    'appointments',\r\n    'regulations',\r\n    'documents',\r\n  ];\r\n  const defaultSystemRanges = {\r\n    consultations: { start: -6, end: 0 },\r\n    exams: { start: -6, end: 0 },\r\n    appointments: { start: -1, end: 3 },\r\n    regulations: { start: -12, end: 0 },\r\n    documents: { start: -24, end: 0 },\r\n  };\r\n\r\n  sections.forEach((section) => {\r\n    const range = dateRangeDefaults[section] || defaultSystemRanges[section];\r\n    const prefix = section.replace(/s$/, '');\r\n\r\n    const initialEl = document.getElementById(`${prefix}-date-initial`);\r\n    const finalEl = document.getElementById(`${prefix}-date-final`);\r\n\r\n    if (initialEl)\r\n      initialEl.valueAsDate = Utils.calculateRelativeDate(range.start);\r\n    if (finalEl) finalEl.valueAsDate = Utils.calculateRelativeDate(range.end);\r\n  });\r\n\r\n  Object.values(filterLayout)\r\n    .flat()\r\n    .forEach((filterSetting) => {\r\n      const el = document.getElementById(filterSetting.id);\r\n      if (\r\n        el &&\r\n        filterSetting.defaultValue !== undefined &&\r\n        filterSetting.defaultValue !== null\r\n      ) {\r\n        if (el.type === 'checkbox') {\r\n          el.checked = filterSetting.defaultValue;\r\n        } else {\r\n          el.value = filterSetting.defaultValue;\r\n        }\r\n      }\r\n    });\r\n}\r\n\r\nfunction setupAutoModeToggle() {\r\n  const toggle = document.getElementById('auto-mode-toggle');\r\n  const label = document.getElementById('auto-mode-label');\r\n\r\n  browser.storage.sync\r\n    .get({ enableAutomaticDetection: true })\r\n    .then((settings) => {\r\n      toggle.checked = settings.enableAutomaticDetection;\r\n      label.textContent = settings.enableAutomaticDetection ? 'Auto' : 'Manual';\r\n    });\r\n\r\n  toggle.addEventListener('change', (event) => {\r\n    const isEnabled = event.target.checked;\r\n    browser.storage.sync.set({ enableAutomaticDetection: isEnabled });\r\n    label.textContent = isEnabled ? 'Auto' : 'Manual';\r\n  });\r\n}\r\n\r\nasync function handleRegulationLoaded(regulationData) {\r\n  Utils.toggleLoader(true);\r\n  try {\r\n    currentRegulationData = regulationData;\r\n\r\n    if (\r\n      regulationData &&\r\n      regulationData.isenPKIdp &&\r\n      regulationData.isenPKIds\r\n    ) {\r\n      const patientInfo = {\r\n        idp: regulationData.isenPKIdp,\r\n        ids: regulationData.isenPKIds,\r\n      };\r\n      await selectPatient(patientInfo);\r\n\r\n      const contextName =\r\n        regulationData.apcnNome || regulationData.prciNome || 'Contexto';\r\n      const infoBtn = document.getElementById('context-info-btn');\r\n      infoBtn.title = `Contexto: ${contextName.trim()}`;\r\n      infoBtn.classList.remove('hidden');\r\n\r\n      await applyAutomationRules(regulationData);\r\n    } else {\r\n      currentRegulationData = null;\r\n      Utils.showMessage(\r\n        'Não foi possível extrair os dados do paciente da regulação.',\r\n        'error'\r\n      );\r\n    }\r\n  } catch (error) {\r\n    currentRegulationData = null;\r\n    Utils.showMessage(\r\n      `Erro ao processar a regulação: ${error.message}`,\r\n      'error'\r\n    );\r\n    console.error('Erro ao processar a regulação:', error);\r\n  } finally {\r\n    Utils.toggleLoader(false);\r\n  }\r\n}\r\n\r\nasync function applyAutomationRules(regulationData) {\r\n  const { automationRules } = await browser.storage.local.get({\r\n    automationRules: [],\r\n  });\r\n  if (!automationRules || automationRules.length === 0) return;\r\n\r\n  const contextString = [\r\n    regulationData.prciNome || '',\r\n    regulationData.prciCodigo || '',\r\n    regulationData.apcnNome || '',\r\n    regulationData.apcnCod || '',\r\n  ]\r\n    .join(' ')\r\n    .toLowerCase();\r\n\r\n  for (const rule of automationRules) {\r\n    if (rule.isActive) {\r\n      const hasMatch = rule.triggerKeywords.some((keyword) =>\r\n        contextString.includes(keyword.toLowerCase().trim())\r\n      );\r\n\r\n      if (hasMatch) {\r\n        // Aplicar filtros nas seções existentes E na nova timeline\r\n        Object.entries(sectionManagers).forEach(([key, manager]) => {\r\n          if (\r\n            rule.filterSettings[key] &&\r\n            typeof manager.applyAutomationFilters === 'function'\r\n          ) {\r\n            manager.applyAutomationFilters(rule.filterSettings[key], rule.name);\r\n          }\r\n        });\r\n        return; // Aplica apenas a primeira regra correspondente\r\n      }\r\n    }\r\n  }\r\n}\r\n\r\nfunction handleShowRegulationInfo() {\r\n  if (!currentRegulationData) {\r\n    Utils.showMessage('Nenhuma informação de regulação carregada.', 'info');\r\n    return;\r\n  }\r\n  const modalTitle = document.getElementById('modal-title');\r\n  const modalContent = document.getElementById('modal-content');\r\n  const infoModal = document.getElementById('info-modal');\r\n\r\n  modalTitle.textContent = 'Dados da Regulação (JSON)';\r\n  const formattedJson = JSON.stringify(currentRegulationData, null, 2);\r\n\r\n  modalContent.innerHTML = `<pre class=\"bg-slate-100 p-2 rounded-md text-xs whitespace-pre-wrap break-all\">${formattedJson}</pre>`;\r\n\r\n  infoModal.classList.remove('hidden');\r\n}\r\n\r\nfunction addGlobalEventListeners() {\r\n  const mainContent = document.getElementById('main-content');\r\n  const infoModal = document.getElementById('info-modal');\r\n  const modalCloseBtn = document.getElementById('modal-close-btn');\r\n  const infoBtn = document.getElementById('context-info-btn');\r\n  const reloadBtn = document.getElementById('reload-sidebar-btn');\r\n\r\n  if (reloadBtn) {\r\n    reloadBtn.addEventListener('click', () => {\r\n      const patient = store.getPatient();\r\n      if (patient && patient.ficha) {\r\n        const confirmation = window.confirm(\r\n          'Um paciente está selecionado e o estado atual será perdido. Deseja realmente recarregar o assistente?'\r\n        );\r\n        if (confirmation) {\r\n          window.location.reload();\r\n        }\r\n      } else {\r\n        window.location.reload();\r\n      }\r\n    });\r\n  }\r\n\r\n  modalCloseBtn.addEventListener('click', () =>\r\n    infoModal.classList.add('hidden')\r\n  );\r\n  infoModal.addEventListener('click', (e) => {\r\n    if (e.target === infoModal) infoModal.classList.add('hidden');\r\n  });\r\n  mainContent.addEventListener('click', handleGlobalActions);\r\n  infoBtn.addEventListener('click', handleShowRegulationInfo);\r\n\r\n  browser.storage.onChanged.addListener((changes, areaName) => {\r\n    if (areaName === 'local' && changes.pendingRegulation) {\r\n      // Apenas processa se a detecção automática estiver LIGADA\r\n      browser.storage.sync\r\n        .get({ enableAutomaticDetection: true })\r\n        .then((settings) => {\r\n          if (settings.enableAutomaticDetection) {\r\n            const { newValue } = changes.pendingRegulation;\r\n            if (newValue && newValue.isenPKIdp) {\r\n              console.log(\r\n                '[Assistente Sidebar] Nova regulação detectada via storage.onChanged:',\r\n                newValue\r\n              );\r\n              handleRegulationLoaded(newValue);\r\n              browser.storage.local.remove('pendingRegulation');\r\n            }\r\n          }\r\n        });\r\n    }\r\n\r\n    if (areaName === 'sync' && changes.sectionHeaderStyles) {\r\n      window.location.reload();\r\n    }\r\n\r\n    if (areaName === 'sync' && changes.enableAutomaticDetection) {\r\n      // Mantém o botão da sidebar sincronizado com a configuração\r\n      setupAutoModeToggle();\r\n    }\r\n  });\r\n}\r\n\r\nasync function handleGlobalActions(event) {\r\n  const target = event.target;\r\n  const copyBtn = target.closest('.copy-icon');\r\n  if (copyBtn) {\r\n    await copyToClipboard(copyBtn);\r\n    return;\r\n  }\r\n  const examResultBtn = target.closest('.view-exam-result-btn');\r\n  if (examResultBtn) {\r\n    await handleViewExamResult(examResultBtn);\r\n    return;\r\n  }\r\n\r\n  const appointmentDetailsBtn = target.closest('.view-appointment-details-btn');\r\n  if (appointmentDetailsBtn) {\r\n    await handleShowAppointmentDetailsModal(appointmentDetailsBtn);\r\n    return;\r\n  }\r\n  const regulationDetailsBtn = target.closest('.view-regulation-details-btn');\r\n  if (regulationDetailsBtn) {\r\n    await handleShowRegulationDetailsModal(regulationDetailsBtn);\r\n    return;\r\n  }\r\n\r\n  const appointmentInfoBtn = target.closest('.appointment-info-btn');\r\n  if (appointmentInfoBtn) {\r\n    handleShowAppointmentInfo(appointmentInfoBtn);\r\n    return;\r\n  }\r\n\r\n  const documentBtn = target.closest('.view-document-btn');\r\n  if (documentBtn) {\r\n    await handleViewDocument(documentBtn);\r\n    return;\r\n  }\r\n\r\n  const regulationAttachmentBtn = target.closest(\r\n    '.view-regulation-attachment-btn'\r\n  );\r\n  if (regulationAttachmentBtn) {\r\n    await handleViewRegulationAttachment(regulationAttachmentBtn);\r\n    return;\r\n  }\r\n}\r\n\r\nasync function copyToClipboard(button) {\r\n  if (button.dataset.inProgress === 'true') return;\r\n  const textToCopy = button.dataset.copyText;\r\n  if (!textToCopy) return;\r\n  button.dataset.inProgress = 'true';\r\n  try {\r\n    await navigator.clipboard.writeText(textToCopy);\r\n    button.textContent = '✅';\r\n  } catch (err) {\r\n    console.error('Falha ao copiar texto: ', err);\r\n    button.textContent = '❌';\r\n  } finally {\r\n    setTimeout(() => {\r\n      button.textContent = '📄';\r\n      button.dataset.inProgress = 'false';\r\n    }, 1200);\r\n  }\r\n}\r\n\r\nasync function updateRecentPatients(patientData) {\r\n  if (!patientData || !patientData.ficha) return;\r\n  const newRecent = { ...patientData };\r\n  const currentRecents = store.getRecentPatients();\r\n  const filtered = (currentRecents || []).filter(\r\n    (p) => p.ficha.isenPK.idp !== newRecent.ficha.isenPK.idp\r\n  );\r\n  const updatedRecents = [newRecent, ...filtered].slice(0, 5);\r\n  await browser.storage.local.set({ recentPatients: updatedRecents });\r\n  store.setRecentPatients(updatedRecents);\r\n}\r\n\r\nasync function handleViewExamResult(button) {\r\n  const { idp, ids } = button.dataset;\r\n  const newTab = window.open('', '_blank');\r\n  newTab.document.write('Carregando resultado do exame...');\r\n  try {\r\n    const filePath = await API.fetchResultadoExame({ idp, ids });\r\n    const baseUrl = await API.getBaseUrl();\r\n    if (filePath) {\r\n      const fullUrl = filePath.startsWith('http')\r\n        ? filePath\r\n        : `${baseUrl}${filePath}`;\r\n      newTab.location.href = fullUrl;\r\n    } else {\r\n      newTab.document.body.innerHTML = '<p>Resultado não encontrado.</p>';\r\n    }\r\n  } catch (error) {\r\n    newTab.document.body.innerHTML = `<p>Erro: ${error.message}</p>`;\r\n  }\r\n}\r\n\r\nasync function handleViewDocument(button) {\r\n  const { idp, ids } = button.dataset;\r\n  const newTab = window.open('', '_blank');\r\n  newTab.document.write('Carregando documento...');\r\n\r\n  try {\r\n    const docUrl = await API.fetchDocumentUrl({ idp, ids });\r\n    if (docUrl) {\r\n      newTab.location.href = docUrl;\r\n    } else {\r\n      newTab.document.body.innerHTML =\r\n        '<p>URL do documento não encontrada.</p>';\r\n    }\r\n  } catch (error) {\r\n    newTab.document.body.innerHTML = `<p>Erro ao carregar documento: ${error.message}</p>`;\r\n    console.error('Falha ao visualizar documento:', error);\r\n  }\r\n}\r\n\r\nasync function handleViewRegulationAttachment(button) {\r\n  const { idp, ids } = button.dataset;\r\n\r\n  try {\r\n    const fileUrl = await API.fetchRegulationAttachmentUrl({ idp, ids });\r\n    if (fileUrl) {\r\n      // Use browser extension API instead of window.open\r\n      const api = browser || chrome;\r\n      await api.tabs.create({ url: fileUrl });\r\n    } else {\r\n      console.warn('⚠️ URL do anexo não encontrada');\r\n    }\r\n  } catch (error) {\r\n    console.error('❌ Erro ao carregar anexo da regulação:', error);\r\n  }\r\n}\r\n\r\nfunction showModal(title, content) {\r\n  const modal = document.getElementById('info-modal');\r\n  const modalTitle = document.getElementById('modal-title');\r\n  const modalContent = document.getElementById('modal-content');\r\n\r\n  modalTitle.textContent = title;\r\n  modalContent.innerHTML = content;\r\n  modal.classList.remove('hidden');\r\n}\r\n\r\nfunction createDetailRow(label, value) {\r\n  if (!value || String(value).trim() === '') return '';\r\n  return `<div class=\"py-2 border-b border-slate-100 flex justify-between items-start gap-4\">\r\n            <span class=\"font-semibold text-slate-600 flex-shrink-0\">${label}:</span>\r\n            <span class=\"text-slate-800 text-right break-words\">${value}</span>\r\n          </div>`;\r\n}\r\n\r\nfunction formatRegulationDetailsForModal(data) {\r\n  if (!data) return '<p>Dados da regulação não encontrados.</p>';\r\n  let content = '';\r\n  content += createDetailRow('Status', data.reguStatus);\r\n  content += createDetailRow(\r\n    'Tipo',\r\n    data.reguTipo === 'ENC' ? 'Consulta' : 'Exame'\r\n  );\r\n  content += createDetailRow('Data Solicitação', data.reguDataStr);\r\n  content += createDetailRow('Procedimento', data.prciNome);\r\n  content += createDetailRow('CID', `${data.tcidCod} - ${data.tcidDescricao}`);\r\n  content += createDetailRow('Profissional Sol.', data.prsaEntiNome);\r\n  content += createDetailRow('Unidade Sol.', data.limoSolicitanteNome);\r\n  content += createDetailRow('Unidade Desejada', data.limoDesejadaNome);\r\n  content += createDetailRow('Gravidade', data.reguGravidade);\r\n  if (data.reguJustificativa && data.reguJustificativa !== 'null') {\r\n    content += `<div class=\"py-2\">\r\n                      <span class=\"font-semibold text-slate-600\">Justificativa:</span>\r\n                      <p class=\"text-slate-800 whitespace-pre-wrap mt-1 p-2 bg-slate-50 rounded\">${data.reguJustificativa.replace(\r\n    /\\\\n/g,\r\n    '\\n'\r\n  )}</p>\r\n                  </div>`;\r\n  }\r\n  return content;\r\n}\r\n\r\nfunction formatAppointmentDetailsForModal(data) {\r\n  if (!data) return '<p>Dados do agendamento não encontrados.</p>';\r\n\r\n  let status = 'Agendado';\r\n  if (data.agcoIsCancelado === 't') status = 'Cancelado';\r\n  else if (data.agcoIsFaltante === 't') status = 'Faltou';\r\n  else if (data.agcoIsAtendido === 't') status = 'Atendido';\r\n\r\n  let content = '';\r\n  content += createDetailRow('Status', status);\r\n  content += createDetailRow(\r\n    'Data',\r\n    `${data.agcoData} às ${data.agcoHoraPrevista}`\r\n  );\r\n  content += createDetailRow(\r\n    'Local',\r\n    data.unidadeSaudeDestino?.entidade?.entiNome\r\n  );\r\n  content += createDetailRow(\r\n    'Profissional',\r\n    data.profissionalDestino?.entidadeFisica?.entidade?.entiNome\r\n  );\r\n  content += createDetailRow(\r\n    'Especialidade',\r\n    data.atividadeProfissionalCnes?.apcnNome\r\n  );\r\n  content += createDetailRow('Procedimento', data.procedimento?.prciNome);\r\n  content += createDetailRow('Convênio', data.convenio?.entidade?.entiNome);\r\n  if (data.agcoObs) {\r\n    content += `<div class=\"py-2\">\r\n                        <span class=\"font-semibold text-slate-600\">Observação:</span>\r\n                        <p class=\"text-slate-800 whitespace-pre-wrap mt-1 p-2 bg-slate-50 rounded\">${data.agcoObs}</p>\r\n                    </div>`;\r\n  }\r\n  return content;\r\n}\r\n\r\nfunction formatExamAppointmentDetailsForModal(data) {\r\n  if (!data) return '<p>Dados do agendamento de exame não encontrados.</p>';\r\n\r\n  let content = '';\r\n  content += createDetailRow('Data Agendamento', data.examDataCad);\r\n  content += createDetailRow(\r\n    'Unidade Origem',\r\n    data.ligacaoModularOrigem?.limoNome\r\n  );\r\n  content += createDetailRow(\r\n    'Unidade Destino',\r\n    data.ligacaoModularDestino?.limoNome\r\n  );\r\n  content += createDetailRow(\r\n    'Profissional Sol.',\r\n    data.profissional?.entidadeFisica?.entidade?.entiNome\r\n  );\r\n  content += createDetailRow('Caráter', data.CaraterAtendimento?.caraDescri);\r\n  content += createDetailRow('Critério', data.criterioExame?.critNome);\r\n\r\n  return content;\r\n}\r\n\r\nasync function handleShowRegulationDetailsModal(button) {\r\n  const { idp, ids } = button.dataset;\r\n  showModal('Detalhes da Regulação', '<p>Carregando...</p>');\r\n  try {\r\n    const data = await API.fetchRegulationDetails({\r\n      reguIdp: idp,\r\n      reguIds: ids,\r\n    });\r\n    const content = formatRegulationDetailsForModal(data);\r\n    showModal('Detalhes da Regulação', content);\r\n  } catch (error) {\r\n    showModal(\r\n      'Erro',\r\n      `<p>Não foi possível carregar os detalhes: ${error.message}</p>`\r\n    );\r\n  }\r\n}\r\n\r\nasync function handleShowAppointmentDetailsModal(button) {\r\n  const { idp, ids, type } = button.dataset;\r\n  const isExam = type.toUpperCase().includes('EXAME');\r\n  const title = isExam\r\n    ? 'Detalhes do Agendamento de Exame'\r\n    : 'Detalhes da Consulta Agendada';\r\n\r\n  showModal(title, '<p>Carregando...</p>');\r\n\r\n  try {\r\n    let data;\r\n    let content;\r\n    if (isExam) {\r\n      data = await API.fetchExamAppointmentDetails({ idp, ids });\r\n      content = formatExamAppointmentDetailsForModal(data);\r\n    } else {\r\n      data = await API.fetchAppointmentDetails({ idp, ids });\r\n      content = formatAppointmentDetailsForModal(data);\r\n    }\r\n    showModal(title, content);\r\n  } catch (error) {\r\n    showModal(\r\n      'Erro',\r\n      `<p>Não foi possível carregar os detalhes: ${error.message}</p>`\r\n    );\r\n  }\r\n}\r\n\r\nfunction handleShowAppointmentInfo(button) {\r\n  const data = JSON.parse(button.dataset.appointment);\r\n  const modalTitle = document.getElementById('modal-title');\r\n  const modalContent = document.getElementById('modal-content');\r\n  const infoModal = document.getElementById('info-modal');\r\n  modalTitle.textContent = 'Detalhes do Agendamento';\r\n  modalContent.innerHTML = `\r\n        <p><strong>ID:</strong> ${data.id}</p>\r\n        <p><strong>Tipo:</strong> ${\r\n  data.isSpecialized\r\n    ? 'Especializada'\r\n    : data.isOdonto\r\n      ? 'Odontológica'\r\n      : data.type\r\n}</p>\r\n        <p><strong>Status:</strong> ${data.status}</p>\r\n        <p><strong>Data:</strong> ${data.date} às ${data.time}</p>\r\n        <p><strong>Local:</strong> ${data.location}</p>\r\n        <p><strong>Profissional:</strong> ${data.professional}</p>\r\n        <p><strong>Especialidade:</strong> ${data.specialty || 'N/A'}</p>\r\n        <p><strong>Procedimento:</strong> ${data.description}</p>\r\n    `;\r\n  infoModal.classList.remove('hidden');\r\n}\r\n\r\nasync function checkForPendingRegulation() {\r\n  try {\r\n    const { pendingRegulation } = await browser.storage.local.get(\r\n      'pendingRegulation'\r\n    );\r\n    if (pendingRegulation && pendingRegulation.isenPKIdp) {\r\n      await handleRegulationLoaded(pendingRegulation);\r\n      await browser.storage.local.remove('pendingRegulation');\r\n    }\r\n  } catch (e) {\r\n    console.error('Erro ao verificar regulação pendente:', e);\r\n  }\r\n}\r\n\r\ndocument.addEventListener('DOMContentLoaded', init);\r\n","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n// expose the modules object (__webpack_modules__)\n__webpack_require__.m = __webpack_modules__;\n\n","var deferred = [];\n__webpack_require__.O = (result, chunkIds, fn, priority) => {\n\tif(chunkIds) {\n\t\tpriority = priority || 0;\n\t\tfor(var i = deferred.length; i > 0 && deferred[i - 1][2] > priority; i--) deferred[i] = deferred[i - 1];\n\t\tdeferred[i] = [chunkIds, fn, priority];\n\t\treturn;\n\t}\n\tvar notFulfilled = Infinity;\n\tfor (var i = 0; i < deferred.length; i++) {\n\t\tvar [chunkIds, fn, priority] = deferred[i];\n\t\tvar fulfilled = true;\n\t\tfor (var j = 0; j < chunkIds.length; j++) {\n\t\t\tif ((priority & 1 === 0 || notFulfilled >= priority) && Object.keys(__webpack_require__.O).every((key) => (__webpack_require__.O[key](chunkIds[j])))) {\n\t\t\t\tchunkIds.splice(j--, 1);\n\t\t\t} else {\n\t\t\t\tfulfilled = false;\n\t\t\t\tif(priority < notFulfilled) notFulfilled = priority;\n\t\t\t}\n\t\t}\n\t\tif(fulfilled) {\n\t\t\tdeferred.splice(i--, 1)\n\t\t\tvar r = fn();\n\t\t\tif (r !== undefined) result = r;\n\t\t}\n\t}\n\treturn result;\n};","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","// no baseURI\n\n// object to store loaded and loading chunks\n// undefined = chunk not loaded, null = chunk preloaded/prefetched\n// [resolve, reject, Promise] = chunk loading, 0 = chunk loaded\nvar installedChunks = {\n\t\"sidebar\": 0\n};\n\n// no chunk on demand loading\n\n// no prefetching\n\n// no preloaded\n\n// no HMR\n\n// no HMR manifest\n\n__webpack_require__.O.j = (chunkId) => (installedChunks[chunkId] === 0);\n\n// install a JSONP callback for chunk loading\nvar webpackJsonpCallback = (parentChunkLoadingFunction, data) => {\n\tvar [chunkIds, moreModules, runtime] = data;\n\t// add \"moreModules\" to the modules object,\n\t// then flag all \"chunkIds\" as loaded and fire callback\n\tvar moduleId, chunkId, i = 0;\n\tif(chunkIds.some((id) => (installedChunks[id] !== 0))) {\n\t\tfor(moduleId in moreModules) {\n\t\t\tif(__webpack_require__.o(moreModules, moduleId)) {\n\t\t\t\t__webpack_require__.m[moduleId] = moreModules[moduleId];\n\t\t\t}\n\t\t}\n\t\tif(runtime) var result = runtime(__webpack_require__);\n\t}\n\tif(parentChunkLoadingFunction) parentChunkLoadingFunction(data);\n\tfor(;i < chunkIds.length; i++) {\n\t\tchunkId = chunkIds[i];\n\t\tif(__webpack_require__.o(installedChunks, chunkId) && installedChunks[chunkId]) {\n\t\t\tinstalledChunks[chunkId][0]();\n\t\t}\n\t\tinstalledChunks[chunkId] = 0;\n\t}\n\treturn __webpack_require__.O(result);\n}\n\nvar chunkLoadingGlobal = self[\"webpackChunkassistente_de_regulacao_medica\"] = self[\"webpackChunkassistente_de_regulacao_medica\"] || [];\nchunkLoadingGlobal.forEach(webpackJsonpCallback.bind(null, 0));\nchunkLoadingGlobal.push = webpackJsonpCallback.bind(null, chunkLoadingGlobal.push.bind(chunkLoadingGlobal));","","// startup\n// Load entry module and return exports\n// This entry module depends on other loaded chunks and execution need to be delayed\nvar __webpack_exports__ = __webpack_require__.O(undefined, [\"common\"], () => (__webpack_require__(\"./sidebar.js\")))\n__webpack_exports__ = __webpack_require__.O(__webpack_exports__);\n",""],"names":[],"sourceRoot":""}