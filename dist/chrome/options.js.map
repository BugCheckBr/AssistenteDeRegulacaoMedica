{"version":3,"file":"options.js","mappings":";;;;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AAAA;AACA;AAEA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AAAA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AAEA;AACA;AAGA;AACA;AACA;AAEA;AACA;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AAAA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AASA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAIA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AACA;AAEA;AACA;AASA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AAGA;AAEA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AAAA;AAEA;;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AAAA;AAEA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AAEA;AACA;AAQA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAGA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAGA;AAGA;AAGA;AACA;;AAEA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAKA;AAGA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAIA;AACA;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAGA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;;;;;;ACvmCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;AC1BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;AC3BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;ACPA;;;;;ACAA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;ACNA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;AEhDA;AACA;AACA;AACA;AACA","sources":["webpack://assistente-de-regulacao-medica/./options.js","webpack://assistente-de-regulacao-medica/webpack/bootstrap","webpack://assistente-de-regulacao-medica/webpack/runtime/chunk loaded","webpack://assistente-de-regulacao-medica/webpack/runtime/define property getters","webpack://assistente-de-regulacao-medica/webpack/runtime/hasOwnProperty shorthand","webpack://assistente-de-regulacao-medica/webpack/runtime/make namespace object","webpack://assistente-de-regulacao-medica/webpack/runtime/jsonp chunk loading","webpack://assistente-de-regulacao-medica/webpack/before-startup","webpack://assistente-de-regulacao-medica/webpack/startup","webpack://assistente-de-regulacao-medica/webpack/after-startup"],"sourcesContent":["import * as API from './api.js'; // Importa a API para buscar prioridades\r\nimport './browser-polyfill.js';\r\nimport { defaultFieldConfig } from './field-config.js';\r\nimport { filterConfig } from './filter-config.js';\r\nimport * as Utils from './utils.js';\r\n\r\n// Cross-browser API alias\r\nconst api = window.browser || window.chrome;\r\n\r\n// --- Constantes ---\r\nconst CONFIG_VERSION = '1.3'; // Versão da estrutura de configuração\r\n\r\n// --- Variáveis de Estado ---\r\nlet automationRules = [];\r\nlet currentlyEditingRuleId = null;\r\nlet draggedTab = null; // Variável para a aba arrastada\r\n\r\n// --- Elementos do DOM ---\r\nconst saveButton = document.getElementById('saveButton');\r\nconst statusMessage = document.getElementById('statusMessage');\r\nconst closeButton = document.getElementById('closeButton');\r\nconst restoreDefaultsButton = document.getElementById('restoreDefaultsButton');\r\nconst exportButton = document.getElementById('exportButton');\r\nconst importFileInput = document.getElementById('import-file-input');\r\n\r\n// Ficha do Paciente\r\nconst mainFieldsZone = document.getElementById('main-fields-zone');\r\nconst moreFieldsZone = document.getElementById('more-fields-zone');\r\n\r\n// Abas e Zonas de Filtros Manuais\r\nconst allDropZones = document.querySelectorAll('.drop-zone');\r\n\r\n// --- Elementos do DOM para o Gerenciador de Automação ---\r\nconst automationRulesList = document.getElementById('automation-rules-list');\r\nconst createNewRuleBtn = document.getElementById('create-new-rule-btn');\r\nconst ruleEditorModal = document.getElementById('rule-editor-modal');\r\nconst ruleEditorTitle = document.getElementById('rule-editor-title');\r\nconst ruleNameInput = document.getElementById('rule-name-input');\r\nconst ruleTriggersInput = document.getElementById('rule-triggers-input');\r\nconst cancelRuleBtn = document.getElementById('cancel-rule-btn');\r\nconst saveRuleBtn = document.getElementById('save-rule-btn');\r\n\r\n/**\r\n * Cria um elemento de campo arrastável para a Ficha do Paciente.\r\n * @param {object} field - O objeto de configuração do campo.\r\n * @returns {HTMLElement} O elemento <div> do campo.\r\n */\r\nfunction createDraggableField(field) {\r\n  const div = document.createElement('div');\r\n  div.className = 'draggable';\r\n  div.dataset.fieldId = field.id;\r\n  div.draggable = true;\r\n\r\n  div.innerHTML = `\r\n    <span class=\"drag-handle\">⠿</span>\r\n    <input type=\"checkbox\" class=\"field-enabled-checkbox\" ${field.enabled ? 'checked' : ''}>\r\n    <input type=\"text\" class=\"field-label-input\" value=\"${field.label}\">\r\n  `;\r\n\r\n  div.addEventListener('dragstart', handleDragStart);\r\n  div.addEventListener('dragend', handleDragEnd);\r\n\r\n  return div;\r\n}\r\n\r\n/**\r\n * Cria um elemento de filtro arrastável com controlos para valor padrão.\r\n * @param {object} filter - O objeto de configuração do filtro.\r\n * @param {Array<object>} priorities - A lista de prioridades dinâmicas para a regulação.\r\n * @returns {HTMLElement} O elemento <div> do filtro.\r\n */\r\nfunction createDraggableFilter(filter, priorities = []) {\r\n  const div = document.createElement('div');\r\n  div.className = 'draggable';\r\n  div.dataset.filterId = filter.id;\r\n  div.draggable = true;\r\n\r\n  const displayType = filter.type === 'selectGroup' ? 'select' : filter.type;\r\n\r\n  let defaultValueControl = '';\r\n  if (filter.type !== 'component') {\r\n    switch (filter.type) {\r\n      case 'text': {\r\n        defaultValueControl =\r\n          '<input type=\"text\" class=\"filter-default-value-input w-full\" placeholder=\"Valor padrão...\">';\r\n        break;\r\n      }\r\n      case 'select':\r\n      case 'selectGroup': {\r\n        let optionsHtml = '';\r\n        if (filter.id === 'regulation-filter-priority') {\r\n          // Constrói o dropdown de prioridades dinamicamente\r\n          optionsHtml = filter.options\r\n            .map((opt) => `<option value=\"${opt.value}\">${opt.text}</option>`)\r\n            .join(''); // Adiciona \"Todas\"\r\n          priorities.forEach((prio) => {\r\n            optionsHtml += `<option value=\"${prio.coreDescricao}\">${prio.coreDescricao}</option>`;\r\n          });\r\n        } else {\r\n          // Lógica original para outros selects\r\n          optionsHtml = (filter.options || [])\r\n            .map((opt) => `<option value=\"${opt.value}\">${opt.text}</option>`)\r\n            .join('');\r\n        }\r\n        defaultValueControl = `<select class=\"filter-default-value-input w-full\">${optionsHtml}</select>`;\r\n        break;\r\n      }\r\n      case 'checkbox': {\r\n        defaultValueControl =\r\n          '<input type=\"checkbox\" class=\"filter-default-value-input h-4 w-4 rounded border-gray-300 text-blue-600 focus:ring-blue-500\">';\r\n        break;\r\n      }\r\n    }\r\n  }\r\n\r\n  div.innerHTML = `\r\n    <span class=\"drag-handle\">⠿</span>\r\n    <div class=\"flex-grow flex flex-col gap-2\">\r\n        <div class=\"flex justify-between items-center\">\r\n            <span class=\"font-medium text-sm\">${filter.label}</span>\r\n            <span class=\"text-xs text-slate-400 p-1 bg-slate-100 rounded\">${displayType}</span>\r\n        </div>\r\n        ${\r\n          defaultValueControl\r\n            ? `\r\n        <div class=\"flex items-center gap-2 text-xs text-slate-500\">\r\n            <label for=\"default-${filter.id}\">Padrão:</label>\r\n            ${defaultValueControl.replace('class=\"', `id=\"default-${filter.id}\" class=\"`)}\r\n        </div>`\r\n            : ''\r\n        }\r\n    </div>\r\n  `;\r\n\r\n  if (filter.type === 'component') {\r\n    div.classList.add('draggable-component');\r\n  }\r\n\r\n  div.addEventListener('dragstart', handleDragStart);\r\n  div.addEventListener('dragend', handleDragEnd);\r\n\r\n  return div;\r\n}\r\n\r\n/**\r\n * Renderiza os campos da Ficha do Paciente nas zonas corretas.\r\n * @param {Array<object>} config - A configuração de campos.\r\n */\r\nfunction renderPatientFields(config) {\r\n  mainFieldsZone.innerHTML = '';\r\n  moreFieldsZone.innerHTML = '';\r\n\r\n  const sortedConfig = [...config].sort((a, b) => a.order - b.order);\r\n\r\n  sortedConfig.forEach((field) => {\r\n    const fieldElement = createDraggableField(field);\r\n    if (field.section === 'main') {\r\n      mainFieldsZone.appendChild(fieldElement);\r\n    } else {\r\n      moreFieldsZone.appendChild(fieldElement);\r\n    }\r\n  });\r\n}\r\n\r\n/**\r\n * Renderiza os filtros de seção nas zonas corretas e define seus valores padrão.\r\n * @param {object} layout - A configuração de layout dos filtros.\r\n */\r\nasync function renderFilterLayout(layout) {\r\n  let priorities = [];\r\n\r\n  try {\r\n    const baseUrl = await API.getBaseUrl();\r\n    if (baseUrl) {\r\n      priorities = await API.fetchRegulationPriorities();\r\n    }\r\n  } catch (error) {\r\n    console.error('Não foi possível carregar prioridades:', error);\r\n  }\r\n\r\n  Object.keys(filterConfig).forEach((section) => {\r\n    const mainZone = document.getElementById(`${section}-main-filters-zone`);\r\n    const moreZone = document.getElementById(`${section}-more-filters-zone`);\r\n    if (mainZone) mainZone.innerHTML = '';\r\n    if (moreZone) moreZone.innerHTML = '';\r\n  });\r\n\r\n  Object.entries(filterConfig).forEach(([sectionKey, filters]) => {\r\n    const sectionLayout = layout[sectionKey] || [];\r\n    const layoutMap = new Map(sectionLayout.map((f) => [f.id, f]));\r\n\r\n    const sortedFilters = [...filters].sort((a, b) => {\r\n      const orderA = layoutMap.get(a.id)?.order ?? Infinity;\r\n      const orderB = layoutMap.get(b.id)?.order ?? Infinity;\r\n      return orderA - orderB;\r\n    });\r\n\r\n    sortedFilters.forEach((filter) => {\r\n      const filterLayoutData = layoutMap.get(filter.id);\r\n      const location = filterLayoutData?.location || filter.defaultLocation;\r\n\r\n      if (sectionKey === 'patient-card') return;\r\n      const zoneId = `${sectionKey}-${location}-filters-zone`;\r\n      const zone = document.getElementById(zoneId);\r\n\r\n      if (zone) {\r\n        const filterElement = createDraggableFilter(filter, priorities);\r\n        zone.appendChild(filterElement);\r\n\r\n        if (\r\n          filter.type !== 'component' &&\r\n          filterLayoutData &&\r\n          filterLayoutData.defaultValue !== undefined\r\n        ) {\r\n          const defaultValueInput = filterElement.querySelector('.filter-default-value-input');\r\n          if (defaultValueInput) {\r\n            if (defaultValueInput.type === 'checkbox') {\r\n              defaultValueInput.checked = filterLayoutData.defaultValue;\r\n            } else {\r\n              defaultValueInput.value = filterLayoutData.defaultValue;\r\n            }\r\n          }\r\n        }\r\n      }\r\n    });\r\n  });\r\n}\r\n\r\n/**\r\n * Reordena os botões das abas na página de opções com base na ordem salva.\r\n * @param {string[]} order - Array de IDs de abas na ordem correta.\r\n */\r\nfunction applyTabOrder(order) {\r\n  const tabsContainer = document.querySelector('#filter-tabs-container .tabs');\r\n  if (!tabsContainer) return;\r\n\r\n  const tabMap = new Map();\r\n  tabsContainer.querySelectorAll('.tab-button').forEach((tab) => {\r\n    tabMap.set(tab.dataset.tab, tab);\r\n  });\r\n\r\n  // Anexa as abas na ordem salva. As não encontradas na ordem (novas) permanecem.\r\n  order.forEach((tabId) => {\r\n    const tabElement = tabMap.get(tabId);\r\n    if (tabElement) {\r\n      tabsContainer.appendChild(tabElement);\r\n    }\r\n  });\r\n}\r\n\r\n/**\r\n * Carrega a configuração salva e renderiza a página.\r\n */\r\nasync function restoreOptions() {\r\n  const syncItems = await api.storage.sync.get({\r\n    baseUrl: '',\r\n    autoLoadExams: false,\r\n    autoLoadConsultations: false,\r\n    autoLoadAppointments: false,\r\n    autoLoadRegulations: false,\r\n    autoLoadDocuments: false,\r\n    enableAutomaticDetection: true,\r\n    keepSessionAliveInterval: 10,\r\n    patientFields: defaultFieldConfig,\r\n    filterLayout: {},\r\n    dateRangeDefaults: {},\r\n    sidebarSectionOrder: null,\r\n    sectionHeaderStyles: {},\r\n  });\r\n\r\n  const localItems = await api.storage.local.get({\r\n    automationRules: [],\r\n  });\r\n\r\n  document.getElementById('baseUrlInput').value = syncItems.baseUrl || '';\r\n  document.getElementById('enableAutomaticDetection').checked = syncItems.enableAutomaticDetection;\r\n  document.getElementById('keepSessionAliveInterval').value = syncItems.keepSessionAliveInterval;\r\n  document.getElementById('autoLoadExamsCheckbox').checked = syncItems.autoLoadExams;\r\n  document.getElementById('autoLoadConsultationsCheckbox').checked =\r\n    syncItems.autoLoadConsultations;\r\n  document.getElementById('autoLoadAppointmentsCheckbox').checked = syncItems.autoLoadAppointments;\r\n  document.getElementById('autoLoadRegulationsCheckbox').checked = syncItems.autoLoadRegulations;\r\n  document.getElementById('autoLoadDocumentsCheckbox').checked = syncItems.autoLoadDocuments;\r\n\r\n  if (syncItems.sidebarSectionOrder) {\r\n    applyTabOrder(syncItems.sidebarSectionOrder);\r\n  }\r\n\r\n  const currentPatientFieldsConfig = defaultFieldConfig.map((defaultField) => {\r\n    const savedField = syncItems.patientFields.find((f) => f.id === defaultField.id);\r\n    return savedField ? { ...defaultField, ...savedField } : defaultField;\r\n  });\r\n  renderPatientFields(currentPatientFieldsConfig);\r\n\r\n  try {\r\n    await renderFilterLayout(syncItems.filterLayout);\r\n  } catch (error) {\r\n    console.error('Erro ao renderizar filtros:', error);\r\n  }\r\n\r\n  const sections = [\r\n    'patient-details',\r\n    'timeline',\r\n    'consultations',\r\n    'exams',\r\n    'appointments',\r\n    'regulations',\r\n    'documents',\r\n  ];\r\n  const defaultRanges = {\r\n    consultations: { start: -6, end: 0 },\r\n    exams: { start: -6, end: 0 },\r\n    appointments: { start: -1, end: 3 },\r\n    regulations: { start: -12, end: 0 },\r\n    documents: { start: -24, end: 0 },\r\n  };\r\n\r\n  // CORREÇÃO 2: Define os estilos padrão aqui.\r\n  const defaultStyles = {\r\n    backgroundColor: '#ffffff',\r\n    color: '#1e293b',\r\n    iconColor: '#1e293b',\r\n    fontSize: '16px',\r\n  };\r\n\r\n  sections.forEach((section) => {\r\n    if (defaultRanges[section]) {\r\n      const range = syncItems.dateRangeDefaults[section] || defaultRanges[section];\r\n      const startOffsetEl = document.getElementById(`${section}-start-offset`);\r\n      const endOffsetEl = document.getElementById(`${section}-end-offset`);\r\n      if (startOffsetEl) startOffsetEl.value = Math.abs(range.start);\r\n      if (endOffsetEl) endOffsetEl.value = range.end;\r\n    }\r\n\r\n    // Restaura estilos, usando os padrões como base.\r\n    const savedStyle = syncItems.sectionHeaderStyles[section] || {};\r\n    const style = { ...defaultStyles, ...savedStyle };\r\n\r\n    const bgColorEl = document.getElementById(`style-${section}-bg-color`);\r\n    const fontColorEl = document.getElementById(`style-${section}-font-color`);\r\n    const iconColorEl = document.getElementById(`style-${section}-icon-color`);\r\n    const fontSizeEl = document.getElementById(`style-${section}-font-size`);\r\n\r\n    if (bgColorEl) bgColorEl.value = style.backgroundColor;\r\n    if (fontColorEl) fontColorEl.value = style.color;\r\n    if (iconColorEl) iconColorEl.value = style.iconColor;\r\n    if (fontSizeEl) fontSizeEl.value = style.fontSize;\r\n  });\r\n\r\n  automationRules = localItems.automationRules || [];\r\n  renderAutomationRules();\r\n}\r\n\r\n/**\r\n * Salva as configurações GERAIS (não as regras de automação).\r\n */\r\nasync function saveOptions() {\r\n  const baseUrl = document.getElementById('baseUrlInput').value;\r\n  const enableAutomaticDetection = document.getElementById('enableAutomaticDetection').checked;\r\n  const keepSessionAliveInterval =\r\n    parseInt(document.getElementById('keepSessionAliveInterval').value, 10) || 0;\r\n  const autoLoadExams = document.getElementById('autoLoadExamsCheckbox').checked;\r\n  const autoLoadConsultations = document.getElementById('autoLoadConsultationsCheckbox').checked;\r\n  const autoLoadAppointments = document.getElementById('autoLoadAppointmentsCheckbox').checked;\r\n  const autoLoadRegulations = document.getElementById('autoLoadRegulationsCheckbox').checked;\r\n  const autoLoadDocuments = document.getElementById('autoLoadDocumentsCheckbox').checked;\r\n\r\n  const patientFields = [];\r\n  mainFieldsZone.querySelectorAll('.draggable').forEach((div, index) => {\r\n    const fieldId = div.dataset.fieldId;\r\n    const label = div.querySelector('.field-label-input').value;\r\n    const enabled = div.querySelector('.field-enabled-checkbox').checked;\r\n    patientFields.push({\r\n      id: fieldId,\r\n      label,\r\n      enabled,\r\n      section: 'main',\r\n      order: index + 1,\r\n    });\r\n  });\r\n  moreFieldsZone.querySelectorAll('.draggable').forEach((div, index) => {\r\n    const fieldId = div.dataset.fieldId;\r\n    const label = div.querySelector('.field-label-input').value;\r\n    const enabled = div.querySelector('.field-enabled-checkbox').checked;\r\n    patientFields.push({\r\n      id: fieldId,\r\n      label,\r\n      enabled,\r\n      section: 'more',\r\n      order: index + 1,\r\n    });\r\n  });\r\n\r\n  const filterLayout = {};\r\n  document.querySelectorAll('#layout-config-section .drop-zone').forEach((zone) => {\r\n    if (!zone.dataset.section) return;\r\n    const section = zone.dataset.section;\r\n    if (!filterLayout[section]) filterLayout[section] = [];\r\n    const location = zone.id.includes('-main-') ? 'main' : 'more';\r\n    zone.querySelectorAll('.draggable').forEach((div, index) => {\r\n      const filterId = div.dataset.filterId;\r\n      const originalFilter = filterConfig[section].find((f) => f.id === filterId);\r\n      const newFilterData = {\r\n        id: filterId,\r\n        location: location,\r\n        order: index + 1,\r\n      };\r\n      if (originalFilter.type !== 'component') {\r\n        const defaultValueInput = div.querySelector('.filter-default-value-input');\r\n        if (defaultValueInput) {\r\n          newFilterData.defaultValue =\r\n            defaultValueInput.type === 'checkbox'\r\n              ? defaultValueInput.checked\r\n              : defaultValueInput.value;\r\n        }\r\n      }\r\n      filterLayout[section].push(newFilterData);\r\n    });\r\n  });\r\n\r\n  const dateRangeDefaults = {};\r\n  const sectionsForDate = ['consultations', 'exams', 'appointments', 'regulations', 'documents'];\r\n  sectionsForDate.forEach((section) => {\r\n    const startEl = document.getElementById(`${section}-start-offset`);\r\n    const endEl = document.getElementById(`${section}-end-offset`);\r\n    if (startEl && endEl) {\r\n      const start = -parseInt(startEl.value, 10) || 0;\r\n      const end = parseInt(endEl.value, 10) || 0;\r\n      dateRangeDefaults[section] = { start, end };\r\n    }\r\n  });\r\n\r\n  const sectionHeaderStyles = {};\r\n  const sectionsForStyle = [\r\n    'patient-details',\r\n    'timeline',\r\n    'consultations',\r\n    'exams',\r\n    'appointments',\r\n    'regulations',\r\n    'documents',\r\n  ];\r\n  sectionsForStyle.forEach((section) => {\r\n    const bgColorEl = document.getElementById(`style-${section}-bg-color`);\r\n    if (bgColorEl) {\r\n      // Check if the element exists before accessing properties\r\n      sectionHeaderStyles[section] = {\r\n        backgroundColor: bgColorEl.value,\r\n        color: document.getElementById(`style-${section}-font-color`).value,\r\n        iconColor: document.getElementById(`style-${section}-icon-color`).value,\r\n        fontSize: document.getElementById(`style-${section}-font-size`).value,\r\n      };\r\n    }\r\n  });\r\n\r\n  const sidebarSectionOrder = [...document.querySelectorAll('.tabs .tab-button')].map(\r\n    (btn) => btn.dataset.tab\r\n  );\r\n\r\n  await api.storage.sync.set({\r\n    baseUrl: baseUrl.endsWith('/') ? baseUrl.slice(0, -1) : baseUrl,\r\n    enableAutomaticDetection,\r\n    keepSessionAliveInterval,\r\n    autoLoadExams,\r\n    autoLoadConsultations,\r\n    autoLoadAppointments,\r\n    autoLoadRegulations,\r\n    autoLoadDocuments,\r\n    patientFields,\r\n    filterLayout,\r\n    dateRangeDefaults,\r\n    sidebarSectionOrder,\r\n    sectionHeaderStyles,\r\n  });\r\n\r\n  Utils.showMessage(\r\n    'Configurações salvas! As alterações serão aplicadas ao recarregar o assistente.',\r\n    'success'\r\n  );\r\n\r\n  setTimeout(() => {\r\n    const statusMsg = document.getElementById('statusMessage');\r\n    if (statusMsg) {\r\n      statusMsg.textContent = '';\r\n      statusMsg.className = 'text-sm font-medium';\r\n    }\r\n  }, 4000);\r\n}\r\n\r\n// --- Lógica de Arrastar e Soltar (Drag and Drop) ---\r\nlet draggedElement = null;\r\n\r\nfunction handleDragStart(e) {\r\n  draggedElement = e.target.closest('.draggable, .rule-item');\r\n  if (!draggedElement) return;\r\n  e.dataTransfer.effectAllowed = 'move';\r\n  setTimeout(() => draggedElement.classList.add('dragging'), 0);\r\n}\r\n\r\nfunction handleDragEnd() {\r\n  if (!draggedElement) return;\r\n  draggedElement.classList.remove('dragging');\r\n  draggedElement = null;\r\n}\r\n\r\nfunction handleDragOver(e) {\r\n  e.preventDefault();\r\n  e.dataTransfer.dropEffect = 'move';\r\n}\r\n\r\nfunction handleDrop(e) {\r\n  e.preventDefault();\r\n  if (!draggedElement) return;\r\n\r\n  const dropZone = e.target.closest('.drop-zone, #automation-rules-list');\r\n  if (dropZone) {\r\n    const afterElement = getDragAfterElement(dropZone, e.clientY);\r\n    if (afterElement == null) {\r\n      dropZone.appendChild(draggedElement);\r\n    } else {\r\n      dropZone.insertBefore(draggedElement, afterElement);\r\n    }\r\n\r\n    if (dropZone.id === 'automation-rules-list') {\r\n      reorderAutomationRules();\r\n    }\r\n  }\r\n}\r\n\r\nfunction getDragAfterElement(container, y) {\r\n  const draggableElements = [\r\n    ...container.querySelectorAll('.draggable:not(.dragging), .rule-item:not(.dragging)'),\r\n  ];\r\n  return draggableElements.reduce(\r\n    (closest, child) => {\r\n      const box = child.getBoundingClientRect();\r\n      const offset = y - box.top - box.height / 2;\r\n      if (offset < 0 && offset > closest.offset) {\r\n        return { offset: offset, element: child };\r\n      } else {\r\n        return closest;\r\n      }\r\n    },\r\n    { offset: Number.NEGATIVE_INFINITY }\r\n  ).element;\r\n}\r\n\r\n// --- Lógica de Arrastar e Soltar para Abas ---\r\nfunction getDragAfterTab(container, x) {\r\n  const draggableElements = [...container.querySelectorAll('.tab-button:not(.dragging)')];\r\n  return draggableElements.reduce(\r\n    (closest, child) => {\r\n      const box = child.getBoundingClientRect();\r\n      const offset = x - box.left - box.width / 2;\r\n      if (offset < 0 && offset > closest.offset && child.draggable) {\r\n        return { offset: offset, element: child };\r\n      } else {\r\n        return closest;\r\n      }\r\n    },\r\n    { offset: Number.NEGATIVE_INFINITY }\r\n  ).element;\r\n}\r\n\r\nfunction setupTabDnD(container) {\r\n  if (!container) return;\r\n\r\n  const tabs = container.querySelectorAll('.tab-button');\r\n  tabs.forEach((tab) => {\r\n    if (tab.dataset.tab !== 'patient-card') {\r\n      tab.draggable = true;\r\n    }\r\n  });\r\n\r\n  container.addEventListener('dragstart', (e) => {\r\n    if (e.target.classList.contains('tab-button') && e.target.draggable) {\r\n      draggedTab = e.target;\r\n      setTimeout(() => e.target.classList.add('dragging'), 0);\r\n    }\r\n  });\r\n\r\n  container.addEventListener('dragend', () => {\r\n    if (draggedTab) {\r\n      draggedTab.classList.remove('dragging');\r\n      draggedTab = null;\r\n    }\r\n  });\r\n\r\n  container.addEventListener('dragover', (e) => {\r\n    e.preventDefault();\r\n    if (!draggedTab) return;\r\n\r\n    const afterElement = getDragAfterTab(container, e.clientX);\r\n    if (afterElement) {\r\n      container.insertBefore(draggedTab, afterElement);\r\n    } else {\r\n      container.appendChild(draggedTab);\r\n    }\r\n  });\r\n}\r\n\r\n// --- Lógica para Restaurar Padrões ---\r\nasync function handleRestoreDefaults() {\r\n  Utils.showDialog({\r\n    message:\r\n      'Tem certeza de que deseja restaurar todas as configurações de layout e valores padrão? Isto também restaurará a ordem das seções e os estilos dos cabeçalhos. Esta ação não pode ser desfeita.',\r\n    onConfirm: async () => {\r\n      await api.storage.sync.remove([\r\n        'patientFields',\r\n        'filterLayout',\r\n        'dateRangeDefaults',\r\n        'enableAutomaticDetection',\r\n        'sidebarSectionOrder',\r\n        'sectionHeaderStyles',\r\n      ]);\r\n      mainFieldsZone.innerHTML = '';\r\n      moreFieldsZone.innerHTML = '';\r\n      window.location.reload();\r\n    },\r\n  });\r\n}\r\n\r\n// --- Lógica de Exportação e Importação ---\r\nasync function handleExport() {\r\n  try {\r\n    const settingsToExport = await api.storage.sync.get(null);\r\n    settingsToExport.configVersion = CONFIG_VERSION;\r\n    const settingsString = JSON.stringify(settingsToExport, null, 2);\r\n    const blob = new Blob([settingsString], { type: 'application/json' });\r\n    const url = URL.createObjectURL(blob);\r\n    const a = document.createElement('a');\r\n    a.href = url;\r\n    const date = new Date().toISOString().slice(0, 10);\r\n    a.download = `assistente-regulacao-config-${date}.json`;\r\n    document.body.appendChild(a);\r\n    a.click();\r\n    document.body.removeChild(a);\r\n    URL.revokeObjectURL(url);\r\n    Utils.showMessage('Configurações exportadas com sucesso!', 'success');\r\n  } catch (error) {\r\n    console.error('Erro ao exportar configurações:', error);\r\n    Utils.showMessage('Erro ao exportar configurações.', 'error');\r\n  } finally {\r\n    setTimeout(() => {\r\n      statusMessage.textContent = '';\r\n    }, 3000);\r\n  }\r\n}\r\n\r\nfunction handleImport(event) {\r\n  const file = event.target.files[0];\r\n  if (!file) return;\r\n  const reader = new FileReader();\r\n  reader.onload = async (e) => {\r\n    try {\r\n      const importedSettings = JSON.parse(e.target.result);\r\n      if (!importedSettings.configVersion || !importedSettings.filterLayout) {\r\n        throw new Error('Ficheiro de configuração inválido ou corrompido.');\r\n      }\r\n      if (importedSettings.configVersion.split('.')[0] !== CONFIG_VERSION.split('.')[0]) {\r\n        Utils.showDialog({\r\n          message:\r\n            'A versão do ficheiro de configuração é muito diferente da versão da extensão. A importação pode causar erros. Deseja continuar mesmo assim?',\r\n          onConfirm: async () => {\r\n            await api.storage.sync.clear();\r\n            await api.storage.sync.set(importedSettings);\r\n            restoreOptions();\r\n            Utils.showMessage('Configurações importadas e aplicadas com sucesso!', 'success');\r\n          },\r\n        });\r\n        return;\r\n      }\r\n      await api.storage.sync.clear();\r\n      await api.storage.sync.set(importedSettings);\r\n      restoreOptions();\r\n      Utils.showMessage('Configurações importadas e aplicadas com sucesso!', 'success');\r\n    } catch (error) {\r\n      console.error('Erro ao importar configurações:', error);\r\n      Utils.showMessage(`Erro ao importar: ${error.message}`, 'error');\r\n    } finally {\r\n      importFileInput.value = '';\r\n      setTimeout(() => {\r\n        statusMessage.textContent = '';\r\n      }, 5000);\r\n    }\r\n  };\r\n  reader.readAsText(file);\r\n}\r\n\r\n// --- LÓGICA PARA O GERENCIADOR DE AUTOMAÇÃO ---\r\n\r\n/**\r\n * Renderiza a lista de regras de automação na UI.\r\n */\r\nfunction renderAutomationRules() {\r\n  automationRulesList.innerHTML = '';\r\n  automationRules.forEach((rule) => {\r\n    const ruleElement = document.createElement('div');\r\n    ruleElement.className = 'rule-item border rounded-lg bg-white p-3';\r\n    ruleElement.dataset.ruleId = rule.id;\r\n    ruleElement.draggable = true;\r\n\r\n    const keywords = rule.triggerKeywords.join(', ');\r\n    const checked = rule.isActive ? 'checked' : '';\r\n\r\n    ruleElement.innerHTML = `\r\n            <div class=\"flex items-center justify-between\">\r\n              <div class=\"flex items-center gap-3\">\r\n                <span class=\"drag-handle cursor-grab text-slate-400\">⠿</span>\r\n                <div>\r\n                  <p class=\"font-semibold text-slate-800\">${rule.name}</p>\r\n                  <p class=\"text-xs text-slate-500\" title=\"${keywords}\">Gatilhos: ${\r\n                    keywords.length > 50 ? keywords.substring(0, 50) + '...' : keywords\r\n                  }</p>\r\n                </div>\r\n              </div>\r\n              <div class=\"flex items-center gap-4\">\r\n                <label class=\"relative inline-flex items-center cursor-pointer\" title=\"${\r\n                  rule.isActive ? 'Regra Ativa' : 'Regra Inativa'\r\n                }\">\r\n                  <input type=\"checkbox\" class=\"sr-only peer rule-toggle-active\" ${checked}>\r\n                  <div class=\"w-11 h-6 bg-gray-200 rounded-full peer peer-checked:after:translate-x-full peer-checked:after:border-white after:content-[''] after:absolute after:top-0.5 after:left-[2px] after:bg-white after:border-gray-300 after:border after:rounded-full after:h-5 after:w-5 after:transition-all peer-checked:bg-blue-600\"></div>\r\n                </label>\r\n                <button class=\"text-sm font-medium text-blue-600 hover:underline rule-edit-btn\">Editar</button>\r\n                <button class=\"text-sm font-medium text-slate-500 hover:underline rule-duplicate-btn\">Duplicar</button>\r\n                <button class=\"text-sm font-medium text-red-600 hover:underline rule-delete-btn\">Excluir</button>\r\n              </div>\r\n            </div>\r\n        `;\r\n    automationRulesList.appendChild(ruleElement);\r\n  });\r\n\r\n  document.querySelectorAll('.rule-item').forEach((item) => {\r\n    const ruleId = item.dataset.ruleId;\r\n    item.querySelector('.rule-edit-btn').addEventListener('click', () => handleEditRule(ruleId));\r\n    item\r\n      .querySelector('.rule-delete-btn')\r\n      .addEventListener('click', () => handleDeleteRule(ruleId));\r\n    item\r\n      .querySelector('.rule-duplicate-btn')\r\n      .addEventListener('click', () => handleDuplicateRule(ruleId));\r\n    item\r\n      .querySelector('.rule-toggle-active')\r\n      .addEventListener('change', (e) => handleToggleRuleActive(ruleId, e.target.checked));\r\n  });\r\n}\r\n\r\n/**\r\n * Salva o array de regras de automação no storage local.\r\n */\r\nasync function saveAutomationRules() {\r\n  await api.storage.local.set({ automationRules });\r\n  Utils.showMessage('Regras de automação salvas.', 'success');\r\n  setTimeout(() => {\r\n    statusMessage.textContent = '';\r\n  }, 2000);\r\n}\r\n\r\n/**\r\n * Abre o modal do editor de regras, preenchendo-o se uma regra for fornecida.\r\n * @param {string|null} ruleId - O ID da regra a ser editada, ou null para criar uma nova.\r\n */\r\nasync function openRuleEditor(ruleId = null) {\r\n  currentlyEditingRuleId = ruleId;\r\n  await populateRuleEditorFilters();\r\n\r\n  if (ruleId) {\r\n    const rule = automationRules.find((r) => r.id === ruleId);\r\n    if (!rule) return;\r\n    ruleEditorTitle.textContent = 'Editar Regra de Automação';\r\n    ruleNameInput.value = rule.name;\r\n    ruleTriggersInput.value = rule.triggerKeywords.join(', ');\r\n\r\n    Object.entries(rule.filterSettings).forEach(([sectionKey, filters]) => {\r\n      // --- INÍCIO DA CORREÇÃO ---\r\n      // Preenche os filtros de data\r\n      if (filters && filters.dateRange) {\r\n        const { start, end } = filters.dateRange;\r\n        const startOffsetEl = document.getElementById(`rule-${sectionKey}-start-offset`);\r\n        const endOffsetEl = document.getElementById(`rule-${sectionKey}-end-offset`);\r\n        if (startOffsetEl && start !== null && !isNaN(start)) {\r\n          startOffsetEl.value = Math.abs(start);\r\n        } else if (startOffsetEl) {\r\n          startOffsetEl.value = '';\r\n        }\r\n        if (endOffsetEl && end !== null && !isNaN(end)) {\r\n          endOffsetEl.value = end;\r\n        } else if (endOffsetEl) {\r\n          endOffsetEl.value = '';\r\n        }\r\n      }\r\n      // --- FIM DA CORREÇÃO ---\r\n\r\n      // Preenche outros filtros\r\n      Object.entries(filters).forEach(([filterId, value]) => {\r\n        if (filterId === 'dateRange') return;\r\n        const element = document.getElementById(`rule-${sectionKey}-${filterId}`);\r\n        if (element) {\r\n          if (element.type === 'checkbox') {\r\n            element.checked = value;\r\n          } else {\r\n            element.value = value;\r\n          }\r\n        }\r\n      });\r\n    });\r\n  } else {\r\n    ruleEditorTitle.textContent = 'Criar Nova Regra de Automação';\r\n    ruleNameInput.value = '';\r\n    ruleTriggersInput.value = '';\r\n\r\n    // Limpa todos os campos, incluindo os de data\r\n    const sections = ['consultations', 'exams', 'appointments', 'regulations', 'documents'];\r\n    sections.forEach((sectionKey) => {\r\n      const startEl = document.getElementById(`rule-${sectionKey}-start-offset`);\r\n      const endEl = document.getElementById(`rule-${sectionKey}-end-offset`);\r\n      if (startEl) startEl.value = '';\r\n      if (endEl) endEl.value = '';\r\n    });\r\n\r\n    document\r\n      .querySelectorAll(\r\n        '#rule-editor-modal input[type=\"text\"]:not(.rule-date-range-input), #rule-editor-modal input[type=\"search\"]:not(.rule-date-range-input)'\r\n      )\r\n      .forEach((el) => (el.value = ''));\r\n    document\r\n      .querySelectorAll('#rule-editor-modal input[type=\"checkbox\"]')\r\n      .forEach((el) => (el.checked = false));\r\n    document.querySelectorAll('#rule-editor-modal select').forEach((el) => {\r\n      if (el.options.length > 0) {\r\n        el.value = el.options[0].value;\r\n      }\r\n    });\r\n  }\r\n\r\n  ruleEditorModal.classList.remove('hidden');\r\n}\r\n\r\n/**\r\n * Fecha o modal do editor de regras.\r\n */\r\nfunction closeRuleEditor() {\r\n  ruleEditorModal.classList.add('hidden');\r\n  currentlyEditingRuleId = null;\r\n}\r\n\r\n/**\r\n * Salva a regra (nova ou editada) do modal.\r\n */\r\nfunction handleSaveRule() {\r\n  const name = ruleNameInput.value.trim();\r\n  if (!name) {\r\n    Utils.showMessage('O nome da regra é obrigatório.', 'error');\r\n    return;\r\n  }\r\n\r\n  const triggerKeywords = ruleTriggersInput.value\r\n    .split(',')\r\n    .map((k) => k.trim())\r\n    .filter(Boolean);\r\n  const filterSettings = {};\r\n  const sections = ['consultations', 'exams', 'appointments', 'regulations', 'documents'];\r\n\r\n  sections.forEach((sectionKey) => {\r\n    filterSettings[sectionKey] = {};\r\n\r\n    // --- INÍCIO DA CORREÇÃO ---\r\n    // Salva as configurações de data\r\n    const startOffsetEl = document.getElementById(`rule-${sectionKey}-start-offset`);\r\n    const endOffsetEl = document.getElementById(`rule-${sectionKey}-end-offset`);\r\n    const startVal = startOffsetEl.value;\r\n    const endVal = endOffsetEl.value;\r\n\r\n    const startNum = parseInt(startVal, 10);\r\n    const endNum = parseInt(endVal, 10);\r\n\r\n    if (!isNaN(startNum) || !isNaN(endNum)) {\r\n      filterSettings[sectionKey].dateRange = {\r\n        start: !isNaN(startNum) ? -startNum : null,\r\n        end: !isNaN(endNum) ? endNum : null,\r\n      };\r\n    }\r\n    // --- FIM DA CORREÇÃO ---\r\n\r\n    // Salva as configurações dos outros filtros\r\n    const sectionFilters = filterConfig[sectionKey] || [];\r\n    sectionFilters.forEach((filter) => {\r\n      if (filter.type === 'component') return;\r\n      const element = document.getElementById(`rule-${sectionKey}-${filter.id}`);\r\n      if (element) {\r\n        const value = element.type === 'checkbox' ? element.checked : element.value;\r\n        filterSettings[sectionKey][filter.id] = value;\r\n      }\r\n    });\r\n  });\r\n\r\n  if (currentlyEditingRuleId) {\r\n    const ruleIndex = automationRules.findIndex((r) => r.id === currentlyEditingRuleId);\r\n    if (ruleIndex > -1) {\r\n      automationRules[ruleIndex].name = name;\r\n      automationRules[ruleIndex].triggerKeywords = triggerKeywords;\r\n      automationRules[ruleIndex].filterSettings = filterSettings;\r\n    }\r\n  } else {\r\n    const newRule = {\r\n      id: Date.now().toString(),\r\n      name,\r\n      triggerKeywords,\r\n      isActive: true,\r\n      filterSettings,\r\n    };\r\n    automationRules.push(newRule);\r\n  }\r\n\r\n  saveAutomationRules();\r\n  renderAutomationRules();\r\n  closeRuleEditor();\r\n}\r\n\r\nfunction handleEditRule(ruleId) {\r\n  openRuleEditor(ruleId);\r\n}\r\n\r\nfunction handleDeleteRule(ruleId) {\r\n  Utils.showDialog({\r\n    message: 'Tem certeza que deseja excluir esta regra?',\r\n    onConfirm: () => {\r\n      automationRules = automationRules.filter((r) => r.id !== ruleId);\r\n      saveAutomationRules();\r\n      renderAutomationRules();\r\n    },\r\n  });\r\n}\r\n\r\nfunction handleDuplicateRule(ruleId) {\r\n  const originalRule = automationRules.find((r) => r.id === ruleId);\r\n  if (!originalRule) return;\r\n\r\n  const newRule = JSON.parse(JSON.stringify(originalRule));\r\n  newRule.id = Date.now().toString();\r\n  newRule.name = `${originalRule.name} (Cópia)`;\r\n  newRule.isActive = false;\r\n\r\n  const originalIndex = automationRules.findIndex((r) => r.id === ruleId);\r\n  automationRules.splice(originalIndex + 1, 0, newRule);\r\n\r\n  saveAutomationRules();\r\n  renderAutomationRules();\r\n}\r\n\r\nfunction handleToggleRuleActive(ruleId, isActive) {\r\n  const ruleIndex = automationRules.findIndex((r) => r.id === ruleId);\r\n  if (ruleIndex > -1) {\r\n    automationRules[ruleIndex].isActive = isActive;\r\n    saveAutomationRules();\r\n  }\r\n}\r\n\r\nfunction reorderAutomationRules() {\r\n  const newOrderedIds = [...automationRulesList.querySelectorAll('.rule-item')].map(\r\n    (item) => item.dataset.ruleId\r\n  );\r\n  automationRules.sort((a, b) => newOrderedIds.indexOf(a.id) - newOrderedIds.indexOf(b.id));\r\n  saveAutomationRules();\r\n}\r\n\r\n/**\r\n * Popula as abas do editor de regras com os controles de filtro apropriados.\r\n */\r\nasync function populateRuleEditorFilters() {\r\n  let priorities = [];\r\n\r\n  try {\r\n    const baseUrl = await API.getBaseUrl();\r\n    if (baseUrl) {\r\n      priorities = await API.fetchRegulationPriorities();\r\n    }\r\n  } catch (error) {\r\n    console.error('Não foi possível carregar prioridades:', error);\r\n  }\r\n\r\n  const sections = ['consultations', 'exams', 'appointments', 'regulations', 'documents'];\r\n\r\n  sections.forEach((sectionKey) => {\r\n    const container = document.getElementById(`${sectionKey}-rule-editor-tab`);\r\n    if (!container) return;\r\n    container.innerHTML = ''; // Limpa o conteúdo anterior\r\n\r\n    // Adiciona o componente de data\r\n    const dateRangeElement = createDateRangeElementForRuleEditor(sectionKey);\r\n    container.appendChild(dateRangeElement);\r\n\r\n    const sectionFilters = filterConfig[sectionKey] || [];\r\n\r\n    sectionFilters.forEach((filter) => {\r\n      if (filter.type === 'component') return;\r\n      const filterElement = createFilterElementForRuleEditor(filter, sectionKey, priorities);\r\n      container.appendChild(filterElement);\r\n    });\r\n  });\r\n\r\n  const firstTabButton = document.querySelector('#rule-editor-filter-tabs .tab-button');\r\n  if (firstTabButton) {\r\n    firstTabButton.click();\r\n  }\r\n}\r\n\r\n/**\r\n * Cria um único elemento de filtro para o modal do editor de regras.\r\n * @param {object} filter - O objeto de configuração do filtro.\r\n * @param {string} sectionKey - A chave da seção.\r\n * @param {Array<object>} priorities - A lista de prioridades dinâmicas.\r\n * @returns {HTMLElement} O elemento HTML do filtro.\r\n */\r\nfunction createFilterElementForRuleEditor(filter, sectionKey, priorities) {\r\n  const container = document.createElement('div');\r\n  const elementId = `rule-${sectionKey}-${filter.id}`;\r\n  let elementHtml = '';\r\n\r\n  if (filter.type !== 'checkbox') {\r\n    container.className = 'mb-3';\r\n    elementHtml += `<label for=\"${elementId}\" class=\"block font-medium mb-1 text-sm\">${filter.label}</label>`;\r\n  }\r\n\r\n  switch (filter.type) {\r\n    case 'text':\r\n      elementHtml += `<input type=\"text\" id=\"${elementId}\" placeholder=\"${\r\n        filter.placeholder || ''\r\n      }\" class=\"w-full px-2 py-1 border border-slate-300 rounded-md\">`;\r\n      break;\r\n    case 'select':\r\n    case 'selectGroup':\r\n      elementHtml += `<select id=\"${elementId}\" class=\"w-full px-2 py-1 border border-slate-300 rounded-md bg-white\">`;\r\n      if (filter.id === 'regulation-filter-priority') {\r\n        elementHtml += '<option value=\"todas\">Todas</option>';\r\n        priorities.forEach((prio) => {\r\n          elementHtml += `<option value=\"${prio.coreDescricao}\">${prio.coreDescricao}</option>`;\r\n        });\r\n      } else {\r\n        (filter.options || []).forEach((opt) => {\r\n          elementHtml += `<option value=\"${opt.value}\">${opt.text}</option>`;\r\n        });\r\n      }\r\n      elementHtml += '</select>';\r\n      break;\r\n    case 'checkbox':\r\n      container.className = 'flex items-center gap-2';\r\n      elementHtml += `<input id=\"${elementId}\" type=\"checkbox\" class=\"h-4 w-4 rounded border-gray-300 text-blue-600 focus:ring-blue-500\">\r\n                          <label for=\"${elementId}\" class=\"block text-sm text-slate-700\">${filter.label}</label>`;\r\n      break;\r\n  }\r\n  container.innerHTML = elementHtml;\r\n  return container;\r\n}\r\n\r\n/**\r\n * Cria o componente de intervalo de datas para o editor de regras.\r\n * @param {string} sectionKey - A chave da seção.\r\n * @returns {HTMLElement} O elemento HTML do componente.\r\n */\r\nfunction createDateRangeElementForRuleEditor(sectionKey) {\r\n  const container = document.createElement('div');\r\n  container.className = 'p-2 bg-slate-50 rounded-md border mb-4';\r\n  container.innerHTML = `\r\n    <h5 class=\"font-medium text-xs text-slate-500 mb-2\">Período de Busca Automático</h5>\r\n    <div class=\"flex items-center gap-4 text-sm\">\r\n        <div>\r\n            <label for=\"rule-${sectionKey}-start-offset\" class=\"text-xs\">Início (meses antes):</label>\r\n            <input type=\"number\" id=\"rule-${sectionKey}-start-offset\" class=\"w-20 p-1 border rounded-md rule-date-range-input\" placeholder=\"Padrão\" min=\"0\">\r\n        </div>\r\n        <div>\r\n            <label for=\"rule-${sectionKey}-end-offset\" class=\"text-xs\">Fim (meses depois):</label>\r\n            <input type=\"number\" id=\"rule-${sectionKey}-end-offset\" class=\"w-20 p-1 border rounded-md rule-date-range-input\" placeholder=\"Padrão\" min=\"0\">\r\n        </div>\r\n    </div>\r\n    <p class=\"text-xs text-slate-400 mt-2\">Deixe em branco para usar o padrão global da seção.</p>\r\n  `;\r\n  return container;\r\n}\r\n\r\n// --- Inicialização ---\r\ndocument.addEventListener('DOMContentLoaded', async () => {\r\n  await restoreOptions();\r\n\r\n  const mainTabsContainer = document.querySelector('#filter-tabs-container .tabs');\r\n  Utils.setupTabs(document.getElementById('filter-tabs-container'));\r\n  if (mainTabsContainer) {\r\n    setupTabDnD(mainTabsContainer);\r\n  }\r\n  Utils.setupTabs(document.getElementById('rule-editor-filter-tabs'));\r\n\r\n  createNewRuleBtn.addEventListener('click', () => openRuleEditor(null));\r\n  cancelRuleBtn.addEventListener('click', closeRuleEditor);\r\n  saveRuleBtn.addEventListener('click', handleSaveRule);\r\n\r\n  ruleEditorModal.addEventListener('click', (e) => {\r\n    if (e.target === ruleEditorModal) {\r\n      closeRuleEditor();\r\n    }\r\n  });\r\n\r\n  automationRulesList.addEventListener('dragstart', handleDragStart);\r\n  automationRulesList.addEventListener('dragend', handleDragEnd);\r\n  automationRulesList.addEventListener('dragover', handleDragOver);\r\n  automationRulesList.addEventListener('drop', handleDrop);\r\n\r\n  api.storage.onChanged.addListener((changes, areaName) => {\r\n    if (areaName === 'sync' && changes.enableAutomaticDetection) {\r\n      const toggle = document.getElementById('enableAutomaticDetection');\r\n      if (toggle) {\r\n        toggle.checked = changes.enableAutomaticDetection.newValue;\r\n      }\r\n    }\r\n  });\r\n});\r\n\r\nsaveButton.addEventListener('click', saveOptions);\r\ncloseButton.addEventListener('click', () => {\r\n  window.close();\r\n});\r\nrestoreDefaultsButton.addEventListener('click', handleRestoreDefaults);\r\nexportButton.addEventListener('click', handleExport);\r\nimportFileInput.addEventListener('change', handleImport);\r\n\r\nallDropZones.forEach((zone) => {\r\n  zone.addEventListener('dragover', handleDragOver);\r\n  zone.addEventListener('drop', handleDrop);\r\n});\r\n","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n// expose the modules object (__webpack_modules__)\n__webpack_require__.m = __webpack_modules__;\n\n","var deferred = [];\n__webpack_require__.O = (result, chunkIds, fn, priority) => {\n\tif(chunkIds) {\n\t\tpriority = priority || 0;\n\t\tfor(var i = deferred.length; i > 0 && deferred[i - 1][2] > priority; i--) deferred[i] = deferred[i - 1];\n\t\tdeferred[i] = [chunkIds, fn, priority];\n\t\treturn;\n\t}\n\tvar notFulfilled = Infinity;\n\tfor (var i = 0; i < deferred.length; i++) {\n\t\tvar [chunkIds, fn, priority] = deferred[i];\n\t\tvar fulfilled = true;\n\t\tfor (var j = 0; j < chunkIds.length; j++) {\n\t\t\tif ((priority & 1 === 0 || notFulfilled >= priority) && Object.keys(__webpack_require__.O).every((key) => (__webpack_require__.O[key](chunkIds[j])))) {\n\t\t\t\tchunkIds.splice(j--, 1);\n\t\t\t} else {\n\t\t\t\tfulfilled = false;\n\t\t\t\tif(priority < notFulfilled) notFulfilled = priority;\n\t\t\t}\n\t\t}\n\t\tif(fulfilled) {\n\t\t\tdeferred.splice(i--, 1)\n\t\t\tvar r = fn();\n\t\t\tif (r !== undefined) result = r;\n\t\t}\n\t}\n\treturn result;\n};","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","// no baseURI\n\n// object to store loaded and loading chunks\n// undefined = chunk not loaded, null = chunk preloaded/prefetched\n// [resolve, reject, Promise] = chunk loading, 0 = chunk loaded\nvar installedChunks = {\n\t\"options\": 0\n};\n\n// no chunk on demand loading\n\n// no prefetching\n\n// no preloaded\n\n// no HMR\n\n// no HMR manifest\n\n__webpack_require__.O.j = (chunkId) => (installedChunks[chunkId] === 0);\n\n// install a JSONP callback for chunk loading\nvar webpackJsonpCallback = (parentChunkLoadingFunction, data) => {\n\tvar [chunkIds, moreModules, runtime] = data;\n\t// add \"moreModules\" to the modules object,\n\t// then flag all \"chunkIds\" as loaded and fire callback\n\tvar moduleId, chunkId, i = 0;\n\tif(chunkIds.some((id) => (installedChunks[id] !== 0))) {\n\t\tfor(moduleId in moreModules) {\n\t\t\tif(__webpack_require__.o(moreModules, moduleId)) {\n\t\t\t\t__webpack_require__.m[moduleId] = moreModules[moduleId];\n\t\t\t}\n\t\t}\n\t\tif(runtime) var result = runtime(__webpack_require__);\n\t}\n\tif(parentChunkLoadingFunction) parentChunkLoadingFunction(data);\n\tfor(;i < chunkIds.length; i++) {\n\t\tchunkId = chunkIds[i];\n\t\tif(__webpack_require__.o(installedChunks, chunkId) && installedChunks[chunkId]) {\n\t\t\tinstalledChunks[chunkId][0]();\n\t\t}\n\t\tinstalledChunks[chunkId] = 0;\n\t}\n\treturn __webpack_require__.O(result);\n}\n\nvar chunkLoadingGlobal = self[\"webpackChunkassistente_de_regulacao_medica\"] = self[\"webpackChunkassistente_de_regulacao_medica\"] || [];\nchunkLoadingGlobal.forEach(webpackJsonpCallback.bind(null, 0));\nchunkLoadingGlobal.push = webpackJsonpCallback.bind(null, chunkLoadingGlobal.push.bind(chunkLoadingGlobal));","","// startup\n// Load entry module and return exports\n// This entry module depends on other loaded chunks and execution need to be delayed\nvar __webpack_exports__ = __webpack_require__.O(undefined, [\"common\"], () => (__webpack_require__(\"./options.js\")))\n__webpack_exports__ = __webpack_require__.O(__webpack_exports__);\n",""],"names":[],"sourceRoot":""}