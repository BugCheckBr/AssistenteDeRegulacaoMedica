{
  "Browser Extension: Content Script": {
    "prefix": "content-script",
    "body": [
      "/**",
      " * @fileoverview Content Script para ${1:descri√ß√£o}",
      " * @author Assistente de Regula√ß√£o M√©dica",
      " * @version ${2:1.0.0}",
      " */",
      "",
      "// üè• Verifica√ß√£o de ambiente m√©dico",
      "if (window.location.href.includes('sigss') || window.location.href.includes('cadsus')) {",
      "  console.log('[Assistente de Regula√ß√£o] Content script ativo em:', window.location.hostname);",
      "  ",
      "  // üîí Sanitiza√ß√£o de dados m√©dicos",
      "  const sanitizePatientData = (data) => {",
      "    // Nunca expor CPF, RG ou dados sens√≠veis",
      "    return {",
      "      ...data,",
      "      cpf: undefined,",
      "      rg: undefined,",
      "      endereco: undefined",
      "    };",
      "  };",
      "  ",
      "  // üì° Comunica√ß√£o segura com background",
      "  const sendToBackground = (message) => {",
      "    browser.runtime.sendMessage({",
      "      type: '${3:MESSAGE_TYPE}',",
      "      data: sanitizePatientData(message),",
      "      timestamp: Date.now(),",
      "      source: 'content-script'",
      "    });",
      "  };",
      "  ",
      "  // üéØ Fun√ß√£o principal",
      "  const main = () => {",
      "    $4",
      "  };",
      "  ",
      "  // üöÄ Inicializa√ß√£o",
      "  if (document.readyState === 'loading') {",
      "    document.addEventListener('DOMContentLoaded', main);",
      "  } else {",
      "    main();",
      "  }",
      "}"
    ],
    "description": "Template para Content Script com compliance m√©dico"
  },
  
  "Browser Extension: Background Script": {
    "prefix": "background-script",
    "body": [
      "/**",
      " * @fileoverview Service Worker para ${1:descri√ß√£o}",
      " * @author Assistente de Regula√ß√£o M√©dica",
      " * @version ${2:1.0.0}",
      " */",
      "",
      "// üîß Configura√ß√£o inicial",
      "chrome.runtime.onInstalled.addListener((details) => {",
      "  console.log('[Assistente de Regula√ß√£o] Extension installed:', details.reason);",
      "  ",
      "  if (details.reason === 'install') {",
      "    // Configura√ß√£o inicial",
      "    chrome.storage.session.set({",
      "      extensionActive: true,",
      "      medicalCompliance: true,",
      "      version: chrome.runtime.getManifest().version",
      "    });",
      "  }",
      "});",
      "",
      "// üì° Comunica√ß√£o com content scripts",
      "chrome.runtime.onMessage.addListener((message, sender, sendResponse) => {",
      "  console.log('[Background] Message received:', message.type);",
      "  ",
      "  switch (message.type) {",
      "    case '${3:MESSAGE_TYPE}':",
      "      handle${3/(.*)/${1:/capitalize}/}(message.data)",
      "        .then(response => sendResponse({ success: true, data: response }))",
      "        .catch(error => sendResponse({ success: false, error: error.message }));",
      "      return true; // Mant√©m canal aberto para async",
      "      ",
      "    default:",
      "      console.warn('[Background] Unknown message type:', message.type);",
      "      sendResponse({ success: false, error: 'Unknown message type' });",
      "  }",
      "});",
      "",
      "// üè• Handler espec√≠fico para dados m√©dicos",
      "const handle${3/(.*)/${1:/capitalize}/} = async (data) => {",
      "  // üîí Valida√ß√£o de seguran√ßa m√©dica",
      "  if (!data || typeof data !== 'object') {",
      "    throw new Error('Invalid medical data format');",
      "  }",
      "  ",
      "  // üìä Processamento seguro",
      "  try {",
      "    $4",
      "    return { processed: true, timestamp: Date.now() };",
      "  } catch (error) {",
      "    console.error('[Background] Error processing medical data:', error);",
      "    throw error;",
      "  }",
      "};"
    ],
    "description": "Template para Background Script com compliance m√©dico"
  },
  
  "Medical API Call": {
    "prefix": "medical-api",
    "body": [
      "/**",
      " * Chamada segura para API m√©dica",
      " * @param {string} endpoint - Endpoint da API",
      " * @param {Object} params - Par√¢metros (sem dados sens√≠veis)",
      " * @returns {Promise<Object>} Resposta sanitizada",
      " */",
      "const ${1:apiCall} = async (endpoint, params = {}) => {",
      "  // üîí Valida√ß√£o de par√¢metros",
      "  const sanitizedParams = Object.keys(params).reduce((acc, key) => {",
      "    // Nunca enviar dados sens√≠veis",
      "    if (!['cpf', 'rg', 'endereco', 'telefone'].includes(key.toLowerCase())) {",
      "      acc[key] = params[key];",
      "    }",
      "    return acc;",
      "  }, {});",
      "  ",
      "  try {",
      "    const response = await fetch(`\\${API_BASE_URL}/\\${endpoint}`, {",
      "      method: '${2:POST}',",
      "      headers: {",
      "        'Content-Type': 'application/json',",
      "        'X-Medical-Compliance': 'LGPD-GDPR',",
      "        'X-Request-Source': 'assistente-regulacao'",
      "      },",
      "      body: JSON.stringify(sanitizedParams)",
      "    });",
      "    ",
      "    if (!response.ok) {",
      "      throw new Error(`API Error: \\${response.status} \\${response.statusText}`);",
      "    }",
      "    ",
      "    const data = await response.json();",
      "    ",
      "    // üè• Log para auditoria m√©dica (sem dados sens√≠veis)",
      "    console.log(`[Medical API] \\${endpoint} - Success:`, {",
      "      timestamp: new Date().toISOString(),",
      "      endpoint,",
      "      responseType: typeof data,",
      "      recordCount: Array.isArray(data) ? data.length : 1",
      "    });",
      "    ",
      "    return data;",
      "  } catch (error) {",
      "    console.error(`[Medical API] \\${endpoint} - Error:`, error.message);",
      "    throw error;",
      "  }",
      "};"
    ],
    "description": "Template para chamadas API m√©dicas seguras"
  },
  
  "Jest Test for Extension": {
    "prefix": "jest-extension-test",
    "body": [
      "/**",
      " * @fileoverview Testes para ${1:componente}",
      " * @author Assistente de Regula√ß√£o M√©dica",
      " */",
      "",
      "import { ${2:moduleToTest} } from '../${3:path/to/module}';",
      "import { mockBrowserAPI } from '../__mocks__/browser-api';",
      "import { mockMedicalData } from '../__mocks__/medical-data';",
      "",
      "// üß™ Configura√ß√£o dos mocks",
      "beforeEach(() => {",
      "  global.browser = mockBrowserAPI;",
      "  global.chrome = mockBrowserAPI;",
      "  ",
      "  // Reset de dados m√©dicos mock",
      "  mockMedicalData.reset();",
      "});",
      "",
      "describe('${4:Component Test Suite}', () => {",
      "  describe('üè• Medical Data Handling', () => {",
      "    test('should sanitize patient data', async () => {",
      "      // Arrange",
      "      const unsafeData = {",
      "        nome: 'Jo√£o Silva',",
      "        cpf: '123.456.789-00', // Dados sens√≠veis",
      "        rg: '12.345.678-9',",
      "        ficha: 'F123456'",
      "      };",
      "      ",
      "      // Act",
      "      const result = await ${2:moduleToTest}.sanitizeData(unsafeData);",
      "      ",
      "      // Assert",
      "      expect(result).toHaveProperty('nome');",
      "      expect(result).toHaveProperty('ficha');",
      "      expect(result).not.toHaveProperty('cpf');",
      "      expect(result).not.toHaveProperty('rg');",
      "    });",
      "    ",
      "    test('should handle API errors gracefully', async () => {",
      "      // Arrange",
      "      mockBrowserAPI.runtime.sendMessage.mockRejectedValue(",
      "        new Error('Network error')",
      "      );",
      "      ",
      "      // Act & Assert",
      "      await expect(${2:moduleToTest}.${5:methodName}())",
      "        .rejects.toThrow('Network error');",
      "    });",
      "  });",
      "  ",
      "  describe('üîí Security Compliance', () => {",
      "    test('should not log sensitive data', () => {",
      "      const consoleSpy = jest.spyOn(console, 'log');",
      "      ",
      "      ${2:moduleToTest}.${6:methodWithLogging}({",
      "        cpf: '123.456.789-00',",
      "        ficha: 'F123456'",
      "      });",
      "      ",
      "      // Verifica se CPF n√£o aparece nos logs",
      "      expect(consoleSpy).not.toHaveBeenCalledWith(",
      "        expect.stringContaining('123.456.789-00')",
      "      );",
      "      ",
      "      consoleSpy.mockRestore();",
      "    });",
      "  });",
      "  ",
      "  describe('üåê Browser Compatibility', () => {",
      "    test('should work with Chrome API', () => {",
      "      global.chrome = mockBrowserAPI;",
      "      delete global.browser;",
      "      ",
      "      expect(() => ${2:moduleToTest}.${7:browserSpecificMethod}())",
      "        .not.toThrow();",
      "    });",
      "    ",
      "    test('should work with Firefox API', () => {",
      "      global.browser = mockBrowserAPI;",
      "      delete global.chrome;",
      "      ",
      "      expect(() => ${2:moduleToTest}.${7:browserSpecificMethod}())",
      "        .not.toThrow();",
      "    });",
      "  });",
      "});"
    ],
    "description": "Template de teste Jest para extens√µes com compliance m√©dico"
  }
}
